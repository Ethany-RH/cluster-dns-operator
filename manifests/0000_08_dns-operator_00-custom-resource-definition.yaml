apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: dnses.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    kind: DNS
    listKind: DNSList
    plural: dnses
    singular: dns
  scope: Cluster
  version: v1
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: spec is the specification of the desired behavior of the DNS.
          type: object
        status:
          description: status is the most recently observed status of the DNS.
          properties:
            clusterDomain:
              description: 'clusterDomain is the local cluster DNS domain suffix for
                DNS services. This will be a subdomain as defined in RFC 1034, section
                3.5: https://tools.ietf.org/html/rfc1034#section-3.5 Example: "cluster.local"  More
                info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service'
              type: string
            clusterIP:
              description: 'clusterIP is the service IP through which this DNS is
                made available.  In the case of the default DNS, this will be a well
                known IP that is used as the default nameserver for pods that are
                using the default ClusterFirst DNS policy.  In general, this IP can
                be specified in a pod''s spec.dnsConfig.nameservers list or used explicitly
                when performing name resolution from within the cluster. Example:
                dig foo.com @<service IP>  More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
              type: string
            conditions:
              description: 'conditions provide information about the state of the
                DNS on the cluster.  These are the supported DNS conditions:    *
                Available   - True if the following conditions are met:     * DNS
                controller daemonset is available.   - False if any of those conditions
                are unsatisfied.  +patchMergeKey=type +patchStrategy=merge'
              items:
                properties:
                  lastTransitionTime:
                    format: date-time
                    type: string
                  message:
                    type: string
                  reason:
                    type: string
                  status:
                    type: string
                  type:
                    type: string
                type: object
              type: array
          type: object
