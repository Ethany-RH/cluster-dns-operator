// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/dns/cluster-role-binding.yaml (223B)
// assets/dns/cluster-role.yaml (210B)
// assets/dns/configmap.yaml (390B)
// assets/dns/daemonset.yaml (4.682kB)
// assets/dns/metrics/cluster-role-binding.yaml (279B)
// assets/dns/metrics/cluster-role.yaml (246B)
// assets/dns/metrics/role-binding.yaml (293B)
// assets/dns/metrics/role.yaml (284B)
// assets/dns/namespace.yaml (369B)
// assets/dns/service-account.yaml (85B)
// assets/dns/service.yaml (381B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x8e\x83\x40\x0c\x05\xd0\x7e\x4e\xe1\x0b\xc0\x6a\xbb\xd5\x74\x9b\xdc\x80\x48\xe9\xcd\x8c\x09\x0e\x60\xa3\xb1\x87\x22\xa7\x8f\x10\x4a\x45\x3a\x17\xfe\xff\xfd\x89\x25\x47\xb8\xce\xd5\x9c\x4a\xa7\x33\x5d\x58\x32\xcb\x23\xe0\xca\x77\x2a\xc6\x2a\x11\x4a\x8f\xa9\xc5\xea\xa3\x16\x7e\xa1\xb3\x4a\x3b\xfd\x59\xcb\xfa\xb3\xfd\x86\x85\x1c\x33\x3a\xc6\x00\x00\x20\xb8\x50\x04\x5d\x49\x6c\xe4\xc1\x9b\x2c\x16\xac\xf6\x4f\x4a\x6e\x31\x34\x70\x78\x37\x2a\x1b\x27\xfa\x4f\x49\xab\x78\xf8\xc4\xf6\xe7\xe3\xb6\x15\xd3\xa9\xa7\xe8\x4c\x1d\x0d\x3b\x74\x9a\x1d\xbe\xd3\xef\x00\x00\x00\xff\xff\xfa\x62\xe7\x50\xdf\x00\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xf6, 0x2a, 0x3b, 0x84, 0xd7, 0x3e, 0xc4, 0xe1, 0x70, 0x66, 0x31, 0xda, 0xc4, 0x2f, 0x53, 0x27, 0x29, 0x13, 0xfe, 0x80, 0x36, 0xc5, 0xa1, 0x70, 0xdc, 0x2d, 0xef, 0xcf, 0xe0, 0xc4, 0xeb}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\xbd\x6e\xc5\x30\x08\x46\x77\x3f\x05\xba\x7b\x52\x75\xab\xbc\x76\xe8\xde\xa1\x3b\xd7\xa6\x0a\x8a\x03\x16\xe0\x54\xea\xd3\x5f\xe5\x67\x3b\xe7\x08\xf4\xad\x2c\x35\xc3\x67\x1b\x1e\x64\xdf\xda\x28\x61\xe7\x1f\x32\x67\x95\x0c\xf6\xc4\x32\xe3\x88\x45\x8d\xff\x31\x58\x65\x5e\x3f\x7c\x66\x7d\xdb\xdf\xd3\x46\x81\x15\x03\x73\x02\x10\xdc\x28\x83\x76\x12\x5f\xf8\x37\xa6\x2a\x9e\x6c\x34\xf2\x9c\x26\xc0\xce\x5f\xa6\xa3\xfb\x71\x39\xc1\xe3\x91\x00\x8c\x5c\x87\x15\xba\x1b\x49\xed\xca\x12\x7e\x9a\x93\xed\x5c\xe8\x92\xae\xf5\x82\x63\xc3\x3b\x5e\x7d\x27\x7b\xde\xbf\x8d\x3d\x4e\xf8\xc3\x28\x4b\x7a\x05\x00\x00\xff\xff\xcb\xdd\xd7\x2a\xd2\x00\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 210, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xb2, 0x0, 0x7d, 0x4a, 0xd9, 0xf, 0x8, 0x44, 0xe7, 0xab, 0x82, 0xe4, 0x50, 0x94, 0xaa, 0x4e, 0xfd, 0xa0, 0x63, 0xba, 0x18, 0xcf, 0xeb, 0xa6, 0xe4, 0x2d, 0x4, 0x35, 0xd5, 0xc7, 0xd}}
	return a, nil
}

var _assetsDnsConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\x4f\x4b\x33\x31\x18\xc4\xef\xfb\x29\x06\xde\xf3\xbb\xb5\x2c\x2b\xb8\xd7\x9e\xbd\x7a\x7f\x4c\x66\x9b\xd0\x6c\x12\x9e\x24\x45\x51\xbf\xbb\xb4\x85\x68\xc1\x39\xcd\x3f\x7e\x27\x1f\xed\x82\x43\x8a\xab\x3f\x3e\x4b\x1e\x24\xfb\x17\x6a\xf1\x29\x2e\x38\xef\x87\x7f\x88\xb2\x11\x12\xed\xd5\x94\x2c\x86\x10\x25\x0a\x2b\xa4\x42\x5b\xac\x7e\xe3\x60\xa5\xca\x32\x00\x87\xa4\x5c\x7d\xe0\x82\xcf\x01\x00\xc6\x65\x9e\xe6\x09\x1f\xd7\x70\x11\x55\x93\x96\x1e\x1d\x25\x54\xd7\xe3\xa9\xbd\x52\x23\x2b\x0b\x4c\x68\xa5\x52\xc7\x90\x8c\x04\xf8\xf8\x5f\xac\xd5\x51\x34\x0b\x7c\x7e\xbc\x99\x1f\xec\x45\x39\xd9\x02\x1f\x0b\x4d\x53\xde\x2d\x2d\x97\xaa\x94\xed\xae\x5c\x25\x84\xea\x34\xb5\xa3\xfb\x1b\xdf\xdf\x5f\xdd\x65\x4d\x1b\xab\x63\x2b\x58\x9e\xf6\xf3\xf4\x7b\x78\x7b\xc7\x88\x1d\xab\xd9\x29\x4b\x0a\xe7\xd1\xa4\xb8\xf6\x83\x11\xe3\x88\xe9\xa1\x17\xca\x90\xc4\x0e\x37\xfe\x77\x00\x00\x00\xff\xff\xef\xe8\x25\x0a\x86\x01\x00\x00")

func assetsDnsConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsConfigmapYaml,
		"assets/dns/configmap.yaml",
	)
}

func assetsDnsConfigmapYaml() (*asset, error) {
	bytes, err := assetsDnsConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/configmap.yaml", size: 390, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0x35, 0x3d, 0x20, 0x71, 0xe4, 0x2d, 0x28, 0xd6, 0xac, 0xd6, 0xef, 0x59, 0x0, 0x1, 0x68, 0xee, 0x6, 0x5b, 0xde, 0x33, 0x4d, 0xdf, 0xf1, 0x31, 0xbd, 0x16, 0xd1, 0xfc, 0xec, 0x7e, 0x62}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5f\x73\xdb\xb8\x11\x7f\xf7\xa7\xd8\xa3\x3c\x71\x32\x35\xfd\xa7\x37\xbe\x5e\x99\xf8\x7a\xae\x2d\x37\x9e\x46\xb6\xc6\x52\xae\x0f\x1e\x4f\x06\x02\x97\xe2\xd6\x20\x80\x03\x40\x2a\x1a\xc7\xdf\xbd\x03\xd2\x94\x40\x4a\xd5\x4d\xa7\x2f\xf1\x83\x25\x61\x77\x7f\xd8\xff\xbb\x78\x22\x99\x26\x70\xc5\xb0\x50\x72\x82\x6e\x8f\x69\xfa\x0d\x8d\x25\x25\x13\x60\x5a\xdb\xe3\xea\x74\x6f\x00\x92\x15\x78\x58\xff\xb7\x9a\x71\x04\x26\x53\x10\x6c\x86\xc2\x02\x33\x08\x16\x1d\x30\x07\xa6\x94\x8e\x0a\xdc\xb3\x1a\x79\xb2\x07\xe0\xb0\xd0\x82\x39\xf4\xdf\x01\xda\xd3\xfa\x3b\x9a\x8a\x38\x5e\x70\xae\x4a\xe9\x6e\x59\x81\x09\xa4\xd2\xbe\x52\xb5\x21\x65\xc8\x2d\x2f\x05\xb3\xb6\x21\xda\xa5\x75\x58\xc4\x52\xa5\x18\x73\x43\x8e\x38\x13\xaf\xdc\x5c\x49\xc7\x48\xa2\xb1\x2d\x7a\x5c\x6b\x1a\x22\x02\x0c\x80\x0a\x36\x47\x20\xdb\xd7\xb6\xe5\xa8\xe9\xe3\x52\x88\xb1\x12\xc4\x97\x09\xdc\x64\xb7\xca\x8d\x0d\x5a\x94\x6e\xc5\xe5\xd0\x14\x24\x99\x23\x25\x47\x68\xad\x17\x79\x65\xbf\x66\x42\xcc\x18\x7f\x9a\xaa\x4f\x6a\x6e\xef\xe4\xd0\x18\x65\x56\x72\x5c\x15\x05\xf3\xae\x7e\x80\x88\x2b\x83\xa9\xb4\x11\x3c\xae\xc8\xcc\xcc\x6d\x4d\x8b\xb9\x92\x59\x74\x08\xd1\x31\x3a\x7e\xfc\xca\x79\x7c\xa9\x0c\x66\x24\x30\x14\xa9\x94\x28\x0b\x1c\x79\x07\xae\x2c\x5f\xdb\xee\x61\x68\x1e\x37\x4c\x2b\x2a\x40\xe1\xf9\xc7\xcc\xe5\x09\x84\x37\x04\x1c\x06\x59\x7a\x27\xc5\x32\x01\x67\xca\xb5\xa8\x56\xa6\x7b\xcf\xca\xef\x63\x65\x5c\x02\x67\x3f\x9e\xfd\x18\xa0\x6c\x46\xc0\xc7\x55\x39\xc5\x95\x48\xe0\xf3\xd5\xf8\x7f\x47\x8a\x1d\xd7\x5b\xd1\xa6\x97\x3b\xd0\xfe\x7a\xba\x05\xad\x40\x67\x88\x6f\xd7\x2d\x44\xf3\xbe\x20\x89\xd6\x8e\x8d\x9a\x61\x12\xf0\xe7\xce\xe9\x7f\xa0\x0b\x8f\x00\x74\xe3\xd7\x1c\x99\x70\x79\x97\x52\xeb\xf2\xf3\xc9\xcf\x27\x9d\x63\xcb\x73\xf4\xfa\x7c\x9c\x4e\xc7\x01\x81\x24\x39\x62\xe2\x0a\x05\x5b\x4e\x90\x2b\x99\xda\x04\x4e\x43\x51\x8d\x86\x54\xba\x9d\x66\x4b\xce\xd1\xda\x69\x6e\xd0\xe6\x4a\xa4\x09\x9c\x06\xd4\x8c\x91\x28\x0d\x06\xd4\xd0\x3d\xbe\x22\x54\xe9\xb6\x01\x0b\xaa\xf0\x3b\x71\xc5\x4f\x27\x3b\x54\x3e\xfb\x3f\x5c\x71\x16\x44\xde\xaa\xd2\x70\xb4\xa1\x59\x82\x0a\x72\xb6\x6b\x68\x81\x85\x32\xcb\x04\xce\x4e\xff\x3c\xa2\x4e\x19\xfd\x5e\xa2\xed\x73\x73\x5d\x7a\xa7\x9e\x14\x5b\x31\xfe\x72\xb2\x82\x08\x7a\x58\xd3\xf5\xbc\x42\xa2\x42\xf3\xdd\x74\x34\x8b\xbc\xac\xbb\xb4\x92\x0e\xbf\x76\xc2\xaf\x0d\x55\x24\x70\x8e\x69\xaf\x89\xec\xee\x59\xb9\xb2\xce\xc6\xbe\xcf\xed\x68\x58\x35\x53\xe0\x04\x94\x15\xdc\x5e\x8c\x86\x93\xe1\xfd\x6f\xc3\xfb\x7a\x32\x5d\x7e\xfa\x3c\x99\x0e\xef\xbf\x5c\xdd\x8d\x2e\x6e\x6e\xb7\x4d\xa8\x56\x1c\x65\xb5\xa9\x86\x47\xba\xb9\x1c\x4e\x02\x25\x06\x70\xe9\xfb\x37\x28\x03\xcd\x00\xb4\xa8\x99\x61\x0e\x53\x10\x64\x1d\xa8\xac\x1d\x69\xb6\x23\x75\x7b\x37\x1d\x26\x70\xad\x0c\x48\xb5\x38\x04\x94\xb6\x34\x08\x2e\x47\x8b\xb5\x5a\x06\x05\x73\x54\x61\x33\x5a\xdf\x43\xa6\x0c\x20\xe3\x79\x97\x70\xd8\xc1\x64\x12\x98\x20\x66\x61\x41\x2e\xf7\x58\x7d\x7b\x6d\x99\x65\xf4\x15\x16\x24\x04\x30\x61\x15\xcc\x10\x58\x9a\x62\x7a\x14\xe0\x54\x4c\x94\x98\x40\x54\xe7\x48\x6c\x70\x4e\xd6\x99\xe5\x91\xd2\x28\x6d\x4e\x99\x8b\x7b\x04\x5b\xf1\x68\x63\x98\x05\xae\x3b\x9e\x91\x3c\x9e\x31\x9b\x07\x67\x31\x0f\x7e\x7c\x0b\x8d\xf8\x61\x93\x1d\xea\x18\xc5\xa5\x02\x4d\x1a\x7d\x69\xee\x85\x45\x6e\x98\x86\x83\x27\x6f\xd2\xfe\xdb\x7f\xab\x99\x85\x58\xbf\x7b\x0f\xf8\x95\x1c\x9c\x1c\xc0\x74\x78\x3f\x0a\xd9\xef\xc6\xc3\xdb\xc9\xc7\x9b\xeb\xe9\x97\xd1\xc5\xfd\x3f\x87\xf7\xe7\xd1\xda\xb0\x39\x4a\xac\x43\xd7\xad\xab\x28\x10\xff\x78\x37\x99\x4e\xbe\x5c\xdf\x7c\x1a\x9e\x47\xeb\xa4\x0b\x39\xa6\xc3\xd1\x78\x83\xe1\xc8\x15\x3a\x0a\xd5\xb8\xb9\x9e\x9c\x1f\x1c\xc2\x41\x3d\x47\x20\x36\x10\xb3\x55\x9e\xc0\x87\x0f\x1f\x20\xda\x7f\x6e\xb3\xed\xa5\x23\x39\x80\x11\x7b\x42\x60\xf5\x0e\xa5\x0c\x33\x4b\xf0\x75\xb1\x8e\xb9\x12\x69\x53\x2f\xf5\xf9\x81\x05\xe6\x9c\xa1\x59\xe9\xd0\x86\x61\xe6\x1a\xe2\x0c\xe2\x78\x4d\x8d\x95\x14\x4b\x7f\xf1\xda\xc8\x97\xc8\xff\x5e\x99\xd4\xd5\x64\x91\xfb\x7b\x7d\x15\xbf\x87\x54\x75\xda\x56\x8a\x5c\xf8\x2c\x8e\x2f\xc0\x56\xfc\x0b\x69\xdb\x21\xfb\x64\xb6\x15\x07\x92\x1e\xbe\xb5\xfb\xe1\xd7\xc7\x97\x68\x03\xca\x5b\x7c\x8d\x8e\xe7\xad\x7f\xe0\x66\x0c\x99\x51\x05\x70\x51\x5a\x87\xc6\x37\x42\xa0\x0c\x74\xaf\x7b\x35\x7f\xa4\xed\xf9\xdb\xfd\xb7\x29\xcd\xe1\xd7\x68\xff\x79\xdd\x0f\x5e\x22\xf8\x93\xcd\x95\x71\xb5\x0a\x15\x7f\x39\xda\x7f\xee\x96\xcb\x4b\xf4\xee\xdd\x5e\x1f\x2e\x83\x87\x07\x88\xf6\xff\x16\x41\x8c\xbf\xc3\x09\xbc\x79\xe3\xe5\x07\xa4\x1b\xf5\x21\x96\x08\x27\xf0\xf8\xf8\xde\xc7\x42\xf6\xa4\xa1\xf5\xc6\xc3\xeb\x9d\xd1\xe3\x79\xb4\xff\xdc\x0a\xf7\xb8\x33\xea\xfa\x54\x49\xec\xaa\x33\x80\xcf\x3a\x65\x0e\x83\xf6\x07\x75\x0c\x29\x83\x05\xc2\x1c\x9d\x2f\x66\x4a\x03\xcf\xd9\x1e\xc0\xbf\xb0\xe9\x06\x52\x39\x28\x37\xc0\x16\x39\x4a\x6f\x87\xa9\x67\xc9\xeb\x42\xb8\x42\x53\xa5\xf3\x53\x46\x19\x60\x9a\xa0\x94\xac\x62\x24\xd8\x8c\x04\xb9\x65\xef\x9a\x89\x63\x02\x01\xa5\x33\x84\x1e\xa8\x14\xa9\xaf\x50\xeb\x7c\x0a\x04\x17\x52\x56\xa7\x70\x7b\x03\x59\x48\x51\xa0\xc3\x74\x6f\x5b\x10\x9e\x07\xad\x3b\xff\xd8\xf5\x03\xf8\x7b\x49\x22\x05\x06\x12\x17\x41\x7d\x34\xa9\x14\xda\xec\xeb\x48\x95\x06\x78\x69\x9d\x2a\x56\x4a\x67\x24\x1c\x1a\x4c\xbd\xd9\x3d\xec\xb9\x41\x0d\x71\x05\xd1\x00\xf6\x9f\xfb\x0d\xa6\x29\xa1\x4e\x49\xfd\xb2\xa3\xa8\x1a\x5d\x2f\xb4\x46\x99\x42\xdb\x81\xd6\x4a\xf8\xc2\xd9\x1c\x27\xb0\x51\x53\x3f\x84\x9e\xd9\x52\x53\x0d\x3f\x69\xcf\x5e\xa7\x62\xcd\xdc\x24\xe5\xe3\xcb\x56\x01\x00\xe4\xb9\x82\x3a\x5f\x5f\x1a\xa1\xf6\x63\xb3\x74\xe0\xbf\xb8\xe2\x97\x0d\xdb\xfb\x97\xd4\x69\xbe\xe5\x68\xc3\x47\xd3\xbb\xab\xbb\x64\x4b\x05\x30\xa7\x0a\xff\x08\x14\x4b\x70\x0a\x58\xa5\x28\x05\x26\x97\x40\x92\x2b\x69\xc9\x3a\x94\x0e\x66\x98\xb3\x8a\x82\x9d\xa5\x45\xbd\x47\x2d\xfc\x18\xdf\x96\x11\x85\x4a\x29\x23\x4c\xa1\x6a\xde\xc1\x3e\x11\x25\x62\xda\x4b\x4f\x00\x5e\xe8\x9e\x99\x1b\x39\xf0\xed\xdb\x6b\x07\xde\xcd\xb7\x69\x75\xcb\xeb\x8b\xc3\x57\xad\xc1\x42\x55\x98\xae\x6d\xad\xb3\x9a\x1b\x64\x0e\x8f\x9b\xea\xa9\x57\x9f\x75\x9f\x07\xae\xf4\x12\x78\x5e\x9a\x6e\x91\xf4\xfa\x8d\x15\x88\x1a\x7e\x3a\x81\x37\xb0\x60\xd4\xcd\xf9\x52\xfa\x91\xbc\xd9\xda\x3b\xc1\xdb\xba\x28\xef\x5c\x7e\xdb\xdd\x37\x95\xb6\xdd\x34\xaf\x30\x63\xa5\x68\x6f\xf7\x73\x79\x82\x02\xb9\x53\x66\x8d\x30\x43\xc7\x8e\x9e\xca\x19\x1a\x89\x7e\xca\x91\x3a\x56\x36\x01\x41\xb2\xfc\xda\x70\xbc\xb2\x36\x4b\xe6\xfa\xee\x3f\x78\x12\x37\xc7\x23\xa6\x03\x65\x07\x70\xcb\x8a\x5d\xab\xb5\xef\x4f\x0e\x8b\xae\x81\x31\x3c\xe1\x32\x81\xf6\xb1\xde\x8d\x6a\xf3\x20\xea\xd3\x76\xad\xbe\xfe\xac\x5e\x7c\xf7\x36\x60\xb6\x6c\xc2\x7e\x49\x5a\x6a\x4c\xe0\x7a\x0d\xe2\x94\xf0\xab\x0e\x29\xb9\x52\x74\xd0\x1e\x22\x30\x21\xc0\xbf\x94\x9d\x05\xab\xc0\xe5\xcc\xc1\xd5\xed\xc4\x1b\xcd\xc4\x82\x2d\x6d\x3b\x6b\x41\xc9\x9a\xd7\x87\xc5\xae\x9e\x27\x4a\x7b\x14\x65\x12\x18\xfa\x16\x6f\xf7\xfe\x13\x00\x00\xff\xff\x01\x38\xa8\x57\x4a\x12\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 4682, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x85, 0x12, 0x77, 0x10, 0x2, 0x9b, 0xde, 0xec, 0x59, 0x54, 0xa2, 0x7, 0x25, 0x54, 0xdb, 0xa2, 0x5e, 0xcf, 0xb1, 0x67, 0xdf, 0xa9, 0xac, 0xf9, 0x5d, 0x61, 0xef, 0x69, 0xaa, 0x9d, 0xdf}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xb1\x4a\x04\x41\x0c\x86\xfb\x79\x8a\xbc\xc0\xae\xd8\x1d\xd3\xa9\x85\xfd\x09\xf6\xb9\x99\x9c\x1b\x77\x27\x19\x92\xcc\x16\x3e\xbd\x2c\x8a\x08\xe2\xb5\x81\x7c\xdf\xff\xad\x2c\x35\xc3\xd3\x36\x3c\xc8\xce\xba\xd1\x23\x4b\x65\x79\x4b\xd8\xf9\x95\xcc\x59\x25\x83\x5d\xb0\xcc\x38\x62\x51\xe3\x0f\x0c\x56\x99\xd7\x93\xcf\xac\x77\xfb\x7d\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xaa\xf8\xd4\x54\x38\xd4\x0e\x92\x8f\xcb\x3b\x95\xf0\x9c\x26\xf8\xd2\xbd\x90\xed\x5c\xe8\xa1\x14\x1d\x12\x3f\x7f\xdd\xb4\x51\x2c\x34\x7c\x5a\x4f\xfe\x7d\xf6\x8e\x85\x32\x68\x27\xf1\x85\xaf\xf1\x9b\x6c\xba\xd1\x99\xae\x87\xf9\x4f\xc7\x7f\x6b\x00\xb0\xf3\xb3\xe9\xe8\x37\xba\xd2\x67\x00\x00\x00\xff\xff\x5b\x52\x00\xaa\x17\x01\x00\x00")

func assetsDnsMetricsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleBindingYaml,
		"assets/dns/metrics/cluster-role-binding.yaml",
	)
}

func assetsDnsMetricsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role-binding.yaml", size: 279, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0x95, 0x6f, 0xa4, 0xd5, 0xed, 0x48, 0x27, 0x41, 0x56, 0x5c, 0xea, 0x5c, 0x89, 0xdc, 0xc1, 0x44, 0x91, 0xd4, 0xb, 0x18, 0x85, 0x79, 0x75, 0xaa, 0x6e, 0xb5, 0x98, 0xbe, 0xc6, 0x33, 0x43}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcd\x31\x4b\x34\x41\x0c\x87\xf1\x7e\x3e\x45\xe0\xad\x77\x5f\xec\x64\x5a\x05\x3b\x0b\x05\xfb\xec\xce\xdf\xdb\x70\x3b\xc9\x90\x64\x0e\xf4\xd3\x8b\x70\xb6\x0f\x3f\x78\xfe\xd1\xd3\x39\x23\xe1\xe4\x76\x22\x48\x81\x86\x46\xdb\x17\x0d\xb7\x8e\x3c\x30\x83\xd2\x28\x76\xe7\x01\x7a\x7e\x7d\xa7\x8e\x74\xd9\x83\xa0\x6d\x98\x68\x16\x1e\xf2\x01\x0f\x31\xad\xe4\x1b\xef\x2b\xcf\x3c\xcc\xe5\x9b\x53\x4c\xd7\xeb\x63\xac\x62\xff\x6f\x0f\xe5\x2a\xda\xea\xdf\xf0\xcd\x4e\x94\x8e\xe4\xc6\xc9\xb5\x10\x29\x77\x54\x6a\x1a\x4b\x37\x95\x34\x17\xbd\x14\x9f\x27\xa2\x96\x85\x78\xc8\x8b\xdb\x1c\xf1\x4b\x17\xb2\x01\xe7\x34\x5f\x6d\x40\xe3\x90\xcf\x5c\xc5\x0a\x91\x23\x6c\xfa\x8e\x3b\x6b\x1a\x88\x42\x74\x83\x6f\xf7\x74\x41\x96\x9f\x00\x00\x00\xff\xff\x9f\xa8\x4d\x6c\xf6\x00\x00\x00")

func assetsDnsMetricsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleYaml,
		"assets/dns/metrics/cluster-role.yaml",
	)
}

func assetsDnsMetricsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role.yaml", size: 246, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xdb, 0xe0, 0x95, 0x65, 0xae, 0x53, 0x96, 0x3a, 0x5f, 0x5e, 0x8b, 0x69, 0xe2, 0x7d, 0x5, 0xbf, 0x1f, 0x3a, 0xf, 0xff, 0xd0, 0x6b, 0x23, 0x4f, 0xfd, 0x11, 0x7f, 0x57, 0xd4, 0x4a, 0x8b}}
	return a, nil
}

var _assetsDnsMetricsRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\xb1\x4e\xc4\x40\x0c\x04\xd0\x7e\xbf\xc2\x3f\x90\x20\xba\xd3\x76\xd0\xd0\x1f\x12\xbd\x6f\xd7\x97\x98\x64\xed\x95\xed\x4d\xc1\xd7\x23\xa4\x48\x54\x20\x5d\x3b\x9a\xd1\x1b\xec\xfc\x41\xe6\xac\x92\xc1\x6e\x58\x66\x1c\xb1\xaa\xf1\x17\x06\xab\xcc\xdb\xc5\x67\xd6\xa7\xe3\x39\x6d\x2c\x35\xc3\x55\x77\x7a\x65\xa9\x2c\x4b\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xba\x69\xa3\x58\x69\xf8\xb4\x5d\xfc\x8c\xbd\x63\xa1\x0c\xda\x49\x7c\xe5\x7b\x4c\x55\x3c\x99\xee\x74\xa5\xfb\xcf\x14\x3b\xbf\x99\x8e\xfe\x8f\x9f\x00\x7e\xf9\xbf\x34\x1f\xb7\x4f\x2a\xe1\x39\x4d\x67\xfb\x9d\xec\xe0\x42\x2f\xa5\xe8\x90\x78\xf0\x65\x53\xe1\x50\x63\x59\x20\x7d\x07\x00\x00\xff\xff\xb9\xd9\xab\x8d\x25\x01\x00\x00")

func assetsDnsMetricsRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleBindingYaml,
		"assets/dns/metrics/role-binding.yaml",
	)
}

func assetsDnsMetricsRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role-binding.yaml", size: 293, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x7d, 0xc7, 0x45, 0x33, 0xc4, 0xd8, 0xf, 0x8d, 0x89, 0x8d, 0x6, 0x47, 0xa7, 0xa, 0x6b, 0x17, 0xf5, 0x5f, 0x5a, 0x2f, 0xd8, 0xf9, 0x6, 0x71, 0xaa, 0x78, 0x8d, 0xb5, 0x7a, 0xf6, 0x99}}
	return a, nil
}

var _assetsDnsMetricsRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x4e\xec\x40\x0c\x45\xfb\xf9\x0a\x6b\x5f\x9d\x7d\xa2\x5b\x4d\x8d\x44\x47\x01\x12\xbd\x77\xe6\x42\xac\x24\xe3\x91\xed\x04\xc1\xd7\xa3\xcd\x06\x89\xca\xf7\x1e\x59\x3e\xfe\x47\x2f\x3a\xc3\xa9\x01\x15\x95\xae\x5f\xd4\x4d\x17\xc4\x88\xd5\x29\x94\xbc\x18\x77\xd0\xe3\xf3\x2b\x2d\x08\x93\xe2\x84\x56\xbb\x4a\x8b\xc4\x5d\xde\x60\x2e\xda\x32\xd9\x95\xcb\x99\xd7\x18\xd5\xe4\x9b\x43\xb4\x9d\xa7\x8b\x9f\x45\xff\x6f\x0f\x69\x92\x56\xf3\x2e\x4a\x0b\x82\x2b\x07\xe7\x44\xd4\x78\x41\xfe\xe3\x1b\xa6\x8b\x1f\xd8\x3b\x17\x64\xd2\x8e\xe6\xa3\xbc\xc7\x50\x9b\x27\x5b\x67\x78\x4e\x03\x71\x97\x27\xd3\xb5\xfb\xed\xca\x40\xa7\x53\x22\x32\xb8\xae\x56\x70\x30\x87\x6d\x52\xe0\x7b\xf9\xfd\xf8\xde\xba\xd6\x5b\xd8\x60\xd7\x63\xf9\x03\xb1\xcf\x59\xfc\x1e\x3e\x39\xca\x98\x7e\x02\x00\x00\xff\xff\x29\x39\xda\x05\x1c\x01\x00\x00")

func assetsDnsMetricsRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleYaml,
		"assets/dns/metrics/role.yaml",
	)
}

func assetsDnsMetricsRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role.yaml", size: 284, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xf2, 0x4e, 0x40, 0x91, 0xd8, 0x5e, 0x1c, 0x98, 0xb6, 0x2f, 0x11, 0x2a, 0x15, 0x8f, 0xe4, 0x7c, 0xfe, 0xc6, 0x31, 0xf3, 0xb2, 0xa0, 0x38, 0xb2, 0x3f, 0x15, 0x5a, 0x33, 0x12, 0xd2, 0x88}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcd\x4e\xc4\x30\x0c\x84\xef\x79\x8a\x51\x38\x2f\x3f\xd7\xbc\x03\x5c\x90\xb8\xbb\x8d\x97\x35\x4d\xed\x2a\x76\xcb\xeb\xa3\xb2\x15\xac\xb4\xc7\x68\x46\xf3\x7d\xf1\x24\x5a\x0b\xde\x68\x66\x5f\x68\xe4\x44\x8b\x7c\x70\x77\x31\x2d\xd8\x5e\xd2\xcc\x41\x95\x82\x4a\x02\x48\xd5\x82\x42\x4c\x7d\x7f\x02\xb6\xb0\xfa\x45\xce\xf1\x28\xf6\xa4\x56\xf9\xe4\xdc\x78\x0c\xeb\x05\x39\x27\x40\x69\xe6\xf2\x5f\x3b\x55\xf5\x04\x34\x1a\xb8\x1d\x13\x0f\x70\x0e\x6c\xd4\x56\x46\x18\x68\x33\xa9\xa8\xbc\xb0\x56\xd1\x4f\x98\x62\x5a\x07\x06\xd5\x59\x7c\x97\x42\x5c\x28\x8e\x82\xef\xf1\xdf\x38\x68\x11\xbf\xd7\xea\xab\x9e\x1a\x6f\xdc\x0a\xf2\x73\x3e\x98\xd4\x9a\x7d\xdf\x78\xcd\xa6\x12\xd6\x77\x62\x18\x9a\xd9\x84\xb3\x75\xbc\x73\xdf\x64\xe4\xd7\x6b\x0a\x1b\xbe\x78\x0c\x87\xec\x16\xe2\xbf\xbf\xbb\x1e\xed\x8e\x3a\xb6\xd5\x83\xfb\xcd\x70\x41\x8e\xbe\x72\x4e\x3f\x01\x00\x00\xff\xff\x82\x6d\x29\x03\x71\x01\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 369, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0xab, 0x50, 0x84, 0x61, 0x5f, 0x41, 0xf4, 0x17, 0x3b, 0x6, 0x84, 0xc0, 0x5f, 0x4f, 0xbb, 0xd8, 0x1d, 0xae, 0x26, 0x3e, 0x1f, 0x29, 0x2c, 0x84, 0x6d, 0x5e, 0xc1, 0x87, 0x97, 0x5f, 0xc9}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x09\xc4\x30\x0c\x05\xd0\xde\x53\x68\x81\x2b\xae\x55\x77\x33\x1c\xa4\x17\xf2\x0f\x11\xc1\xb2\xb1\x14\xcf\x1f\x02\xe9\x1e\xbc\xd3\xbc\x32\xfd\x31\x97\x29\x7e\xaa\xfd\xf2\x2c\x32\x6c\xc3\x0c\xeb\xce\xb4\xbe\xa5\x21\xa5\x4a\x0a\x17\x22\x97\x06\xa6\xea\xf1\x3a\x86\x28\x98\xfa\x80\xc7\x61\x7b\x7e\x9e\xba\x03\x00\x00\xff\xff\x8e\x2c\xf1\x2e\x55\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 85, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x12, 0x50, 0x4d, 0x67, 0x2f, 0x1b, 0x74, 0xa0, 0xa4, 0xbb, 0xa7, 0x59, 0xe9, 0x5a, 0xc6, 0xc1, 0x1a, 0xf8, 0x5f, 0xff, 0x5, 0xdb, 0xc, 0x10, 0x8b, 0xc1, 0x0, 0xcc, 0xf, 0x9f, 0x3a}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xce\x3d\x4b\x04\x31\x10\xc6\xf1\x3e\x9f\xe2\x81\x6b\x3d\xe1\x10\x0b\xd3\x6a\x63\xb7\xe0\x4b\x3f\x97\x1d\x8e\xe0\xe4\x85\x99\xd9\x13\xbf\xbd\x18\xe1\xdc\x15\xc1\x26\x90\xe4\xcf\x8f\xe7\x2d\xd7\x39\xe2\x89\xf5\x9c\x13\x07\xea\xf9\x95\xd5\x72\xab\x11\xe7\x43\xd8\xa1\x52\xe1\xab\x71\x5a\xa7\xc4\xa0\x3a\x43\xe8\xc8\x62\x20\x65\x18\x3b\xc8\xa1\x4b\xf5\x5c\x38\x58\xe7\x14\x03\xb0\x43\x92\xc5\x9c\xf5\x71\xc2\x7b\x16\xc1\x91\x41\x8b\xb7\x42\x9e\x13\x89\x7c\xa0\x50\xa5\x13\xcf\xd7\x23\x36\x16\x4e\xde\x14\xd9\x7e\x8b\x40\x6f\xea\xf6\x85\xee\xc7\x8c\x88\xb9\x5a\x00\xbe\x3f\x22\x6e\x6f\xc6\xc5\x49\x4f\xec\xd3\x78\xba\x04\xda\xbc\xa5\x26\x11\x2f\x0f\xd3\x16\xd8\x7b\xea\xff\x22\x3f\xd1\x05\x7a\xbe\x5f\x43\x85\x5d\x73\x5a\xaf\xb9\x3b\xfc\x41\x6d\xb2\x0d\xf5\x19\x00\x00\xff\xff\xc5\xcb\x88\xa8\x7d\x01\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 381, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0x6d, 0x77, 0x15, 0x61, 0x5f, 0x22, 0x3d, 0xd7, 0x33, 0xf2, 0xcf, 0xe0, 0xbd, 0x5d, 0xc6, 0xf1, 0x17, 0x84, 0xff, 0x81, 0xdb, 0x33, 0xd0, 0x30, 0x3b, 0xe3, 0x8e, 0x8e, 0x39, 0x8d, 0x48}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/configmap.yaml": assetsDnsConfigmapYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/metrics/cluster-role-binding.yaml": assetsDnsMetricsClusterRoleBindingYaml,

	"assets/dns/metrics/cluster-role.yaml": assetsDnsMetricsClusterRoleYaml,

	"assets/dns/metrics/role-binding.yaml": assetsDnsMetricsRoleBindingYaml,

	"assets/dns/metrics/role.yaml": assetsDnsMetricsRoleYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"configmap.yaml":            {assetsDnsConfigmapYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"metrics": {nil, map[string]*bintree{
				"cluster-role-binding.yaml": {assetsDnsMetricsClusterRoleBindingYaml, map[string]*bintree{}},
				"cluster-role.yaml":         {assetsDnsMetricsClusterRoleYaml, map[string]*bintree{}},
				"role-binding.yaml":         {assetsDnsMetricsRoleBindingYaml, map[string]*bintree{}},
				"role.yaml":                 {assetsDnsMetricsRoleYaml, map[string]*bintree{}},
			}},
			"namespace.yaml":       {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml": {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":         {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
