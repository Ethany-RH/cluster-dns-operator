// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster-dns-cr.yaml (373B)
// assets/dns/cluster-role-binding.yaml (223B)
// assets/dns/cluster-role.yaml (210B)
// assets/dns/configmap.yaml (414B)
// assets/dns/daemonset.yaml (4.153kB)
// assets/dns/namespace.yaml (189B)
// assets/dns/service-account.yaml (85B)
// assets/dns/service.yaml (359B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsClusterDnsCrYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\xc5\x48\x57\x5f\xd0\xb5\x69\x39\x8a\x6b\x10\x12\x12\xfd\x62\x6f\x2e\x0b\xce\xda\xf2\xae\x4f\x82\xaf\x47\x09\xa1\x01\x4a\x5b\x7a\x33\x6f\xf6\x80\x8b\x9a\x53\xce\xdc\x10\x8b\x4e\x72\x85\x55\x8e\x32\x49\xc4\x8d\x72\x67\x03\x35\x06\xd5\x9a\x85\x13\xc8\xd1\xba\xba\x2c\x3c\x04\xaa\xf2\xc2\xcd\xa4\xe8\x88\xa4\x36\x94\xca\x6a\xb3\x4c\x3e\x48\xb9\xbb\x9d\x28\xd7\x99\x4e\xe1\x5d\x34\x8d\xb8\xcf\xdd\x9c\xdb\xf9\xf1\x39\x2c\xec\x94\xc8\x69\x0c\x80\xd2\xc2\x23\x12\x4f\xd4\xb3\x07\xe0\x80\x07\xb5\xde\x18\x3e\x93\xa3\x68\xfe\x80\xcf\x8c\x52\xb9\x91\x97\x86\x48\x8a\xc4\x99\x9d\xb7\xff\x1d\x44\xfc\x4e\x5f\x2d\x50\x5e\xdf\x38\xfa\x10\x80\x49\x94\xb2\x7c\x72\xb3\xb5\xea\xf8\xd7\x71\xc7\x8f\x3b\x7e\x4c\x6a\x61\x1d\x3f\x6e\x26\xbb\xf2\xe5\x09\x62\xff\xec\x47\x37\xd1\xeb\xa6\x21\xbf\x2e\xb8\x96\xef\x99\xe7\xb2\x90\xe8\xf8\xf3\x1c\x72\x89\x94\xc3\x57\x00\x00\x00\xff\xff\xb3\xc6\xf2\x3f\x75\x01\x00\x00")

func assetsClusterDnsCrYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsClusterDnsCrYaml,
		"assets/cluster-dns-cr.yaml",
	)
}

func assetsClusterDnsCrYaml() (*asset, error) {
	bytes, err := assetsClusterDnsCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cluster-dns-cr.yaml", size: 373, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xeb, 0xba, 0x74, 0xf, 0xb3, 0xa7, 0x74, 0x80, 0x8, 0xba, 0xf, 0xb5, 0x3c, 0xaa, 0x52, 0x5f, 0xd4, 0x5f, 0x7c, 0x95, 0x4a, 0x53, 0x4b, 0x3c, 0xe1, 0xd9, 0x54, 0xcd, 0x57, 0x5e, 0xc8}}
	return a, nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x8e\x83\x40\x0c\x05\xd0\x7e\x4e\xe1\x0b\xc0\x6a\xbb\xd5\x74\x9b\xdc\x80\x48\xe9\xcd\x8c\x09\x0e\x60\xa3\xb1\x87\x22\xa7\x8f\x10\x4a\x45\x3a\x17\xfe\xff\xfd\x89\x25\x47\xb8\xce\xd5\x9c\x4a\xa7\x33\x5d\x58\x32\xcb\x23\xe0\xca\x77\x2a\xc6\x2a\x11\x4a\x8f\xa9\xc5\xea\xa3\x16\x7e\xa1\xb3\x4a\x3b\xfd\x59\xcb\xfa\xb3\xfd\x86\x85\x1c\x33\x3a\xc6\x00\x00\x20\xb8\x50\x04\x5d\x49\x6c\xe4\xc1\x9b\x2c\x16\xac\xf6\x4f\x4a\x6e\x31\x34\x70\x78\x37\x2a\x1b\x27\xfa\x4f\x49\xab\x78\xf8\xc4\xf6\xe7\xe3\xb6\x15\xd3\xa9\xa7\xe8\x4c\x1d\x0d\x3b\x74\x9a\x1d\xbe\xd3\xef\x00\x00\x00\xff\xff\xfa\x62\xe7\x50\xdf\x00\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xf6, 0x2a, 0x3b, 0x84, 0xd7, 0x3e, 0xc4, 0xe1, 0x70, 0x66, 0x31, 0xda, 0xc4, 0x2f, 0x53, 0x27, 0x29, 0x13, 0xfe, 0x80, 0x36, 0xc5, 0xa1, 0x70, 0xdc, 0x2d, 0xef, 0xcf, 0xe0, 0xc4, 0xeb}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\xbd\x6e\xc5\x30\x08\x46\x77\x3f\x05\xba\x7b\x52\x75\xab\xbc\x76\xe8\xde\xa1\x3b\xd7\xa6\x0a\x8a\x03\x16\xe0\x54\xea\xd3\x5f\xe5\x67\x3b\xe7\x08\xf4\xad\x2c\x35\xc3\x67\x1b\x1e\x64\xdf\xda\x28\x61\xe7\x1f\x32\x67\x95\x0c\xf6\xc4\x32\xe3\x88\x45\x8d\xff\x31\x58\x65\x5e\x3f\x7c\x66\x7d\xdb\xdf\xd3\x46\x81\x15\x03\x73\x02\x10\xdc\x28\x83\x76\x12\x5f\xf8\x37\xa6\x2a\x9e\x6c\x34\xf2\x9c\x26\xc0\xce\x5f\xa6\xa3\xfb\x71\x39\xc1\xe3\x91\x00\x8c\x5c\x87\x15\xba\x1b\x49\xed\xca\x12\x7e\x9a\x93\xed\x5c\xe8\x92\xae\xf5\x82\x63\xc3\x3b\x5e\x7d\x27\x7b\xde\xbf\x8d\x3d\x4e\xf8\xc3\x28\x4b\x7a\x05\x00\x00\xff\xff\xcb\xdd\xd7\x2a\xd2\x00\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 210, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xb2, 0x0, 0x7d, 0x4a, 0xd9, 0xf, 0x8, 0x44, 0xe7, 0xab, 0x82, 0xe4, 0x50, 0x94, 0xaa, 0x4e, 0xfd, 0xa0, 0x63, 0xba, 0x18, 0xcf, 0xeb, 0xa6, 0xe4, 0x2d, 0x4, 0x35, 0xd5, 0xc7, 0xd}}
	return a, nil
}

var _assetsDnsConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\xbd\x4e\x2b\x31\x10\x85\xfb\x7d\x8a\x23\xdd\x3a\x9b\x1b\xad\x82\x84\xdb\xd4\x50\xd2\x0f\xf6\x6c\x6c\xc5\x6b\x5b\x33\xe3\x08\x04\xbc\x3b\x0a\x11\x0b\x91\x98\xea\xfc\xcd\x77\x4a\x25\x38\x1c\x6a\x99\xd3\xf1\x81\xda\x40\x2d\x3d\xb1\x68\xaa\xc5\xe1\xbc\x1b\x16\x36\x0a\x64\xe4\x06\xe0\x1f\x1e\x69\x61\x24\x85\xb2\x81\x0c\xd2\x8b\xa5\x85\x07\xa0\xd0\xc2\xda\xc8\xb3\x43\x6d\x5c\x34\xa6\xd9\x36\xa1\xe8\xf0\xfd\x7b\xa8\xc2\x73\xca\xec\xf0\x3e\x00\xc0\xe8\xf6\xd3\x7e\xc2\xdb\x97\xb9\x1c\x8b\x54\xd1\xd5\x46\xa6\x6c\x71\xb5\xa7\xfe\xcc\x52\xd8\x58\xe1\x73\x57\x63\x19\x73\xf5\x94\x91\xca\x86\x42\x90\x91\xa4\x11\x52\xbb\xbb\x8a\x1f\xec\xe5\x5a\x0d\x8a\x54\x94\x7d\x17\xbe\x69\x7a\x53\x13\xa6\xe5\x26\x9c\x29\x67\x8b\x52\xfb\x31\xfe\x8d\x5f\xd7\x1f\xab\x6a\x52\x17\xb6\xc8\x5d\xe1\xee\x77\xfb\xe9\x77\xf1\xf2\x8a\x11\x5b\x36\xbf\x15\xd6\x9a\xcf\xa3\xaf\x65\x5e\x07\x9e\x7c\x64\x4c\xff\xd7\x40\x38\x57\x0a\xc3\x95\xff\x19\x00\x00\xff\xff\x9d\x46\xa5\xbd\x9e\x01\x00\x00")

func assetsDnsConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsConfigmapYaml,
		"assets/dns/configmap.yaml",
	)
}

func assetsDnsConfigmapYaml() (*asset, error) {
	bytes, err := assetsDnsConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/configmap.yaml", size: 414, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0x1, 0xd4, 0x58, 0x84, 0x9f, 0xd5, 0x7c, 0x6e, 0x3d, 0xae, 0xb7, 0x68, 0x6d, 0x82, 0x4e, 0x8d, 0x2c, 0x2e, 0x47, 0x59, 0xd1, 0x1, 0x2b, 0xaa, 0xfc, 0xbc, 0x7a, 0xa1, 0x89, 0x1e, 0x47}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdf\x6f\xdb\x38\x12\x7e\xf7\x5f\xf1\xad\x1c\x6c\x77\x71\x55\xd3\x62\xd1\xc3\x9e\xda\xec\x6d\x2e\x71\xae\xc1\x35\x89\x11\xbb\x7b\x0f\x41\x50\x30\xd4\xc8\x22\x4a\x91\x3c\x92\x52\x6a\xa4\xf9\xdf\x0f\x94\x22\x9b\xb2\xdc\x2c\x0e\x38\xbd\x24\xe6\xcc\x7c\x9c\x5f\xdf\x68\xf4\x45\xa8\x3c\xc3\x29\xa3\x4a\xab\x05\xf9\x09\x33\xe2\x0f\xb2\x4e\x68\x95\x81\x19\xe3\x0e\x9b\x37\x93\x8a\x3c\xcb\x99\x67\xd9\x04\x98\xe2\x92\x55\x04\xe1\xe0\xc8\x83\x79\xd8\x5a\x79\x51\xd1\x04\x50\xac\x22\x67\x18\xa7\x0c\xda\x90\x72\xa5\x28\x7c\x9a\x2b\x37\x01\x24\xbb\x23\xe9\x82\x3d\x22\x19\x33\x26\x43\x50\x70\x86\x78\x10\x3a\x92\xc4\xbd\xb6\x9d\x62\xc5\x3c\x2f\x3f\x46\x96\x7b\x6d\x01\x4f\x95\x91\xcc\xd3\x93\x55\xe4\x6c\x78\xe4\x00\xe0\x3b\x10\x40\xef\x42\xfb\x3f\xd9\x46\x70\x3a\xe6\x5c\xd7\xca\x87\x78\xb7\x7a\x80\xb1\x42\x5b\xe1\xd7\x27\x92\x39\xd7\x09\xdd\xda\x79\xaa\x52\xa5\x73\x4a\xb9\x15\x5e\x70\x26\x9f\xb4\xb9\x56\x9e\x09\x45\x76\xe3\x42\xda\x26\x2a\x46\x0c\x59\x15\x15\x5b\xed\x4f\x6b\xf7\xb4\xf2\x79\x2d\xe5\x5c\x4b\xc1\xd7\x19\xce\x8b\x4b\xed\xe7\x96\x1c\x29\xbf\xd1\xe2\xba\xaa\x58\x28\xe8\x0d\x12\xae\x2d\xe5\xca\x25\xb8\xdd\x88\x99\x5d\xb9\x56\x96\x72\xad\x8a\xe4\x25\x92\x43\xf2\xfc\xf0\x49\xf3\xf0\x44\x5b\x2a\x84\xa4\xd8\xa4\xd1\xb2\xae\xe8\x22\x24\x22\x4a\x62\x1f\x43\x80\x11\xab\xb4\x53\xda\x48\x81\x2a\xe8\xcf\x99\x2f\x33\xc4\x37\x44\x1a\x96\x58\x7e\xa5\xe4\x3a\x83\xb7\xf5\xd6\xd4\x68\x3b\xbc\x67\x93\xbf\xb9\xb6\x3e\xc3\xdb\x5f\xde\xfe\x12\xa1\x8c\x33\x19\xea\xa3\xbd\xe6\x5a\x66\xf8\x74\x3a\xff\xdf\x91\x52\xcf\xcd\x5e\xb4\xe5\xc9\x33\x68\x7f\x7b\xb3\x07\xad\x22\x6f\x05\xdf\xef\x5b\x8c\x26\x45\x43\x8a\x9c\x9b\x5b\x7d\x47\x59\xa4\x5e\x7a\x6f\xfe\x49\x3e\x3e\x02\x4c\x97\xd6\x92\x98\xf4\xe5\x50\xd2\xba\xf2\xeb\xeb\x5f\x5f\x0f\x8e\x1d\x2f\x29\xb8\xf3\x61\xb9\x9c\x47\x02\xa1\x84\x17\x4c\x9e\x92\x64\xeb\x05\x71\xad\x72\x97\xe1\xaf\xb1\x69\x68\x40\x5d\xfb\x8d\xf0\x6d\x24\x73\x35\xe7\xe4\xdc\xb2\xb4\xe4\x4a\x2d\xf3\x0c\x6f\x22\x69\xc1\x84\xac\x2d\x45\xd2\xb7\xe3\xee\xef\xf8\x62\xc9\x69\xd9\x90\xfd\xbf\x73\xc1\x11\xaf\x5b\x9e\x6a\xe5\xe9\xeb\x20\x89\xc6\x8a\x46\x48\x5a\x51\xbe\xd3\x7e\xcf\x77\x7b\xa9\x9d\x77\x69\x60\xc8\x33\xad\xde\x2a\x45\xc1\x90\x6a\x70\x79\x7c\x31\x5b\xcc\xae\xff\x98\x5d\x83\xa9\x1c\x27\x1f\x3f\x2d\x96\xb3\xeb\xcf\xa7\x57\x17\xc7\xe7\x97\x60\x96\xbe\x17\x29\xa9\x66\xec\x46\x40\x3a\x3f\x99\x2d\x22\x27\xa6\x38\x09\xcc\x87\xb6\x68\x27\x30\x1c\x19\x66\x99\xa7\x1c\x52\x38\x0f\x5d\xf4\x43\xcd\x0d\xac\x2e\xaf\x96\xb3\x0c\x67\xda\x42\xe9\xfb\x97\x20\xe5\x6a\x4b\xf0\x25\x39\x6a\xdd\xb2\x24\x99\x17\x0d\x75\xb3\xfd\x1d\x0a\x6d\x41\x8c\x97\x43\xc1\xcb\x01\x26\x53\x60\x52\x30\x87\x7b\xe1\xcb\x80\xb5\x1b\xaf\xab\x8b\x42\x7c\xc5\xbd\x90\x12\x4c\x3a\x8d\x3b\x02\xcb\x73\xca\x5f\x45\x38\x0d\x93\x35\x65\x48\xda\x5a\xa7\x96\x56\xc2\x79\xbb\x7e\xb5\x9d\xde\x3b\x02\xd7\xf0\x64\x34\x06\xa3\xd4\x1d\xde\x09\x75\x78\xc7\x5c\x19\x9d\xa5\x3c\xfa\xf1\x2d\x0e\xe2\x87\xb1\x3a\xda\x1a\xa5\xb5\x86\x11\x86\x42\x83\x4f\x22\xd9\xd5\x7c\x76\xb9\xf8\x70\x7e\xb6\xfc\x7c\x71\x7c\xfd\xaf\xd9\xf5\x51\xb2\xf5\x74\x45\x8a\xda\x5a\x0c\x1b\x3e\x89\xcc\x3f\x5c\x2d\x96\x8b\xcf\x67\xe7\x1f\x67\x47\xc9\xb6\x8b\x62\x8d\xe5\xec\x62\x3e\x52\x78\xe5\x2b\x93\xc4\x6e\x9c\x9f\x2d\x8e\x5e\xbc\xc4\x8b\x76\xbc\x22\xb5\x48\xd9\xa6\xf0\x78\xff\xfe\x3d\x92\x83\x87\xbe\x7d\x1e\x07\x96\x53\x5c\xb0\x2f\x04\xd6\xbe\x4d\xb5\x65\x76\x8d\xd0\xe8\xdb\x22\x6a\x99\x77\x04\x68\xcf\x5f\x38\x30\xef\xad\xb8\xab\x3d\xb9\xb8\x6e\xdc\x20\x2d\x90\xa6\x5b\x69\xaa\x95\x5c\x87\x8b\xb7\x41\x3e\x26\xe1\xf7\x26\xa4\xa1\x27\xf7\x65\xb8\x37\xd0\xf2\x1d\x72\x3d\x98\x64\x39\x71\x19\xda\x32\x3d\x86\x6b\xf8\x67\x61\xdc\x40\x1c\xba\xd3\x35\x1c\x42\x05\xf8\x3e\xee\x9b\xdf\x6f\x1f\x93\x11\x54\x88\xf8\x8c\x3c\x2f\xfb\xfc\xe0\x7c\x8e\xc2\xea\x0a\x5c\xd6\xce\x93\x0d\x13\x0a\xa2\x80\xd9\x19\x2b\xdd\x23\x8c\x3b\xfa\xe9\xe0\xa7\x5c\xac\xf0\x7b\x72\xf0\xb0\x25\xf8\x63\x82\xbf\xb8\x52\x5b\xdf\xba\xd0\xf0\xc7\x57\x07\x0f\xc3\xfe\x7f\x4c\x7e\xfe\x79\xb2\x0b\x57\xe0\xe6\x06\xc9\xc1\xdf\x13\xa4\xf4\x1f\xbc\xc6\x8f\x3f\x06\xfb\xa9\x30\x9d\xfb\x48\x15\xe1\x35\x6e\x6f\xdf\x85\x5a\xa8\x1d\x6b\xf4\xd9\xb8\x79\xba\x33\xb9\x3d\x4a\x0e\x1e\x7a\xe3\x1d\xed\x42\x0c\x73\xaa\x15\x0d\xdd\x99\xe2\x93\xc9\x99\xa7\x68\x9e\xa1\xad\xa1\x28\x70\x4f\x58\x91\x0f\xec\x14\x79\x94\x39\xb7\x03\xf0\x6f\xea\xe8\xad\xb4\x47\x3d\x02\xbb\x2f\x49\x85\x38\x6c\x3b\xe4\x9f\x76\x83\x0d\x9a\xae\x7d\x18\xff\xda\x82\x19\x81\x5a\xb1\x86\x09\xc9\xee\x84\x14\x7e\xbd\x73\xcd\xc2\x33\x49\x20\xe5\xad\xa0\x00\x54\xcb\x1c\xf4\x35\x0c\x3c\xa1\xe2\x0b\x45\xd1\xb6\x70\x7f\x83\x70\xc8\x49\x92\xa7\x7c\xb2\xaf\x08\x0f\xd3\x3e\x9d\x7f\x9e\xfa\x29\xfe\x51\x0b\x99\x83\x41\xd1\x7d\xc4\x8f\xae\x95\xe2\x98\x03\x8f\x74\x6d\xc1\x6b\xe7\x75\xb5\x71\xba\x10\xd2\x93\xa5\x3c\x84\xbd\x83\xbd\xb2\x64\x90\x36\x48\xa6\x38\x78\xd8\x1d\x30\x1d\x85\x06\x94\xfa\xed\x19\x52\x75\xbe\x1e\x1b\x43\x2a\x47\x3f\x81\xb6\x4e\x04\xe2\x8c\xdf\x0f\x18\x71\xea\x87\x38\x33\x7b\x38\xd5\xe9\x0b\x13\xd4\xdb\x56\x6c\x95\xbb\xa6\xbc\x7d\xdc\x6b\x00\x10\x2f\x35\xda\x7e\x7d\xec\x8c\xfa\x3f\x63\xea\xe0\x3b\xa9\xf8\x6d\x14\xfb\xee\x25\x6d\x9b\xef\x39\x1a\xe5\x68\x79\x75\x7a\x95\xed\x61\x00\xf3\xba\x0a\x7b\xbd\x5c\xc3\x6b\xb0\x46\x8b\x1c\x4c\xad\x21\x14\xd7\xca\x09\xe7\x49\x79\xdc\x51\xc9\x1a\xa1\xed\x08\xf5\x9a\x8c\x0c\xef\xe5\x7d\x1d\x51\xe9\x5c\x14\x82\x72\x34\xdd\x87\x57\x68\x44\x45\x94\xef\xb4\x27\xc0\x2b\xb3\x13\xe6\xa8\x07\xbe\x7d\x7b\x9a\xc0\xcf\xeb\x8d\xa3\xee\x75\x03\x39\x02\x6b\x2d\x55\xba\xa1\x7c\x1b\x6b\xdb\xd5\xdc\x12\xf3\x74\xd8\xb1\xa7\xdd\x65\xb6\x73\x1e\x5c\x9b\x35\x78\x59\xdb\x21\x49\x76\xe6\x8d\x93\x44\x66\xb8\x67\x02\xb5\x0a\x2f\xd7\xf1\x4c\x8f\xaa\x96\x2b\xd7\xaf\x7b\xa7\x54\xb0\x5a\xf6\x74\xe9\x76\xb6\xed\xba\xf6\x27\xdf\x26\xdd\xf1\x05\x33\xd1\x42\xf8\xcc\x47\xed\xe6\x11\x9e\x2a\x37\xd8\xc4\x53\x7c\xa1\x75\x86\xfe\xab\x69\x98\xd3\x6e\x4b\xdf\x95\x3d\xb7\x49\x86\xb3\x76\x8f\x9c\x8c\x60\xf6\x2c\x96\x61\x3d\x5f\x1b\xca\x70\xb6\x05\xf1\x5a\x86\x45\x43\x68\xb5\x71\x74\xda\x1f\x12\x98\x94\x08\x9f\x2c\xde\xc1\x69\xf8\x92\x79\x9c\x5e\x2e\x42\xd0\x4c\xde\xb3\xb5\xeb\xdf\x74\xd0\xaa\xd5\x0d\xcb\x8a\xdb\x6c\xed\xda\x04\x14\x6d\x33\xcc\xc2\x80\x75\x93\xff\x06\x00\x00\xff\xff\x25\x4a\xbc\x38\x39\x10\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 4153, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x96, 0xf2, 0xb, 0xef, 0x50, 0x92, 0x65, 0x5b, 0x5a, 0x19, 0x2a, 0xd1, 0xb2, 0xc0, 0x94, 0xe8, 0xc4, 0x5e, 0x0, 0x90, 0x40, 0xed, 0xcb, 0xc9, 0x4, 0x11, 0x5d, 0x31, 0x1e, 0xf3, 0x43, 0xa9}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x3b\x8e\xc3\x30\x0c\x44\x7b\x9d\x62\xe0\xad\xbd\x9f\x56\x87\xd8\x32\x3d\x1d\x4d\x62\xc2\x12\x25\x98\xb2\xce\x1f\x38\x08\xdc\xce\x1b\xbc\xb7\xa9\xa5\x88\x7f\x29\xf4\x26\x77\x06\x69\x7a\xe3\xee\x5a\x2d\x62\xfc\x85\xc2\x2e\x49\xba\xc4\x00\x98\x14\x46\xd4\x46\xf3\x55\x1f\x7d\x4e\xe6\x01\xc8\xb2\x30\xfb\xc9\x81\x2f\x38\x3b\x86\xe4\x83\xe8\x15\x32\xaa\x26\x24\x36\x5a\x52\x7b\xa2\x1a\xb6\x63\x21\x24\x15\xf5\x33\x81\xbe\x4a\xff\x1c\xfc\xc4\x97\x1c\xd2\xd4\xdf\xce\x6b\xfa\xd6\xfa\xb3\x1f\x36\x67\x0e\xe6\x88\xe9\x77\x0a\xaf\x00\x00\x00\xff\xff\x90\x81\x4e\xed\xbd\x00\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 189, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc7, 0xcc, 0xc6, 0xb2, 0x81, 0xa0, 0x7d, 0xc5, 0x5b, 0x8f, 0xf3, 0xd1, 0xf1, 0xee, 0x65, 0x3d, 0x0, 0x7c, 0x93, 0x89, 0x1c, 0x38, 0xd0, 0x9, 0x86, 0x1a, 0xd6, 0xef, 0x5, 0xee, 0x70, 0xe8}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x09\xc4\x30\x0c\x05\xd0\xde\x53\x68\x81\x2b\xae\x55\x77\x33\x1c\xa4\x17\xf2\x0f\x11\xc1\xb2\xb1\x14\xcf\x1f\x02\xe9\x1e\xbc\xd3\xbc\x32\xfd\x31\x97\x29\x7e\xaa\xfd\xf2\x2c\x32\x6c\xc3\x0c\xeb\xce\xb4\xbe\xa5\x21\xa5\x4a\x0a\x17\x22\x97\x06\xa6\xea\xf1\x3a\x86\x28\x98\xfa\x80\xc7\x61\x7b\x7e\x9e\xba\x03\x00\x00\xff\xff\x8e\x2c\xf1\x2e\x55\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 85, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x12, 0x50, 0x4d, 0x67, 0x2f, 0x1b, 0x74, 0xa0, 0xa4, 0xbb, 0xa7, 0x59, 0xe9, 0x5a, 0xc6, 0xc1, 0x1a, 0xf8, 0x5f, 0xff, 0x5, 0xdb, 0xc, 0x10, 0x8b, 0xc1, 0x0, 0xcc, 0xf, 0x9f, 0x3a}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xbb\x4e\x2c\x41\x0c\x44\xf3\xfe\x8a\x92\x6e\x3c\x57\x42\x88\xa4\x53\x48\x48\xd0\x48\x3c\x72\x6f\x4f\xb1\xb4\x70\x3f\xd4\xf6\x2c\xe2\xef\xd1\xce\x8a\x05\x02\x44\xe8\xaa\xe3\x63\xbf\xe6\xba\x44\xdc\x73\x1c\x72\x62\x90\x9e\x9f\x38\x2c\xb7\x1a\x71\xb8\x08\x85\x2e\x8b\xb8\xc4\x00\xfc\xc3\x9d\x14\x22\x1b\x8c\x0e\x71\x8c\xb5\x7a\x2e\x0c\x40\x95\x42\xeb\x92\x18\xd1\x3a\xab\xbd\xe4\x67\x9f\x96\x6a\x01\x50\xd9\x51\xed\xb8\x8f\x6f\x9d\xf4\x1e\x71\x04\xac\x33\x9d\xe4\x49\x57\x73\x8e\xdb\x19\x6f\x59\x15\x3b\x42\x56\x6f\x45\x3c\x27\x51\x7d\x47\x91\x2a\x7b\x2e\xff\x03\x60\x54\x26\x6f\xe3\x57\x2b\xd0\xdb\xf0\xed\xea\xb4\x3d\xf7\x19\x9f\x8a\x88\xab\xcb\x6d\x70\x19\x7b\xfa\xbc\x45\x67\x60\x34\x6f\xa9\x69\xc4\xe3\xcd\xfc\x53\x30\x79\xea\x7f\x4a\xbe\xa0\xb3\xe8\xe1\x7a\x0e\x1f\x01\x00\x00\xff\xff\x8f\xbd\x79\x05\x67\x01\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 359, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0x55, 0x8f, 0x6e, 0x7a, 0x45, 0x79, 0x7c, 0x22, 0x76, 0x51, 0xe8, 0x2d, 0x77, 0xbc, 0x68, 0xc4, 0x28, 0x31, 0x3b, 0xe, 0xd, 0x40, 0x7d, 0x9e, 0x99, 0x9c, 0xf1, 0x2d, 0xf7, 0xa, 0x59}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/cluster-dns-cr.yaml": assetsClusterDnsCrYaml,

	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/configmap.yaml": assetsDnsConfigmapYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"cluster-dns-cr.yaml": {assetsClusterDnsCrYaml, map[string]*bintree{}},
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"configmap.yaml":            {assetsDnsConfigmapYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml":            {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml":      {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":              {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
