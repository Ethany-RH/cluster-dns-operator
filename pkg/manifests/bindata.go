// Code generated by go-bindata.
// sources:
// manifests/00-custom-resource-definition.yaml
// manifests/00-namespace.yaml
// manifests/cluster-role-binding.yaml
// manifests/cluster-role.yaml
// manifests/deployment.yaml
// manifests/service-account.yaml
// assets/dns/cluster-role-binding.yaml
// assets/dns/cluster-role.yaml
// assets/dns/configmap.yaml
// assets/dns/daemonset.yaml
// assets/dns/namespace.yaml
// assets/dns/service-account.yaml
// assets/dns/service.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _manifests00CustomResourceDefinitionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xb1\x4e\x03\x31\x0c\x86\xf7\x3c\x85\x9f\xe0\xd0\x6d\x28\x2b\xdd\x40\x1d\x40\x62\x37\x89\xdb\x5a\xcd\xd9\x56\xec\x9c\x78\x7c\x74\x57\x90\x80\x8e\xf6\xf7\xeb\xff\x2c\xa3\xf1\x3b\x75\x67\x95\x0c\x68\x4c\x9f\x41\xb2\x4d\x3e\x5d\x1f\x7d\x62\x7d\x58\xe7\x0f\x0a\x9c\xd3\x95\xa5\x66\x78\x1a\x1e\xba\xbc\x92\xeb\xe8\x85\x0e\x74\x62\xe1\x60\x95\xb4\x50\x60\xc5\xc0\x9c\x00\x04\x17\xca\x50\xda\xf0\xa0\x5e\xc5\xc9\xa7\x2a\x3e\xa9\x91\xf8\x85\x4f\x31\xb1\x26\x37\x2a\x5b\xf6\xdc\x75\x58\x86\x3b\x7e\x6b\xf1\x2d\x02\xf0\xed\xbe\x15\x1e\x8e\x6f\xfb\xb2\xb1\xc7\xf3\x3f\xf0\xc2\x1e\x3b\xb4\x36\x3a\xb6\xbf\x47\xec\xc0\x59\xce\xa3\x61\xff\x8d\x12\x80\x17\x35\xca\x70\xdc\x9c\x86\x85\x6a\x02\x58\x7f\xfe\xb2\xce\xd8\xec\x82\x73\xfa\x0a\x00\x00\xff\xff\x3a\xfe\x93\xd9\x2d\x01\x00\x00")

func manifests00CustomResourceDefinitionYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00CustomResourceDefinitionYaml,
		"manifests/00-custom-resource-definition.yaml",
	)
}

func manifests00CustomResourceDefinitionYaml() (*asset, error) {
	bytes, err := manifests00CustomResourceDefinitionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-custom-resource-definition.yaml", size: 301, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests00NamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x11\x82\x31\x08\x05\xe0\x3e\x53\xb0\x40\x0a\xdb\x0c\x61\x69\xff\xee\xcf\xf3\xe4\x34\xc0\x01\x3a\xbf\xdf\x5b\x6d\x2f\xb9\xe3\xb0\x02\x17\x07\x42\x1f\xcc\x52\xb7\x25\xbf\xdb\x38\x6c\x6c\x34\xd6\x10\x11\x31\x1c\x2e\xf1\xa0\xd5\x4b\x9f\x3d\xaf\xcf\xb7\x9a\x39\xb7\xd5\xf4\x60\xa2\x3d\xc7\x3f\x00\x00\xff\xff\x93\x5a\xd8\xf8\x52\x00\x00\x00")

func manifests00NamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests00NamespaceYaml,
		"manifests/00-namespace.yaml",
	)
}

func manifests00NamespaceYaml() (*asset, error) {
	bytes, err := manifests00NamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-namespace.yaml", size: 82, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8f\x31\x4f\xc3\x40\x0c\x85\xf7\xfb\x15\x56\x99\x13\xd4\x0d\xdd\x06\xec\x0c\x45\x62\x77\x2e\x2e\x31\x4d\xec\xc8\x76\x2a\xc1\xaf\x47\xa7\x6b\x27\xaa\x4e\xac\x77\xcf\xef\x7d\xdf\x03\xbc\xb0\x8c\x0e\x31\x11\xe8\x4a\x86\xa1\x06\x65\xde\x3c\xc8\xc0\x74\x26\x08\x05\x0e\x87\x77\xb2\x33\x17\x82\xe7\x52\x74\x93\xe8\xd3\x89\x65\xcc\xf0\xda\xa2\x07\x9d\xa9\x16\xb1\x7c\x26\x5c\xf9\x83\xcc\x59\x25\x83\x0d\x58\x7a\xdc\x62\x52\xe3\x1f\x0c\x56\xe9\x4f\x4f\xde\xb3\x3e\x9e\xf7\x03\x05\xee\xd3\x42\x81\x23\x06\xe6\x04\x20\xb8\x50\xbe\xae\x77\xa3\x78\x77\x45\x4a\xbe\x0d\x5f\x54\xc2\x73\xea\xa0\x2d\x5f\x80\x2e\x3c\xf7\xaf\xdb\xa7\xaf\x58\x28\x57\x4d\xf1\x89\x8f\xd1\xdd\xcc\x56\xe9\x03\x1d\x2b\xcf\x1f\xc5\xff\x5b\xd9\x9c\xec\xad\xa6\xab\xd0\xce\xbf\x3d\x68\xc9\xde\x94\xb0\x29\xe5\xfb\x15\xf9\xd6\xe3\x2e\xfd\x06\x00\x00\xff\xff\xc3\xf2\x9a\xab\xd1\x01\x00\x00")

func manifestsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsClusterRoleBindingYaml,
		"manifests/cluster-role-binding.yaml",
	)
}

func manifestsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := manifestsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/cluster-role-binding.yaml", size: 465, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xb1\x6e\xf3\x30\x0c\x84\x77\x3d\x05\x91\x7f\xb6\x7f\x64\x2b\xbc\x76\xe8\xde\xa1\x3b\x2d\xd1\x31\x11\x9b\x14\x48\x3a\x05\xfa\xf4\x45\x12\x3b\x28\xea\x74\x12\x4f\x3c\x7d\x94\x4e\xff\xe0\x75\x5a\x3c\xc8\xc0\x74\x22\x18\xd4\x20\x46\x02\xad\x64\x18\x6a\xc0\xe1\x34\x0d\x6d\x3a\xb3\x94\x6e\xf3\xbe\xeb\x44\x09\x2b\x7f\x90\x39\xab\x74\x60\x3d\xe6\x16\x97\x18\xd5\xf8\x0b\x83\x55\xda\xf3\x8b\xb7\xac\xff\x2f\xc7\x9e\x02\x8f\x69\xa6\xc0\x82\x81\x5d\x02\x10\x9c\xa9\x83\x7c\x67\x35\x45\xbc\xd9\xc6\xad\x4d\xaf\x98\xa9\xbb\x5e\x42\x7c\xe4\x21\x9a\xa7\x5e\x5b\x26\xf2\x2e\x35\x80\x95\xdf\x4c\x97\xea\x57\x78\x03\x45\xbc\x7d\x1c\x6d\x59\x13\x80\x91\xeb\x62\x99\x56\xc7\x8a\x2b\xe2\xe4\x09\xe0\x42\xd6\xaf\x9d\x89\x3d\x6e\xc5\x27\x46\x1e\xf7\x6c\xac\xd5\xf7\xbc\x82\x34\xab\x38\xc5\x2f\x5a\x36\xc2\xa0\x3d\xe5\x70\xb8\x2d\x7f\xa6\xb6\x9f\xf0\x48\xc5\x6f\xb2\x6a\xb9\x17\x24\xa5\x2a\x4b\xdc\x95\x93\x5d\x78\xf3\xac\x02\x73\xd6\x65\x33\x64\x95\x81\x4f\x33\x56\xff\x99\xc3\xf5\xe7\x77\x1b\x3d\x4b\x61\x39\x3d\x7f\xd1\x93\xa8\x00\xbe\x03\x00\x00\xff\xff\x64\x40\x64\x73\x4b\x02\x00\x00")

func manifestsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsClusterRoleYaml,
		"manifests/cluster-role.yaml",
	)
}

func manifestsClusterRoleYaml() (*asset, error) {
	bytes, err := manifestsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/cluster-role.yaml", size: 587, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcb\x4e\xc3\x40\x0c\xbc\xe7\x2b\xac\xde\x43\xd5\xeb\xde\xa2\x52\x04\x12\xb4\x51\xa9\xe0\x88\xcc\xc6\x69\x57\xec\x4b\x6b\x27\x52\xff\x1e\x85\x86\x36\x85\xa0\xe0\xa3\x67\x3c\x9e\xf5\x2c\x46\xf3\x42\x89\x4d\xf0\x0a\x30\x46\x9e\xb7\x8b\xec\xc3\xf8\x4a\xc1\x2d\x45\x1b\x8e\x8e\xbc\x64\x8e\x04\x2b\x14\x54\x19\x80\x47\x47\x0a\xb4\x6d\x58\x28\xe5\x95\xe7\x3c\x44\x4a\x28\x21\xf5\x20\x47\xd4\xa4\x20\x44\xf2\x7c\x30\xb5\xe4\xa3\x5c\x8e\xa4\x3b\xb9\x44\xd1\x1a\x8d\xac\x60\x91\x01\x30\x59\xd2\x12\x52\x87\x00\x38\x14\x7d\x78\xc4\x77\xb2\x7c\x6a\x4c\x6c\x17\x72\xd1\xa2\x50\x3f\x3d\x30\xdd\x95\xbd\x12\x9a\x90\x02\xf8\x36\xd8\x95\x0e\x5e\xd0\x78\x4a\x83\xf1\x7c\x4a\xe0\x54\xc6\xe1\x7e\x78\x8d\x79\x48\x66\x6f\xfc\xe8\x51\x54\x67\x9e\x65\x30\xad\x83\x73\xe8\x2b\x35\x68\xe5\xff\xda\x58\x36\xd6\x96\xc1\x1a\x7d\x54\xf0\x50\xaf\x83\x94\x89\xb8\x8b\xf2\xc2\x23\xdf\x0e\x75\x2f\x2f\x7a\x2d\x76\xcb\xfb\xb7\x75\xf1\xb4\x7a\x2e\x8b\xe5\xea\x8a\x03\xd0\xa2\x6d\xe8\x2e\x05\xa7\x7e\x00\x00\xb5\x21\x5b\x6d\xa9\xfe\x8d\xf4\x58\x89\x72\x50\xe7\x60\x6e\xce\xbf\x65\xd4\xc6\xa6\x5c\x6d\x8b\xdd\x66\xfb\xe5\x64\xcc\x84\x82\xd9\xd8\x29\x66\x3d\x97\x29\xb5\x46\x53\xa1\x75\x68\xbc\xac\xff\x0e\xeb\x33\x00\x00\xff\xff\x0c\xd4\x5d\x1f\x03\x03\x00\x00")

func manifestsDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsDeploymentYaml,
		"manifests/deployment.yaml",
	)
}

func manifestsDeploymentYaml() (*asset, error) {
	bytes, err := manifestsDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/deployment.yaml", size: 771, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xb1\x0a\xc3\x30\x0c\x44\x77\x7f\xc5\x41\xe6\x04\xba\x7a\xeb\xd8\xb9\xd0\xdd\xd8\x0a\x11\x4d\x2c\x57\x92\xf3\xfd\x25\x21\xdd\x3a\xdf\xe3\xdd\x1b\x70\xcf\x59\x7a\x75\xcc\xa2\xf0\x85\x20\x8d\x34\xb9\x28\xd8\x8d\xd6\x79\xc2\xc3\x61\x8b\xf4\xb5\x40\xe9\xd3\x59\x09\x35\x6d\x64\x2d\x65\x82\x65\x69\x54\xc2\x80\x46\xba\xb1\x19\x4b\xb5\x29\xbc\xb9\x96\x88\x27\xe9\xce\x99\x2e\x7f\x48\x8d\x5f\xa4\x07\x11\xb1\xdf\xc2\x46\x9e\x4a\xf2\x14\x03\x4e\x5f\x44\x5e\xbb\x39\xe9\x58\xaa\x8d\xbf\x88\x6b\x3c\xcf\xe2\x91\x56\x6d\xe1\xd9\xc7\xbf\xec\x37\x00\x00\xff\xff\x83\x8f\x49\xa7\xcc\x00\x00\x00")

func manifestsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsServiceAccountYaml,
		"manifests/service-account.yaml",
	)
}

func manifestsServiceAccountYaml() (*asset, error) {
	bytes, err := manifestsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/service-account.yaml", size: 204, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x4b\x04\x41\x0c\x85\xfb\xfc\x8a\x70\xfd\xae\xd8\x49\x3a\xb5\xb7\x38\xc1\x3e\x37\x93\xf3\xe2\xed\x66\x96\x49\x66\x41\x7f\xbd\x0c\x83\x20\xa8\x60\x97\xe2\xbd\xf7\x7d\xb9\xaa\x65\xc2\xc7\xa5\x79\x48\x3d\x96\x45\x1e\xd4\xb2\xda\x2b\xf0\xa6\x2f\x52\x5d\x8b\x11\xd6\x13\xa7\x99\x5b\x5c\x4a\xd5\x0f\x0e\x2d\x36\x5f\xef\x7c\xd6\x72\xb3\xdf\xc2\x2a\xc1\x99\x83\x09\x10\x11\x8d\x57\x21\x4c\x63\x6f\xca\xe6\x94\xcd\xc1\xdb\xe9\x4d\x52\x38\xc1\x84\x83\xf8\x2c\x75\xd7\x24\xf7\x29\x95\x66\x01\x5f\xc5\x1e\x1e\xb7\x6f\x9c\x84\xb0\x6c\x62\x7e\xd1\x73\x4c\xdf\x36\xa1\x96\x45\x8e\x72\xee\xc8\x1f\x0f\xc0\x5f\x12\xff\xd8\x6d\x2e\xf5\xa9\x87\xba\xe8\xc1\xdf\x3d\x64\x25\x1f\xaa\x3c\x54\xe9\xd7\x66\x07\x1c\xe0\x33\x00\x00\xff\xff\xdb\x7c\x21\xe3\x4d\x01\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 333, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\x3d\x6b\xc4\x30\x0c\x40\x77\xff\x0a\x71\x7b\x52\xba\x15\xaf\x1d\xba\x77\xe8\xae\xb3\x05\x27\xe2\x48\x46\x92\x53\xe8\xaf\x2f\x89\xb3\xbd\xf7\xd0\xc7\xc6\x52\x33\x7c\xb6\xe1\x41\xf6\xad\x8d\x12\x76\xfe\x21\x73\x56\xc9\x60\x4f\x2c\x2b\x8e\x78\xa9\xf1\x1f\x06\xab\xac\xdb\x87\xaf\xac\x6f\xc7\x7b\xda\x29\xb0\x62\x60\x4e\x00\x82\x3b\x65\x28\xf3\xcc\x52\xc5\x73\x15\x4f\x36\x1a\x79\x4e\x0b\x60\xe7\x2f\xd3\xd1\xfd\x9c\x5d\xe0\xf1\x48\x00\x46\xae\xc3\x0a\xdd\x8d\xa4\x76\x65\x09\xbf\xcc\xc9\x0e\x2e\x34\xa5\x6b\x9d\x70\x7e\xf1\x8e\xb3\x1f\x64\xcf\x7b\xb7\xb1\xc7\x05\xbf\x18\xe5\x95\xfe\x03\x00\x00\xff\xff\x8e\xf7\xdc\x36\xd4\x00\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 212, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\xcd\x4e\xc3\x30\x0c\xc7\xef\x7d\x0a\xbf\x40\x3b\xa6\xaa\x48\xe4\xba\x33\x57\xee\x26\x71\x96\x68\x69\x1c\xd9\xc9\x04\x02\xde\x1d\x95\x8d\xc0\xa4\xf9\xf4\xff\xf2\xef\x14\xb3\x33\x70\xe0\xec\xe3\xf1\x19\xcb\x80\x25\xbe\x90\x68\xe4\x6c\xe0\xbc\x1f\x56\xaa\xe8\xb0\xa2\x19\x00\x32\xae\x64\xc0\x65\xbd\x6a\x2d\x68\xc9\x00\x17\xca\x1a\xa2\xaf\xa3\x4d\x4d\x2b\xc9\xb8\x4d\x7e\x9f\x0e\x2c\xe4\x63\x22\x03\x9f\x03\x00\xc0\x64\x96\x79\x99\xe1\xe3\xc7\x6c\x47\x22\x2c\xda\x6d\x20\x4c\x35\x74\x7b\x6a\xaf\x24\x99\x2a\x29\x5c\xe9\x53\x62\x8b\x09\x62\x1e\xd1\x39\x99\x50\x0a\x42\x2c\x8f\x17\xf1\x87\xdd\xae\xb0\x53\x88\x59\xc9\x36\xa1\x9b\xa6\x15\xad\x42\xb8\xde\x84\x1e\x53\xaa\x41\xb8\x1d\xc3\x7d\x7c\x5f\x7f\x75\x55\x84\x57\xaa\x81\x9a\x82\x79\xda\x2f\xf3\xff\xe2\xed\x1d\x26\xd8\x51\xb5\x3b\x21\xe5\x74\x9e\x2c\x67\xdf\x07\x16\x6d\x20\x98\x1f\x7a\x20\x94\x18\xdd\x70\xe1\x7f\x07\x00\x00\xff\xff\x9c\xe9\xd3\xc8\x97\x01\x00\x00")

func assetsDnsConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsConfigmapYaml,
		"assets/dns/configmap.yaml",
	)
}

func assetsDnsConfigmapYaml() (*asset, error) {
	bytes, err := assetsDnsConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/configmap.yaml", size: 407, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x8b\xdb\x30\x10\xbd\xef\xaf\x18\x7c\xae\xd7\x09\x21\x65\xab\x5b\xd9\x40\x5b\xe8\x6e\x0d\x9b\xf6\x52\x7a\x98\x95\xc7\xb1\x88\xa4\x11\xd2\x38\x90\x7f\x5f\x1c\xc7\xae\x4c\xd3\xc2\xea\x64\xf4\x3e\x34\xf3\xfc\x8e\xc6\x37\x0a\x76\x48\x8e\xfd\x0b\xc9\x1d\x06\xf3\x83\x62\x32\xec\x15\x60\x08\xa9\x3a\xad\xef\x1c\x09\x36\x28\xa8\xee\x00\x3c\x3a\x52\xd0\xf8\x74\xfd\x4e\x01\x35\x29\xe0\x40\x3e\x75\xa6\x95\x52\xdb\x3e\x09\xc5\x72\xa4\x58\x7c\x25\x9b\x06\x21\x64\x1c\x0c\x61\xf4\x48\x81\xf4\x00\x26\xb2\xa4\x85\xe3\x48\x74\x28\xba\xfb\x9a\x29\x6f\x6a\x01\x84\x5c\xb0\x28\x74\x55\x65\x53\x0e\xc7\x2e\x0c\xfe\x61\x01\x30\x8d\x70\xf9\xa6\x78\x32\x9a\x3e\x6a\xcd\xbd\x97\xe7\x6c\xd5\xe1\x68\xf6\x82\xc6\x53\x9c\x4d\xcb\x45\x1c\xe3\x31\x0e\x0f\xa4\xa0\x68\x58\x1f\x29\xde\x1b\xae\xe6\x87\x2b\x8e\xe6\x60\x7c\xa9\x39\x52\xe3\x93\x3a\x6d\xee\xd7\xeb\xfb\x55\xb1\xd4\xd6\xbd\xb5\x35\x5b\xa3\xcf\x0a\xbe\xb4\xcf\x2c\x75\xa4\x44\x5e\x66\x96\x66\xe7\x70\xf8\x6b\x3f\xa1\xb8\x5a\x15\xf0\x6b\x86\x31\x1e\xd2\x05\x2b\x35\xfb\xb6\x78\x07\x45\x45\xa2\xab\x2b\xb3\x7a\xe4\x48\xad\xb1\x94\x4b\x4e\x6c\x7b\x47\x4f\xc3\xd2\x59\x60\xd3\x76\x83\x8d\x39\x94\x23\x69\x46\x01\xdc\xc0\xaf\x51\x3a\x05\xf9\x0b\x19\x23\x12\x36\xdf\xbc\x3d\x2b\x90\xd8\xff\x91\x06\x8e\xcb\x77\xe6\x64\x6b\x8e\xa2\x60\xbb\xd9\x6e\x32\x97\xbf\x33\x06\x08\x91\x85\x35\x5b\x05\xdf\x77\xf5\xdb\x9d\x4a\xd1\xe1\xa6\xdb\xfe\xf1\x3f\x6e\x1f\xd6\x37\xdc\x1c\x49\x34\xfa\xf6\x6c\xb9\x9b\x35\x27\xf2\x94\x52\x1d\xf9\x95\x54\x46\xef\x44\xc2\x27\x92\xfc\x0a\x20\x8c\xb1\x76\x84\x56\xba\x25\x72\x19\xe5\x61\xf5\xb0\x5a\x5c\x27\xdd\xd1\x30\xce\xe7\xfd\xbe\xce\x00\xe3\x8d\x18\xb4\x3b\xb2\x78\x7e\x21\xcd\xbe\x49\x0a\xde\xe7\x52\x31\x8e\xb8\x97\x19\xdc\x66\x58\xea\xb5\xa6\x94\xf6\x5d\xa4\xd4\xb1\x6d\x14\xac\x33\xb4\x45\x63\xfb\x48\x19\x3a\x69\x1b\x9f\xa6\x06\xef\xa8\xc5\xde\x4e\xe5\x1d\x3b\xf4\x86\x8e\x8d\xf7\x4f\x18\x96\xf1\xdc\xaa\x04\x80\x11\x72\x69\x49\x2c\xe1\x48\x67\x05\x53\xe9\x17\xd8\x94\xf2\x0c\xfe\x0e\x00\x00\xff\xff\x98\x16\x93\x48\x0c\x05\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 1292, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\xae\x42\x31\x08\x06\xe0\x9d\xa7\x20\x67\xef\xbd\x71\xe5\x21\x1c\xdd\x49\xfb\x1b\x89\xa7\xd0\x14\xf4\xf9\x8d\x93\xfb\xf7\x34\x1f\xc2\x57\x9d\xc8\xa5\x1d\xa4\xcb\x6e\xd8\x69\xe1\xc2\xef\x0b\x4d\x94\x0e\x2d\x15\x62\x76\x9d\x10\x8e\x05\xcf\x87\xdd\xab\xf5\xf3\x95\x85\xdd\x86\x27\x31\xab\x7b\x94\x96\x85\xe7\x17\xf3\x0f\xfe\x59\xfc\x7b\x0c\xb4\xc4\x89\x5e\xb1\x85\x8f\x83\x3e\x01\x00\x00\xff\xff\xb5\x9f\xce\xf1\x79\x00\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 121, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xca\x31\x0e\x82\x21\x0c\x06\xd0\x9d\x53\xf4\x02\x0c\xae\xdd\x3c\x83\x89\x7b\x53\x3e\x63\xa3\x14\x42\x0b\xe7\x37\x26\xff\xf6\x86\xf7\x31\x6f\x4c\x0f\xac\x63\x8a\xbb\xea\xd8\x9e\x45\xa6\x3d\xb1\xc2\x86\x33\x9d\x5b\xe9\x48\x69\x92\xc2\x85\xc8\xa5\x83\xa9\x79\x5c\x8e\x29\x0a\xa6\x31\xe1\xf1\xb6\x57\x56\xfd\xee\x48\xac\xfa\x2f\xbf\x00\x00\x00\xff\xff\x35\xeb\xbe\x6a\x5d\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 93, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xbd\x4a\x44\x31\x10\x85\xfb\x3c\xc5\x01\xeb\x2b\x88\xd8\xa4\xd5\xc6\xee\x82\x3f\xfd\x6c\x32\xae\xc1\x49\x32\x64\x66\x57\x7c\x7b\xb9\x61\xd9\xd5\x42\x2c\x4f\xce\x77\xbe\xcc\x47\x69\x39\xe2\x89\xc7\xb1\x24\x0e\xa4\xe5\x95\x87\x95\xde\x22\x8e\x37\xa1\xb2\x53\x26\xa7\x18\x80\x46\x95\x23\x72\x33\x9c\x82\x29\x25\x8e\xe8\xca\xcd\xde\xcb\x9b\x2f\x49\x0e\xe6\x3c\x96\xdc\x2c\x00\x42\x3b\x16\xdb\x96\xf8\xc1\x90\xea\x94\x04\x53\x4e\x5b\x79\x85\xd3\xec\x71\xc5\x67\x11\xc1\x8e\x41\x07\xef\x95\xbc\x24\x12\xf9\x42\xa5\x46\x7b\xce\xd7\x01\x30\x16\x4e\xde\xc7\x9f\x56\x40\xfb\xf0\xf9\xeb\x72\xb9\x78\xd2\x5b\x11\x71\x77\x3b\x83\xd3\xd8\xb3\xaf\xf3\xe9\x0c\x8c\xee\x3d\x75\x89\x78\x79\x58\x7f\x0b\x16\x4f\xfa\xaf\xe4\x02\x9d\x45\xcf\xf7\x6b\xf8\x0e\x00\x00\xff\xff\x48\x1e\x34\x57\x61\x01\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 353, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"manifests/00-custom-resource-definition.yaml": manifests00CustomResourceDefinitionYaml,
	"manifests/00-namespace.yaml": manifests00NamespaceYaml,
	"manifests/cluster-role-binding.yaml": manifestsClusterRoleBindingYaml,
	"manifests/cluster-role.yaml": manifestsClusterRoleYaml,
	"manifests/deployment.yaml": manifestsDeploymentYaml,
	"manifests/service-account.yaml": manifestsServiceAccountYaml,
	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,
	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,
	"assets/dns/configmap.yaml": assetsDnsConfigmapYaml,
	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,
	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,
	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,
	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"dns": &bintree{nil, map[string]*bintree{
			"cluster-role-binding.yaml": &bintree{assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml": &bintree{assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"configmap.yaml": &bintree{assetsDnsConfigmapYaml, map[string]*bintree{}},
			"daemonset.yaml": &bintree{assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml": &bintree{assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml": &bintree{assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml": &bintree{assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
	"manifests": &bintree{nil, map[string]*bintree{
		"00-custom-resource-definition.yaml": &bintree{manifests00CustomResourceDefinitionYaml, map[string]*bintree{}},
		"00-namespace.yaml": &bintree{manifests00NamespaceYaml, map[string]*bintree{}},
		"cluster-role-binding.yaml": &bintree{manifestsClusterRoleBindingYaml, map[string]*bintree{}},
		"cluster-role.yaml": &bintree{manifestsClusterRoleYaml, map[string]*bintree{}},
		"deployment.yaml": &bintree{manifestsDeploymentYaml, map[string]*bintree{}},
		"service-account.yaml": &bintree{manifestsServiceAccountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

