// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster-dns-cr.yaml (418B)
// assets/dns/cluster-role-binding.yaml (333B)
// assets/dns/cluster-role.yaml (212B)
// assets/dns/configmap.yaml (422B)
// assets/dns/daemonset.yaml (4.161kB)
// assets/dns/namespace.yaml (197B)
// assets/dns/service-account.yaml (93B)
// assets/dns/service.yaml (367B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsClusterDnsCrYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x6e\xe3\x30\x10\x44\x7b\x7e\xc5\x00\xae\xa5\x83\x5b\xb6\xe7\x2b\xdc\x1c\x0e\x38\x20\xfd\x86\x5c\x59\x9b\x50\x4b\x82\xbb\x32\x90\x7c\x7d\x20\x47\x31\x82\x24\xe5\x12\x9c\x99\x37\x73\xc0\x59\xcd\xa9\x14\xee\x48\x55\x27\xb9\xc0\x1a\x27\x99\x24\xe1\x4a\x65\x65\x03\x75\x06\xb5\x56\x84\x33\xc8\xd1\x57\x75\x59\x78\x0c\xd4\xe4\x81\xbb\x49\xd5\x88\xac\x36\xd6\xc6\x6a\xb3\x4c\x3e\x4a\xfd\x75\x3d\x52\x69\x33\x1d\xc3\xb3\x68\x8e\xf8\x5d\x56\x73\xee\xa7\xbf\xff\xc3\xc2\x4e\x99\x9c\x62\x00\x94\x16\x8e\xc8\x3c\xd1\x5a\x7c\xbf\xad\x51\xe2\x88\xbb\xdb\x90\xde\xb5\x43\x56\x1b\x6a\xe3\x4e\x5e\x3b\x02\x70\xc0\x1f\xb5\xb5\x33\x7c\x26\x47\xd5\xf2\x02\x9f\x19\xf7\x2f\x89\x14\x99\x0b\x3b\xdf\xde\xf7\x14\xec\x76\x1b\x32\xea\xe3\x13\x27\x1f\x03\x30\x89\x52\x91\x57\xee\xb6\x71\x0d\xdf\x0b\xed\xf2\xcf\x34\x61\x5b\x2a\xde\x48\xf6\x7e\xe7\x7f\x10\xfb\x61\x2c\xac\x26\x7a\xb9\x61\xc8\x97\xb9\xb7\xf0\xdd\xf3\x54\x17\x12\x8d\x1f\xe7\x58\x6a\xa2\x12\xde\x02\x00\x00\xff\xff\x37\x0d\x61\xe1\xa2\x01\x00\x00")

func assetsClusterDnsCrYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsClusterDnsCrYaml,
		"assets/cluster-dns-cr.yaml",
	)
}

func assetsClusterDnsCrYaml() (*asset, error) {
	bytes, err := assetsClusterDnsCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cluster-dns-cr.yaml", size: 418, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x10, 0x67, 0x1c, 0xa7, 0x2f, 0x42, 0x1f, 0xa1, 0x54, 0x90, 0x91, 0x93, 0x2c, 0x15, 0x5a, 0x5d, 0x9c, 0x32, 0x3d, 0x5, 0x61, 0x1f, 0xbf, 0xbb, 0x5e, 0xc3, 0xb2, 0xab, 0xdc, 0x7b, 0x44}}
	return a, nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x4b\x04\x41\x0c\x85\xfb\xfc\x8a\x70\xfd\xae\xd8\x49\x3a\xb5\xb7\x38\xc1\x3e\x37\x93\xf3\xe2\xed\x66\x96\x49\x66\x41\x7f\xbd\x0c\x83\x20\xa8\x60\x97\xe2\xbd\xf7\x7d\xb9\xaa\x65\xc2\xc7\xa5\x79\x48\x3d\x96\x45\x1e\xd4\xb2\xda\x2b\xf0\xa6\x2f\x52\x5d\x8b\x11\xd6\x13\xa7\x99\x5b\x5c\x4a\xd5\x0f\x0e\x2d\x36\x5f\xef\x7c\xd6\x72\xb3\xdf\xc2\x2a\xc1\x99\x83\x09\x10\x11\x8d\x57\x21\x4c\x63\x6f\xca\xe6\x94\xcd\xc1\xdb\xe9\x4d\x52\x38\xc1\x84\x83\xf8\x2c\x75\xd7\x24\xf7\x29\x95\x66\x01\x5f\xc5\x1e\x1e\xb7\x6f\x9c\x84\xb0\x6c\x62\x7e\xd1\x73\x4c\xdf\x36\xa1\x96\x45\x8e\x72\xee\xc8\x1f\x0f\xc0\x5f\x12\xff\xd8\x6d\x2e\xf5\xa9\x87\xba\xe8\xc1\xdf\x3d\x64\x25\x1f\xaa\x3c\x54\xe9\xd7\x66\x07\x1c\xe0\x33\x00\x00\xff\xff\xdb\x7c\x21\xe3\x4d\x01\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 333, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0x50, 0xb3, 0x9f, 0xeb, 0xa, 0xd9, 0xd9, 0x2b, 0xb7, 0xb, 0xed, 0x20, 0xa9, 0xa6, 0xdc, 0xbc, 0xc5, 0x1a, 0x4b, 0xc6, 0x69, 0x9e, 0xfd, 0xbb, 0x72, 0xdb, 0x46, 0x45, 0x59, 0x60, 0xa2}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\x3d\x6b\xc4\x30\x0c\x40\x77\xff\x0a\x71\x7b\x52\xba\x15\xaf\x1d\xba\x77\xe8\xae\xb3\x05\x27\xe2\x48\x46\x92\x53\xe8\xaf\x2f\x89\xb3\xbd\xf7\xd0\xc7\xc6\x52\x33\x7c\xb6\xe1\x41\xf6\xad\x8d\x12\x76\xfe\x21\x73\x56\xc9\x60\x4f\x2c\x2b\x8e\x78\xa9\xf1\x1f\x06\xab\xac\xdb\x87\xaf\xac\x6f\xc7\x7b\xda\x29\xb0\x62\x60\x4e\x00\x82\x3b\x65\x28\xf3\xcc\x52\xc5\x73\x15\x4f\x36\x1a\x79\x4e\x0b\x60\xe7\x2f\xd3\xd1\xfd\x9c\x5d\xe0\xf1\x48\x00\x46\xae\xc3\x0a\xdd\x8d\xa4\x76\x65\x09\xbf\xcc\xc9\x0e\x2e\x34\xa5\x6b\x9d\x70\x7e\xf1\x8e\xb3\x1f\x64\xcf\x7b\xb7\xb1\xc7\x05\xbf\x18\xe5\x95\xfe\x03\x00\x00\xff\xff\x8e\xf7\xdc\x36\xd4\x00\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 212, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0xae, 0xab, 0xc3, 0xc4, 0xe7, 0x95, 0x3c, 0x7d, 0x7a, 0xff, 0xe2, 0xeb, 0x3a, 0x89, 0x28, 0xa, 0x61, 0xef, 0x77, 0x3a, 0x21, 0x34, 0x13, 0xcf, 0xbf, 0x5f, 0xbe, 0x98, 0x56, 0x89, 0xd2}}
	return a, nil
}

var _assetsDnsConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\x4f\x4b\x03\x31\x10\xc5\xef\xf9\x14\x0f\x3c\x77\x6b\x59\x56\x30\xd7\x9e\xf5\xe8\x7d\x4c\x66\x9b\xd0\x6c\x12\x66\x92\xa2\xa8\xdf\x5d\x6a\x75\xb5\xe0\x3b\xbd\x7f\xfc\x8e\x31\x7b\x8b\x7d\xc9\x73\x3c\x3c\x50\x35\x54\xe3\x13\x8b\xc6\x92\x2d\x4e\x3b\xb3\x70\x23\x4f\x8d\xac\x01\x6e\xf0\x48\x0b\x23\x2a\x94\x1b\xa8\x41\x7a\x6e\x71\x61\x03\x64\x5a\x58\x2b\x39\xb6\x28\x95\xb3\x86\x38\xb7\x8d\x4b\x5d\x1b\xcb\xc6\x67\x35\x3f\x8c\x7d\x11\x9e\x63\x62\x8b\x77\x03\x00\x83\x9d\xc6\x69\xc4\xdb\x57\x38\x8b\x45\x8a\xe8\x1a\x03\x53\x6a\x61\x8d\xc7\xfe\xcc\x92\xb9\xb1\xe2\x9b\x3e\xa4\xe2\x28\x21\xe6\x0d\x79\x2f\x03\x49\x25\xc4\x7a\x77\x31\xbf\xd8\xb3\x6a\xf1\x8a\x98\x95\x5d\x17\xbe\x5a\x7a\xd5\x26\x4c\xcb\x55\x39\x53\x4a\x2d\x48\xe9\x87\xf0\x3f\x7e\x7d\x7f\xac\xae\x4a\x59\xb8\x05\xee\x0a\x7b\xbf\x9b\xc6\xbf\xc3\xcb\x2b\x06\x6c\xb9\xb9\xad\xb0\x96\x74\x1a\x5c\xc9\xf3\x7a\x70\xe4\x02\x63\xbc\x5d\x0b\xe1\x54\xc8\x9b\x0b\xff\x33\x00\x00\xff\xff\x6c\x54\x72\x1f\xa6\x01\x00\x00")

func assetsDnsConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsConfigmapYaml,
		"assets/dns/configmap.yaml",
	)
}

func assetsDnsConfigmapYaml() (*asset, error) {
	bytes, err := assetsDnsConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/configmap.yaml", size: 422, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0x2e, 0xda, 0x99, 0xd8, 0xe4, 0x61, 0x59, 0x9b, 0x47, 0x79, 0x29, 0x9a, 0xa2, 0x38, 0xda, 0xe6, 0xa3, 0x98, 0xc7, 0xbb, 0xe7, 0xd8, 0xd, 0xe1, 0x9, 0xb7, 0xae, 0x87, 0x8b, 0x16, 0x81}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdf\x6f\xdb\x38\x12\x7e\xf7\x5f\xf1\xad\x1c\x6c\x77\x71\x55\xd3\x62\xd1\xc3\x9e\xda\xec\x6d\x2e\x71\xae\xc1\x35\x89\x11\xbb\x7b\x0f\x41\x50\x30\xd4\xc8\x22\x4a\x91\x3c\x92\x52\x6a\xa4\xf9\xdf\x0f\x94\x22\x9b\xb2\xdc\x2c\x0e\x38\xbd\x24\xe6\xcc\x7c\x9c\x5f\xdf\x68\xf4\x45\xa8\x3c\xc3\x29\xa3\x4a\xab\x05\xf9\x09\x33\xe2\x0f\xb2\x4e\x68\x95\x81\x19\xe3\x0e\x9b\x37\x93\x8a\x3c\xcb\x99\x67\xd9\x04\x98\xe2\x92\x55\x04\xe1\xe0\xc8\x83\x79\xd8\x5a\x79\x51\xd1\x04\x50\xac\x22\x67\x18\xa7\x0c\xda\x90\x72\xa5\x28\x7c\xca\x65\xed\x3c\xd9\x34\x57\x6e\x02\x48\x76\x47\xd2\x05\x1c\x44\x3a\xcc\x98\x0c\x41\xc1\x19\xe2\x41\xe8\x48\x12\xf7\xda\x76\x8a\x15\xf3\xbc\xfc\x18\x59\xee\xb5\x05\x3c\x55\x46\x32\x4f\x4f\x56\x91\xd3\xe1\x91\x03\x80\xef\x40\x00\xbd\x0b\xed\xff\x64\x1b\xc1\xe9\x98\x73\x5d\x2b\x1f\xe2\xde\xea\x01\xc6\x0a\x6d\x85\x5f\x9f\x48\xe6\x5c\x27\x74\x6b\xe7\xa9\x4a\x95\xce\x29\xe5\x56\x78\xc1\x99\x7c\xd2\xe6\x5a\x79\x26\x14\xd9\x8d\x0b\x69\x9b\xb0\x18\x31\x64\x57\x54\x6c\xb5\x3f\xbd\xdd\xd3\xca\xe7\xb5\x94\x73\x2d\x05\x5f\x67\x38\x2f\x2e\xb5\x9f\x5b\x72\xa4\xfc\x46\x8b\xeb\xaa\x62\xa1\xb0\x37\x48\xb8\xb6\x94\x2b\x97\xe0\x76\x23\x66\x76\xe5\x5a\x59\xca\xb5\x2a\x92\x97\x48\x0e\xc9\xf3\xc3\x27\xcd\xc3\x13\x6d\xa9\x10\x92\x62\x93\x46\xcb\xba\xa2\x8b\x90\x88\x28\x89\x7d\x0c\x01\x46\xac\xd2\x4e\x69\x23\x05\xaa\xa0\x3f\x67\xbe\xcc\x10\xdf\x10\x69\x58\x62\xf9\x95\x92\xeb\x0c\xde\xd6\x5b\x53\xa3\xed\xf0\x9e\x4d\xfe\xe6\xda\xfa\x0c\x6f\x7f\x79\xfb\x4b\x84\x32\xce\x64\xa8\x8f\xf6\x9a\x6b\x99\xe1\xd3\xe9\xfc\x7f\x47\x4a\x3d\x37\x7b\xd1\x96\x27\xcf\xa0\xfd\xed\xcd\x1e\xb4\x8a\xbc\x15\x7c\xbf\x6f\x31\x9a\x14\x0d\x29\x72\x6e\x6e\xf5\x1d\x65\x91\x7a\xe9\xbd\xf9\x27\xf9\xf8\x08\x30\x5d\x5a\x4b\x62\xd2\x97\x43\x49\xeb\xca\xaf\xaf\x7f\x7d\x3d\x38\x76\xbc\xa4\xe0\xce\x87\xe5\x72\x1e\x09\x84\x12\x5e\x30\x79\x4a\x92\xad\x17\xc4\xb5\xca\x5d\x86\xbf\xc6\xa6\xa1\x01\x75\xed\x37\xc2\xb7\x91\xcc\xd5\x9c\x93\x73\xcb\xd2\x92\x2b\xb5\xcc\x33\xbc\x89\xa4\x05\x13\xb2\xb6\x14\x49\xdf\x8e\xbb\xbf\xe3\x8b\x25\xa7\x65\x43\xf6\xff\xce\x05\x47\xbc\x6e\x79\xaa\x95\xa7\xaf\x83\x24\x1a\x2b\x1a\x21\x69\x45\xf9\x4e\xfb\x3d\xdf\xed\xa5\x76\xde\xa5\x81\x21\xcf\xb4\x7a\xab\x14\x05\x43\xaa\xc1\xe5\xf1\xc5\x6c\x31\xbb\xfe\x63\x76\x0d\xa6\x72\x9c\x7c\xfc\xb4\x58\xce\xae\x3f\x9f\x5e\x5d\x1c\x9f\x5f\x82\x59\xfa\x5e\xa4\xa4\x9a\xb1\x1b\x01\xe9\xfc\x64\xb6\x88\x9c\x98\xe2\x24\x30\x1f\xda\xa2\x9d\xc4\x70\x64\x98\x65\x9e\x72\x48\xe1\x3c\x74\xd1\x0f\x35\x37\xb0\xba\xbc\x5a\xce\x32\x9c\x69\x0b\xa5\xef\x5f\x82\x94\xab\x2d\xc1\x97\xe4\xa8\x75\xcb\x92\x64\x5e\x34\xd4\xcd\xf8\x77\x28\xb4\x05\x31\x5e\x0e\x05\x2f\x07\x98\x4c\x81\x49\xc1\x1c\xee\x85\x2f\x03\xd6\x6e\xbc\xae\x2e\x0a\xf1\x15\xf7\x42\x4a\x30\xe9\x34\xee\x08\x2c\xcf\x29\x7f\x15\xe1\x34\x4c\xd6\x94\x21\x69\x6b\x9d\x5a\x5a\x09\xe7\xed\xfa\xd5\x76\x7a\xef\x08\x5c\xc3\x93\xd1\x18\x8c\x52\x77\x78\x27\xd4\xe1\x1d\x73\x65\x74\x96\xf2\xe8\xc7\xb7\x38\x88\x1f\xc6\xea\x68\x6b\x94\xd6\x1a\x46\x18\x0a\x0d\x3e\x89\x64\x57\xf3\xd9\xe5\xe2\xc3\xf9\xd9\xf2\xf3\xc5\xf1\xf5\xbf\x66\xd7\x47\xc9\xd6\xd3\x15\x29\x6a\x6b\x31\x6c\xf8\x24\x32\xff\x70\xb5\x58\x2e\x3e\x9f\x9d\x7f\x9c\x1d\x25\xdb\x2e\x8a\x35\x96\xb3\x8b\xf9\x48\xe1\x95\xaf\x4c\x12\xbb\x71\x7e\xb6\x38\x7a\xf1\x12\x2f\xda\xf1\x8a\xd4\x22\x65\x9b\xc2\xe3\xfd\xfb\xf7\x48\x0e\x1e\xfa\xf6\x79\x1c\x58\x4e\x71\xc1\xbe\x10\x58\xfb\x36\xd5\x96\xd9\x35\x42\xa3\x6f\x8b\xa8\x65\xde\x11\xa0\x3d\x7f\xe1\xc0\xbc\xb7\xe2\xae\xf6\xe4\xe2\xba\x71\x83\xb4\x40\x9a\x6e\xa5\xa9\x56\x72\x1d\x2e\xde\x06\xf9\x98\x84\xdf\x9b\x90\x86\x9e\xdc\x97\xe1\xde\x40\xcb\x77\xc8\xf5\x60\x92\xe5\xc4\x65\x68\xcb\xf4\x18\xae\xe1\x9f\x85\x71\x03\x71\xe8\x4e\xd7\x70\x08\x15\xe0\xfb\xb8\x6f\x7e\xbf\x7d\x4c\x46\x50\x21\xe2\x33\xf2\xbc\xec\xf3\x83\xf3\x39\x0a\xab\x2b\x3c\x6d\x2e\x61\x42\x41\x14\x30\x3b\x63\xa5\x7b\x84\x71\x47\x3f\x1d\xfc\x94\x8b\x15\x7e\x4f\x0e\x1e\xb6\x04\x7f\x4c\xf0\x17\x57\x6a\xeb\x5b\x17\x1a\xfe\xf8\xea\xe0\x61\xd8\xff\x8f\xc9\xcf\x3f\x4f\x76\xe1\x0a\xdc\xdc\x20\x39\xf8\x7b\x82\x94\xfe\x83\xd7\xf8\xf1\xc7\x60\x3f\x15\xa6\x73\x1f\xa9\x22\xbc\xc6\xed\xed\xbb\x50\x0b\xb5\x63\x8d\x3e\x1b\x37\x4f\x77\x26\xb7\x47\xc9\xc1\x43\x6f\xbc\xa3\x5d\x88\x61\x4e\xb5\xa2\xa1\x3b\x53\x7c\x32\x39\xf3\x14\xcd\x33\xb4\x35\x14\x05\xee\x09\x2b\xf2\x81\x9d\x22\x8f\x32\xe7\x76\x00\xfe\x4d\x1d\xbd\x95\xf6\xa8\x47\x60\xf7\x25\xa9\x10\x87\x6d\x87\xfc\xd3\x6e\xb0\x41\xd3\xb5\x0f\xe3\x5f\x5b\x30\x23\x50\x2b\xd6\x30\x21\xd9\x9d\x90\xc2\xaf\x77\xae\x59\x78\x26\x09\xa4\xbc\x15\x14\x80\x6a\x99\x83\xbe\x86\x81\x27\x54\x7c\xa1\x28\xda\x16\xee\x6f\x10\x0e\x39\x49\xf2\x94\x4f\xf6\x15\xe1\x61\xda\xa7\xf3\xcf\x53\x3f\xc5\x3f\x6a\x21\x73\x30\x28\xba\x8f\xf8\xd1\xb5\x52\x1c\x73\xe0\x91\xae\x2d\x78\xed\xbc\xae\x36\x4e\x17\x42\x7a\xb2\x94\x87\xb0\x77\xb0\x57\x96\x0c\xd2\x06\xc9\x14\x07\x0f\xbb\x03\xa6\xa3\xd0\x80\x52\xbf\x3d\x43\xaa\xce\xd7\x63\x63\x48\xe5\xe8\x27\xd0\xd6\x89\x40\x9c\xf1\xfb\x01\x23\x4e\xfd\x10\x67\x66\x0f\xa7\x3a\x7d\x61\x82\x7a\xdb\x8a\xad\x72\xd7\x94\xb7\x8f\x7b\x0d\x00\xe2\xa5\x46\xdb\xaf\x8f\x9d\x51\xff\x67\x4c\x1d\x7c\x27\x15\xbf\x8d\x62\xdf\xbd\xa4\x6d\xf3\x3d\x47\xa3\x1c\x2d\xaf\x4e\xaf\xb2\x3d\x0c\x60\x5e\x57\x61\xaf\x97\x6b\x78\x0d\xd6\x68\x91\x83\xa9\x35\x84\xe2\x5a\x39\xe1\x3c\x29\x8f\x3b\x2a\x59\x23\xb4\x1d\xa1\x5e\x93\x91\xe1\xbd\xbc\xaf\x23\x2a\x9d\x8b\x42\x50\x8e\xa6\xfb\x00\x0b\x8d\xa8\x88\xf2\x9d\xf6\x04\x78\x65\x76\xc2\x1c\xf5\xc0\xb7\x6f\x4f\x13\xf8\x79\xbd\x71\xd4\xbd\x6e\x20\x47\x60\xad\xa5\x4a\x37\x94\x6f\x63\x6d\xbb\x9a\x5b\x62\x9e\x0e\x3b\xf6\xb4\xbb\xcc\x76\xce\x83\x6b\xb3\x06\x2f\x6b\x3b\x24\xc9\xce\xbc\x71\x92\xc8\x0c\xf7\x4c\xa0\x56\xe1\xe5\x3a\x9e\xe9\x51\xd5\x72\xe5\xfa\x75\xef\x94\x0a\x56\xcb\x9e\x2e\xdd\xce\xb6\x5d\xd7\xfe\xe4\xdb\xa4\x3b\xbe\x60\x26\x5a\x08\x9f\xf9\xb8\xdd\x3c\xc2\x53\xe5\x06\x9b\x78\x8a\x2f\xb4\xce\xd0\x7f\x35\x0d\x73\xda\x6d\xe9\xbb\xb2\xe7\x36\xc9\x70\xd6\xee\x91\x93\x11\xcc\x9e\xc5\x32\xac\xe7\x6b\x43\x19\xce\xb6\x20\x5e\xcb\xb0\x68\x08\xad\x36\x8e\x4e\xfb\x43\x02\x93\x12\xe1\x93\xc5\x3b\x38\x0d\x5f\x32\x8f\xd3\xcb\x45\x08\x9a\xc9\x7b\xb6\x76\xfd\x9b\x0e\x5a\xb5\xba\x61\x59\x71\x9b\xad\x5d\x9b\x80\xa2\x6d\x86\x59\x18\xb0\x6e\xf2\xdf\x00\x00\x00\xff\xff\xc1\x93\xab\x4a\x41\x10\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 4161, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0x97, 0x46, 0x4b, 0xd4, 0xc4, 0x4d, 0x37, 0xaa, 0xad, 0x6d, 0x22, 0x54, 0x3a, 0x8c, 0xcd, 0x1d, 0xc2, 0xff, 0xaf, 0xd6, 0xa5, 0xa2, 0xb6, 0x69, 0xd6, 0x5b, 0xcc, 0x9b, 0xc5, 0xe5, 0x8b}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x31\x8e\xc3\x30\x0c\x04\x7b\xbd\x62\xe1\xab\x7d\x77\x69\xf5\x88\x94\xe9\x69\x8b\x89\x09\x4b\x94\x60\x52\x7a\x7f\xe0\x20\x70\xbb\x3b\x98\xd9\x45\x53\xc4\x9d\x0a\x5b\xa3\x95\x03\x35\x79\xf0\x61\x52\x35\x62\xdc\x42\x61\xa7\x44\x4e\x31\x00\x4a\x85\x23\x6a\x63\xb5\x4d\x9e\x3e\xaf\xb9\x9b\xf3\x31\x27\xb5\x00\x64\x5a\x38\xdb\xc9\x01\x3f\x30\x76\x0c\xca\x9d\xe1\x15\x34\xaa\x24\x24\x6e\xac\x49\xf4\x85\xaa\xd8\xfb\xc2\xa0\x54\xc4\xce\x14\x7c\x23\xff\x02\x76\xde\x57\x04\xd4\xc4\x3e\xce\x6b\xfa\x95\xfa\x77\x74\x9d\x33\x0f\xce\x11\xd3\xff\x14\xde\x01\x00\x00\xff\xff\x5d\x93\xd4\xc7\xc5\x00\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 197, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0x58, 0x5b, 0x27, 0x35, 0x35, 0xa8, 0x83, 0x18, 0xa7, 0x5c, 0x37, 0xad, 0xcd, 0xa4, 0xc2, 0x99, 0xbb, 0x31, 0xb0, 0xeb, 0x92, 0x77, 0xed, 0x2e, 0xaa, 0x36, 0x63, 0x27, 0x7d, 0x81, 0x7b}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xca\x31\x0e\x82\x21\x0c\x06\xd0\x9d\x53\xf4\x02\x0c\xae\xdd\x3c\x83\x89\x7b\x53\x3e\x63\xa3\x14\x42\x0b\xe7\x37\x26\xff\xf6\x86\xf7\x31\x6f\x4c\x0f\xac\x63\x8a\xbb\xea\xd8\x9e\x45\xa6\x3d\xb1\xc2\x86\x33\x9d\x5b\xe9\x48\x69\x92\xc2\x85\xc8\xa5\x83\xa9\x79\x5c\x8e\x29\x0a\xa6\x31\xe1\xf1\xb6\x57\x56\xfd\xee\x48\xac\xfa\x2f\xbf\x00\x00\x00\xff\xff\x35\xeb\xbe\x6a\x5d\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 93, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x5, 0x20, 0x2d, 0xba, 0x9a, 0x85, 0x88, 0x10, 0xdb, 0x35, 0xe, 0xe, 0xe3, 0xff, 0x10, 0x87, 0xf9, 0xa, 0x29, 0x43, 0x41, 0xc0, 0x80, 0x19, 0x37, 0xda, 0xd, 0xe4, 0x2a, 0xb3, 0xf5}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xbd\x4e\x03\x41\x0c\x84\xfb\x7d\x8a\x91\xa8\x0f\x09\x21\x9a\x6d\xa1\xa1\x41\x27\xf1\xd3\x3b\x7b\x43\x58\xe1\xfd\xd1\xda\x09\xe2\xed\x51\x2e\x10\xa0\x40\x94\x1e\x7f\xfe\xc6\xaf\xb9\x2e\x11\xf7\x1c\xfb\x9c\x18\xa4\xe7\x27\x0e\xcb\xad\x46\xec\x2f\x42\xa1\xcb\x22\x2e\x31\x00\x67\xb8\x93\x42\x64\x83\xd1\x21\x8e\xb1\xab\x9e\x0b\x03\x50\xa5\xd0\xba\x24\x46\xb4\xce\x6a\x2f\xf9\xd9\xa7\xa4\x3b\x73\x8e\x69\xa9\x16\x00\x95\x0d\xd5\x0e\x1e\xfc\x60\xa4\xf7\x88\x03\x60\x9d\xe9\x58\xf2\x79\x76\x3b\xe3\x2d\xab\x62\x43\xc8\xce\x5b\x11\xcf\x49\x54\xdf\x51\xa4\xca\x96\xcb\x79\x00\x8c\xca\xe4\x6d\xfc\x69\x05\x7a\x1b\xbe\xb6\x4e\xeb\x93\x5f\xf1\x71\x11\x71\x75\xb9\x0e\x2e\x63\x4b\x9f\xd7\xe8\x04\x8c\xe6\x2d\x35\x8d\x78\xbc\x99\x7f\x0b\x26\x4f\xfd\x5f\xc9\x37\x74\x12\x3d\x5c\xcf\xe1\x23\x00\x00\xff\xff\xd5\x5c\x70\x51\x6f\x01\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 367, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x8c, 0xf0, 0x23, 0xe1, 0xdd, 0x14, 0xc3, 0x47, 0x73, 0x18, 0xcf, 0x43, 0x33, 0x7b, 0x7f, 0xfa, 0xa3, 0x77, 0x89, 0x7d, 0x2f, 0x55, 0x92, 0x77, 0xcd, 0x55, 0x3e, 0xce, 0x6a, 0xce, 0xd3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/cluster-dns-cr.yaml": assetsClusterDnsCrYaml,

	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/configmap.yaml": assetsDnsConfigmapYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"cluster-dns-cr.yaml": {assetsClusterDnsCrYaml, map[string]*bintree{}},
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"configmap.yaml":            {assetsDnsConfigmapYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml":            {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml":      {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":              {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
