// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/dns/cluster-role-binding.yaml (223B)
// assets/dns/cluster-role.yaml (397B)
// assets/dns/daemonset.yaml (6.165kB)
// assets/dns/metrics/cluster-role-binding.yaml (279B)
// assets/dns/metrics/cluster-role.yaml (246B)
// assets/dns/metrics/role-binding.yaml (293B)
// assets/dns/metrics/role.yaml (284B)
// assets/dns/namespace.yaml (369B)
// assets/dns/service-account.yaml (85B)
// assets/dns/service.yaml (520B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x8e\x83\x40\x0c\x05\xd0\x7e\x4e\xe1\x0b\xc0\x6a\xbb\xd5\x74\x9b\xdc\x80\x48\xe9\xcd\x8c\x09\x0e\x60\xa3\xb1\x87\x22\xa7\x8f\x10\x4a\x45\x3a\x17\xfe\xff\xfd\x89\x25\x47\xb8\xce\xd5\x9c\x4a\xa7\x33\x5d\x58\x32\xcb\x23\xe0\xca\x77\x2a\xc6\x2a\x11\x4a\x8f\xa9\xc5\xea\xa3\x16\x7e\xa1\xb3\x4a\x3b\xfd\x59\xcb\xfa\xb3\xfd\x86\x85\x1c\x33\x3a\xc6\x00\x00\x20\xb8\x50\x04\x5d\x49\x6c\xe4\xc1\x9b\x2c\x16\xac\xf6\x4f\x4a\x6e\x31\x34\x70\x78\x37\x2a\x1b\x27\xfa\x4f\x49\xab\x78\xf8\xc4\xf6\xe7\xe3\xb6\x15\xd3\xa9\xa7\xe8\x4c\x1d\x0d\x3b\x74\x9a\x1d\xbe\xd3\xef\x00\x00\x00\xff\xff\xfa\x62\xe7\x50\xdf\x00\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xf6, 0x2a, 0x3b, 0x84, 0xd7, 0x3e, 0xc4, 0xe1, 0x70, 0x66, 0x31, 0xda, 0xc4, 0x2f, 0x53, 0x27, 0x29, 0x13, 0xfe, 0x80, 0x36, 0xc5, 0xa1, 0x70, 0xdc, 0x2d, 0xef, 0xcf, 0xe0, 0xc4, 0xeb}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\x85\x75\xfd\x05\xd1\xa1\xb4\x14\xf4\x14\xf4\x1b\x67\x50\x96\xe4\x76\xad\xdd\x75\x4e\xe2\xeb\x51\x2e\x57\xa0\x8b\xa0\x9b\x19\xd9\xf3\x3c\x9e\x59\xc6\x3e\xbf\x2e\xcd\x03\xf6\xae\x0b\x12\x55\xfe\x80\x39\xab\xf4\xd9\x06\x2a\x1d\xb5\x98\xd4\xf8\x9b\x82\x55\xba\xf9\xc5\x3b\xd6\xa7\xf5\x39\x5d\x10\x34\x52\x50\x9f\x72\x16\xba\xa0\xcf\x5a\x21\x3e\xf1\x67\x9c\x47\xf1\x64\x6d\x81\xf7\xe9\x9c\xa9\xf2\x9b\x69\xab\xbe\x9d\x3c\xe7\xd3\x29\xe5\x6c\x70\x6d\x56\x70\xcf\x20\x63\x55\x96\xf0\x9b\x73\xd8\xca\x05\xbb\xa9\x3a\xee\x62\x63\x78\xa5\x3d\x5f\x61\xc3\xfd\xee\xc2\x1e\x37\x71\xa5\x28\x53\x3a\x02\xb7\x01\x90\xe0\xf2\x7b\xc1\xf1\x0d\xa1\x33\xc4\xb0\x32\xae\x0f\x84\x62\xa0\xc0\x1f\xcd\x8f\x5f\x73\x2c\xf6\x36\x7c\xa1\x04\x95\x02\xf7\xff\x00\x3f\x01\x00\x00\xff\xff\x76\x1b\x55\x2e\x8d\x01\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 397, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0xae, 0xd1, 0xba, 0xfa, 0x6b, 0xf8, 0x6e, 0x8d, 0x28, 0xc2, 0xa7, 0xaf, 0xc9, 0x3b, 0xc7, 0xcd, 0x80, 0xbe, 0xec, 0x98, 0xb4, 0x61, 0xa0, 0x9, 0xae, 0xa, 0xd8, 0xb2, 0x2e, 0x16, 0xf2}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x53\x1b\x39\x12\x7f\xe7\x53\x74\x06\x2a\x24\xbb\x0c\x98\x24\x64\x73\x93\xb0\xb7\x5e\x30\x81\xda\x00\x2e\xec\x6c\x1e\x28\xca\x25\x6b\xda\x1e\x9d\x35\x92\x56\xd2\x0c\x4c\x81\xbf\xfb\x95\x66\x3c\xf6\xfc\x31\xde\xcd\x5e\x6d\xd5\xf1\x60\x6c\x75\xf7\x4f\xdd\xad\xfe\x27\xcd\x98\x08\x03\x38\x25\x18\x4b\x31\x40\xbb\x45\x14\xfb\x1d\xb5\x61\x52\x04\x40\x94\x32\x07\xe9\xe1\xd6\x36\x08\x12\xe3\x5e\xfe\x69\x14\xa1\x08\x44\x84\xc0\xc9\x18\xb9\x01\xa2\x11\x0c\x5a\x20\x16\x74\x22\x2c\x8b\x71\xcb\x28\xa4\xc1\x16\x80\xc5\x58\x71\x62\xd1\x7d\x07\x28\x57\xf3\xef\xa8\x53\x46\xb1\x4b\xa9\x4c\x84\xbd\x22\x31\x06\x10\x0a\xb3\xa0\x2a\xcd\xa4\x66\x36\x3b\xe1\xc4\x98\x82\x68\x32\x63\x31\xf6\x85\x0c\xd1\xa7\x9a\x59\x46\x09\x5f\x70\x53\x29\x2c\x61\x02\xb5\x29\xd1\xfd\x5c\xd3\x2a\x22\xc0\x36\xb0\x98\x4c\x11\x98\x69\x6a\x5b\x72\xe4\xf4\x7e\xc2\x79\x5f\x72\x46\xb3\x00\x2e\x26\x57\xd2\xf6\x35\x1a\x14\x76\xc9\x65\x51\xc7\x4c\x10\xcb\xa4\xb8\x44\x63\x9c\xc8\x82\xfd\x8c\x70\x3e\x26\x74\x36\x94\x5f\xe4\xd4\x5c\x8b\x9e\xd6\x52\x2f\xe5\xa8\x8c\x63\xe2\x5c\x7d\x0b\x1e\x95\x1a\x43\x61\x3c\xb8\x5b\x92\x89\x9e\x9a\x9c\xe6\x53\x29\x26\xde\x1e\x78\x07\x68\xe9\xc1\x82\xf3\xe0\x44\x6a\x9c\x30\x8e\x55\x91\x54\xf2\x24\xc6\x4b\xe7\xc0\xa5\xe5\x2b\xdb\x1d\x0c\x9b\xfa\x05\xd3\x92\x0a\x10\x3b\xfe\x3e\xb1\x51\x00\xd5\x1d\x2a\x1c\x1a\x49\x78\x2d\x78\x16\x80\xd5\xc9\x4a\x54\x49\x5d\xdf\x67\xe9\xf7\xbe\xd4\x36\x80\xa3\xb7\x47\x6f\x2b\x28\xed\x13\x70\xe7\x2a\xad\xa4\x92\x07\xf0\xf5\xb4\xff\xfd\x48\xbe\xa5\x6a\x2d\xda\xf0\x64\x85\xe6\xb4\x67\x02\x8d\xe9\x6b\x39\xc6\xa0\xc2\x1f\x59\xab\x3e\xa3\xad\x2e\x01\xa8\xc2\x13\x4e\x2a\xab\x13\x72\x55\x3e\x1c\x7e\x38\xac\x2d\x1b\x1a\xa1\x53\xe7\x7c\x38\xec\x57\x08\x4c\x30\xcb\x08\x3f\x45\x4e\xb2\x01\x52\x29\x42\x13\xc0\x61\xa7\xaa\x2d\x6a\x26\xc3\xf5\x34\x93\x50\x8a\xc6\x0c\x23\x8d\x26\x92\x3c\x0c\xa0\xba\xe9\x84\x30\x9e\x68\xac\x50\xab\xde\x71\x21\x2c\x13\xbb\x0e\x98\xb3\x14\xbf\xdb\x13\x11\x12\x6e\xa3\x75\xae\xe8\x7c\xe8\xfc\x6d\x57\xbc\xef\x6c\x50\xf9\xe8\x7f\x70\xc5\x51\xe5\xe0\x8d\x4c\x34\x45\x53\x35\x8b\xb3\x98\x59\x53\x37\x34\xc6\x58\xea\x2c\x80\xa3\xc3\x37\x97\xac\x16\xf7\x7f\x24\x68\x9a\xdc\x54\x25\x01\x1c\x75\xe2\xb5\x10\x3f\x75\x96\x08\x65\xde\xcd\x92\x31\xfa\x7a\x4c\xa8\xaf\xb4\x7c\xc8\xbe\xa3\xfe\xe4\x25\xa0\x92\x15\xbe\xcf\xe5\xd4\x4a\x63\x43\xd4\xba\xb6\x6e\x90\x26\x1a\x7d\xce\x8c\x45\xe1\x93\x30\xd4\x68\xcc\x71\xf0\xaf\xc3\xa3\x77\x35\x3e\xcb\x8d\x4f\x99\x8a\x50\xfb\x26\x61\x16\xcd\xf1\xf0\xcb\x60\xd4\x3b\x39\x3d\xef\x8d\x6e\x06\xdd\xd1\xb7\x8b\xe1\xf9\xa8\xdb\x1b\x8c\x0e\xdf\x7c\x18\x7d\x3e\xb9\x1c\x0d\xce\xbb\x6f\x8e\xde\xef\xad\xb8\x7a\x27\xa7\x7f\xc2\xd7\xc2\x39\xf9\xf5\xe4\x2f\xe1\xac\xe5\xdb\x80\x56\xb3\x2c\x51\xc6\x6a\x24\xf1\xb1\x0b\xe5\xe0\xe0\xe0\xf0\xcd\x4f\xfb\x9d\xfd\xce\xfe\xa1\x73\xc2\xdb\x83\xb6\x17\x50\x5b\xdf\x15\xd0\xe3\xbc\xe8\x59\x6e\x0e\x94\x66\x29\xb1\xe8\xbe\xef\x53\x6d\x5b\x22\x0b\xba\x3f\xc3\x6c\x83\xe4\x0c\xb3\xbf\x5c\x21\x6b\xe7\x53\xd6\xb5\x18\xad\x66\xd4\x6c\x0e\xe3\x0d\xa1\x79\xf8\x4c\x68\xbe\xeb\x54\x82\xfb\xb9\x56\xd1\x6c\x06\x15\xeb\x9e\x53\xd4\xf9\xe6\xcf\x9a\x45\xa5\xff\x16\x1d\xdb\x19\xc5\x53\xd4\xff\x37\xdd\x38\xcf\x20\x37\x61\x48\x61\xf1\xa1\x56\x09\x9d\xfd\x8c\xe3\x14\xc3\x46\x03\xdc\xdc\x6f\x23\x69\xac\xc9\x03\x65\x43\xb3\xcd\x99\x2a\x4e\x40\x91\xc2\x55\xf7\xb2\x37\xe8\xdd\xfc\xde\xbb\xc9\xa7\xaa\x93\x2f\x5f\x07\xc3\xde\xcd\xe8\xf4\xfa\xb2\x7b\x71\xb5\x6e\xba\x2a\xc5\x51\xa4\x6d\x35\x1c\xd2\xc5\x49\x6f\x50\x51\x62\x1b\x4e\xdc\xec\x01\x52\x43\x31\xbc\x19\x54\x44\x13\x8b\x21\xb8\x0a\x02\x72\x52\x8e\x63\xa6\x26\x75\x75\x3d\xec\x05\x70\x26\x35\x08\x79\xbf\x07\x28\x4c\xa2\x11\x6c\x84\x06\x73\xb5\x34\x72\x62\x59\x8a\xc5\x58\xf8\x11\x26\x52\x03\x12\x1a\xd5\x09\x7b\x35\x4c\x22\x80\x70\x46\x0c\xdc\x33\x1b\x39\xac\xa6\xbd\x26\x99\x4c\xd8\x03\xdc\x33\xce\x81\x70\x23\x61\x8c\x40\xc2\x10\xc3\xfd\x0a\x4e\x4a\x78\x82\x01\x78\x79\x8c\xf8\x1a\xa7\xcc\x58\x9d\xed\x4b\x85\xc2\x44\x6c\x62\xfd\x06\xc1\xa4\xd4\x6b\x0d\x62\x15\xd7\x1d\x8c\x99\x38\x18\x13\x13\x55\x8b\x00\xad\xfc\x78\xaa\x1a\xf1\xa2\xcd\x0e\xf9\x19\xf9\x89\x04\xc5\x14\xba\x2e\xb5\x55\xed\x77\x9a\x28\xd8\xfd\x8f\x1c\x1b\xf0\x15\x3c\xc1\x83\xab\xf4\x30\x73\x26\x3e\x3d\xe5\x31\xf6\x11\xee\x09\xb3\x1f\x01\x1f\x98\x85\xce\x2e\x0c\x7b\x37\x97\x55\x84\xeb\x7e\xef\x6a\x70\x7e\x71\x36\x1c\x5d\x76\x6f\x7e\xeb\xdd\x1c\x7b\x2b\x5b\xa7\x28\x30\x3f\xcd\x7a\xaa\x79\x15\xf1\xf3\xeb\xc1\x70\x30\x3a\xbb\xf8\xd2\x3b\xf6\x56\x71\x58\xe5\x18\xf6\x2e\xfb\x2d\x86\x7d\x1b\x2b\xaf\xaa\xc6\xc5\xd9\xe0\x78\x77\x0f\x76\xf3\xac\x07\x5f\x83\x4f\x96\xa1\x03\x9f\x3e\x7d\x02\x6f\xe7\xb1\x0c\xc0\x79\x4d\x72\x1b\x2e\xc9\x0c\x81\xe4\x57\x02\xa9\x89\xce\xc0\xa5\xca\x2a\x0c\x24\x0f\x8b\x14\xca\xd7\x77\x0d\x10\x6b\x35\x1b\x27\x16\x4d\xf5\xe4\xa9\x02\x7f\x02\xbe\xbf\xa2\xfa\x52\xf0\xcc\x6d\xbc\x32\x72\xee\xb9\xdf\x4b\x93\xea\x9a\xdc\x47\x6e\xdf\xc2\xe9\xa1\xac\x95\xce\x10\x29\x77\x81\xed\x77\xc1\xa4\x74\xc4\x94\xa9\x91\x5d\x7c\x9b\x94\x02\x13\x0e\xbe\xb4\xfb\xf6\x97\xbb\xb9\xd7\x82\x72\x16\x9f\xa1\xa5\x51\xe9\x1f\xb8\xe8\xc3\x44\xcb\x18\x28\x4f\x8c\x45\xed\x6a\x23\xb0\x09\xa8\xa2\xa0\xed\xc3\x37\x84\xd8\xb9\xc8\x60\x8a\x9a\x70\xb0\x9a\xa1\x69\x61\x5a\x09\xa1\x04\x66\x03\xb8\xe8\xa7\xef\xf6\xdc\xe7\xfb\xfc\xf3\x1d\xc8\x14\xb5\x9b\x84\xf3\x2a\xe2\xd6\x97\x2b\xfb\x30\x8c\x10\xec\xbd\x04\x4e\x5c\xbe\x8b\x35\xc0\xce\x6e\x67\x60\x88\x8a\xcb\x2c\x46\x61\x17\x39\xfa\x5b\xa2\x33\x0d\x52\xb8\x13\x42\x0d\xd7\x0a\xc5\xc0\x12\x3a\x83\x57\xd7\x83\xfe\xe1\xdb\xd7\xe0\x83\x8d\xa4\x41\xa7\x97\x90\xb6\x05\x6c\x12\xe5\xfa\xa2\x9b\xf8\x81\x4b\x12\x8e\x09\x27\x82\xa2\x36\xb9\x9e\xae\xb1\xb1\xbc\x96\x10\x1a\x31\x31\x85\xd3\xab\x01\xd8\x48\xcb\x64\x1a\xe5\xaa\x37\xf0\x68\x1c\x9a\xe3\x57\xbb\x21\x9b\x82\x6f\xa1\x0b\xbf\x78\x3b\x8f\xab\x02\x3a\xf7\xe0\x47\x13\xb9\xdd\xdc\x01\xa5\x74\xbe\xbf\xf3\x58\xaf\x2f\x73\x6f\xb7\x81\x58\xfc\x2d\x11\xbb\xdd\x7f\x00\x14\x7e\xb4\x54\xfd\x33\xba\xfe\x5d\xe4\xd7\x0d\x68\x77\xf6\xcc\x85\xf6\xce\xe3\x0b\xe7\xe4\xdb\x1f\xee\xe6\x0d\x96\x56\x88\x03\x30\x65\x8e\x5f\xed\xbc\xc2\x94\x70\xb7\x59\x2e\xc8\xee\xe6\xde\xeb\x26\x3c\xb8\x58\xbf\xbd\x05\x6f\xe7\xdf\x1e\xf8\xf8\x07\x74\xe0\xe5\x4b\x27\xb2\xcd\x54\x91\x42\xe0\x0b\x84\x0e\xdc\xdd\x7d\x74\xf5\x40\xac\xb1\x7c\x91\x93\xb7\x0b\xab\xbc\xbb\x63\x6f\xe7\xb1\x14\x5f\xc3\x3f\xd6\x48\x66\xad\xf5\x09\x6b\x99\x25\x70\xab\xb5\x50\x5b\xd9\x86\xaf\x2a\x24\x16\x2b\x4d\x1c\xf2\xb2\xc3\x26\x70\x8f\x30\x45\xeb\x5a\x12\x0b\x2b\xc9\x6e\x1a\x00\xdf\xb0\xe8\x69\x42\x5a\x48\x5a\x60\xf7\x11\x0a\x67\xb6\xce\x27\xa2\xc5\x95\x7c\x89\x26\x13\xeb\x66\x25\xa9\x81\x28\x06\x89\x20\x29\x61\x9c\x8c\x19\x67\x36\x6b\x6c\x33\xb0\x84\x23\xa0\xc8\xab\x07\x50\x99\xf0\xd0\x35\x15\x63\xdd\xd1\x56\x36\x64\x93\xbc\xea\x96\x3b\x30\x03\x21\x72\xb4\x18\x6e\xb5\xcf\xcc\x17\x8b\x40\xca\xbd\xff\xc3\x9d\x3f\xf7\x9e\x3b\xa6\x6d\xf8\x35\x61\x3c\x04\x02\x02\xef\x2b\xf5\xbc\x28\x7d\x55\x83\x5d\x69\x91\x89\x06\x9a\x18\x2b\xe3\xa5\xc6\x13\xc6\x2d\x6a\x0c\x9d\xcd\x0d\xec\xa9\x46\x05\x7e\x0a\xde\x36\xec\x3c\x36\x1b\x62\x51\xf2\x6b\x2d\xe0\xe7\x0d\x4d\xa0\xd0\xb5\xab\x14\xe6\x35\xa8\xe8\x98\x2b\x25\x5c\xa1\x6f\x4f\x44\xd0\xea\x01\x2f\x4a\xa7\x3c\xd3\x03\x16\x69\xa5\x8a\xbc\x2a\x99\x8b\xf0\xbd\x9b\xaf\x15\x00\x40\x1a\x49\xc8\x23\x7b\x5e\x08\x95\xff\xda\x69\x0c\xcf\xb8\xe2\xe7\x96\xed\xcd\x4d\x5a\x41\xbf\x2e\xec\x9d\x8f\x86\xd7\xa7\xd7\xc1\x9a\xf0\x27\x56\xc6\x8c\x12\xce\x33\xd7\x93\x48\x2a\x59\x08\x44\x64\xc0\x04\x95\xc2\xe4\x17\x53\x0b\x63\x8c\x48\xca\x2a\x63\x77\x89\x7a\x83\x8a\xbb\x49\x74\x5d\x44\xc4\x32\x64\x13\x86\x21\xa4\xc5\x33\xa4\x8b\x42\x81\x18\x36\x62\xd3\xf5\x02\xd5\x30\xb3\x15\x03\x4f\x4f\x8b\x89\x61\x33\x5f\xdb\xea\x92\xd7\x65\x86\x4b\x59\x8d\xb1\x4c\x31\x5c\xd9\x9a\x47\x35\xd5\xe8\xee\x81\x45\xea\xe4\xfd\x6c\x35\x97\x00\x95\x2a\x03\x1a\x25\xba\x9e\x24\x8d\xfa\x63\x38\xa2\x82\xf7\x1d\x78\x99\x8f\x80\x35\x5a\x22\xdc\x54\xd9\x1e\x45\x6a\x87\xf7\xbd\xf7\xc5\xa3\xf2\xba\x18\x0a\x53\xde\x95\x4e\x71\x42\x12\x5e\x6e\xee\xc6\xc8\x01\x72\xa4\x56\xea\x15\xc0\x2c\x19\xa3\x16\xe8\xe6\x31\x26\x0f\xa4\x09\x80\x33\x91\x3c\x14\xc4\x05\x57\xe5\x36\xf6\x59\x13\x8a\xfd\xc6\x9b\xd7\x9b\xf2\x15\xa8\xb8\x4a\xb5\xde\x6b\xd7\xbf\x59\x16\xab\x97\x44\x05\x95\x9b\xd3\x15\x89\x37\xdd\x1e\x01\x98\xc5\xb8\x66\xbf\x0f\x33\xcc\x02\x28\x5f\x52\xd7\xbc\x7d\x35\x48\x1b\x6e\x76\x6e\x29\xbf\xd6\x6d\x35\x31\xd6\x5c\xf3\x00\x6c\xa6\x30\x80\xb3\x36\xf4\xba\x3b\xf5\xb6\xbb\x9c\x6a\xb4\x1b\x2d\xb4\x92\xbb\xa1\x9f\x49\xb1\xb4\x71\x3b\x9f\x9d\x5c\xa6\x18\x17\xa6\x3a\x11\xe0\x46\xc9\xec\xde\xb5\x95\x7d\x18\x16\x12\x08\x84\x73\xb0\x84\x89\xa5\x86\x3e\x48\xe5\x48\x52\x07\xd0\x73\xbd\xc2\x6c\xfd\x37\x00\x00\xff\xff\x71\x5d\x16\x39\x15\x18\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 6165, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0xba, 0x21, 0x96, 0xd8, 0xa6, 0x41, 0x36, 0x33, 0x2c, 0xa1, 0x95, 0x4f, 0xa9, 0x91, 0x84, 0x63, 0x35, 0xed, 0xdf, 0x88, 0xe9, 0x19, 0xfe, 0x36, 0x62, 0x2b, 0x92, 0x17, 0x97, 0x63, 0x82}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xb1\x4a\x04\x41\x0c\x86\xfb\x79\x8a\xbc\xc0\xae\xd8\x1d\xd3\xa9\x85\xfd\x09\xf6\xb9\x99\x9c\x1b\x77\x27\x19\x92\xcc\x16\x3e\xbd\x2c\x8a\x08\xe2\xb5\x81\x7c\xdf\xff\xad\x2c\x35\xc3\xd3\x36\x3c\xc8\xce\xba\xd1\x23\x4b\x65\x79\x4b\xd8\xf9\x95\xcc\x59\x25\x83\x5d\xb0\xcc\x38\x62\x51\xe3\x0f\x0c\x56\x99\xd7\x93\xcf\xac\x77\xfb\x7d\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xaa\xf8\xd4\x54\x38\xd4\x0e\x92\x8f\xcb\x3b\x95\xf0\x9c\x26\xf8\xd2\xbd\x90\xed\x5c\xe8\xa1\x14\x1d\x12\x3f\x7f\xdd\xb4\x51\x2c\x34\x7c\x5a\x4f\xfe\x7d\xf6\x8e\x85\x32\x68\x27\xf1\x85\xaf\xf1\x9b\x6c\xba\xd1\x99\xae\x87\xf9\x4f\xc7\x7f\x6b\x00\xb0\xf3\xb3\xe9\xe8\x37\xba\xd2\x67\x00\x00\x00\xff\xff\x5b\x52\x00\xaa\x17\x01\x00\x00")

func assetsDnsMetricsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleBindingYaml,
		"assets/dns/metrics/cluster-role-binding.yaml",
	)
}

func assetsDnsMetricsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role-binding.yaml", size: 279, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0x95, 0x6f, 0xa4, 0xd5, 0xed, 0x48, 0x27, 0x41, 0x56, 0x5c, 0xea, 0x5c, 0x89, 0xdc, 0xc1, 0x44, 0x91, 0xd4, 0xb, 0x18, 0x85, 0x79, 0x75, 0xaa, 0x6e, 0xb5, 0x98, 0xbe, 0xc6, 0x33, 0x43}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcd\x31\x4b\x34\x41\x0c\x87\xf1\x7e\x3e\x45\xe0\xad\x77\x5f\xec\x64\x5a\x05\x3b\x0b\x05\xfb\xec\xce\xdf\xdb\x70\x3b\xc9\x90\x64\x0e\xf4\xd3\x8b\x70\xb6\x0f\x3f\x78\xfe\xd1\xd3\x39\x23\xe1\xe4\x76\x22\x48\x81\x86\x46\xdb\x17\x0d\xb7\x8e\x3c\x30\x83\xd2\x28\x76\xe7\x01\x7a\x7e\x7d\xa7\x8e\x74\xd9\x83\xa0\x6d\x98\x68\x16\x1e\xf2\x01\x0f\x31\xad\xe4\x1b\xef\x2b\xcf\x3c\xcc\xe5\x9b\x53\x4c\xd7\xeb\x63\xac\x62\xff\x6f\x0f\xe5\x2a\xda\xea\xdf\xf0\xcd\x4e\x94\x8e\xe4\xc6\xc9\xb5\x10\x29\x77\x54\x6a\x1a\x4b\x37\x95\x34\x17\xbd\x14\x9f\x27\xa2\x96\x85\x78\xc8\x8b\xdb\x1c\xf1\x4b\x17\xb2\x01\xe7\x34\x5f\x6d\x40\xe3\x90\xcf\x5c\xc5\x0a\x91\x23\x6c\xfa\x8e\x3b\x6b\x1a\x88\x42\x74\x83\x6f\xf7\x74\x41\x96\x9f\x00\x00\x00\xff\xff\x9f\xa8\x4d\x6c\xf6\x00\x00\x00")

func assetsDnsMetricsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleYaml,
		"assets/dns/metrics/cluster-role.yaml",
	)
}

func assetsDnsMetricsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role.yaml", size: 246, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xdb, 0xe0, 0x95, 0x65, 0xae, 0x53, 0x96, 0x3a, 0x5f, 0x5e, 0x8b, 0x69, 0xe2, 0x7d, 0x5, 0xbf, 0x1f, 0x3a, 0xf, 0xff, 0xd0, 0x6b, 0x23, 0x4f, 0xfd, 0x11, 0x7f, 0x57, 0xd4, 0x4a, 0x8b}}
	return a, nil
}

var _assetsDnsMetricsRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\xb1\x4e\xc4\x40\x0c\x04\xd0\x7e\xbf\xc2\x3f\x90\x20\xba\xd3\x76\xd0\xd0\x1f\x12\xbd\x6f\xd7\x97\x98\x64\xed\x95\xed\x4d\xc1\xd7\x23\xa4\x48\x54\x20\x5d\x3b\x9a\xd1\x1b\xec\xfc\x41\xe6\xac\x92\xc1\x6e\x58\x66\x1c\xb1\xaa\xf1\x17\x06\xab\xcc\xdb\xc5\x67\xd6\xa7\xe3\x39\x6d\x2c\x35\xc3\x55\x77\x7a\x65\xa9\x2c\x4b\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xba\x69\xa3\x58\x69\xf8\xb4\x5d\xfc\x8c\xbd\x63\xa1\x0c\xda\x49\x7c\xe5\x7b\x4c\x55\x3c\x99\xee\x74\xa5\xfb\xcf\x14\x3b\xbf\x99\x8e\xfe\x8f\x9f\x00\x7e\xf9\xbf\x34\x1f\xb7\x4f\x2a\xe1\x39\x4d\x67\xfb\x9d\xec\xe0\x42\x2f\xa5\xe8\x90\x78\xf0\x65\x53\xe1\x50\x63\x59\x20\x7d\x07\x00\x00\xff\xff\xb9\xd9\xab\x8d\x25\x01\x00\x00")

func assetsDnsMetricsRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleBindingYaml,
		"assets/dns/metrics/role-binding.yaml",
	)
}

func assetsDnsMetricsRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role-binding.yaml", size: 293, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x7d, 0xc7, 0x45, 0x33, 0xc4, 0xd8, 0xf, 0x8d, 0x89, 0x8d, 0x6, 0x47, 0xa7, 0xa, 0x6b, 0x17, 0xf5, 0x5f, 0x5a, 0x2f, 0xd8, 0xf9, 0x6, 0x71, 0xaa, 0x78, 0x8d, 0xb5, 0x7a, 0xf6, 0x99}}
	return a, nil
}

var _assetsDnsMetricsRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x4e\xec\x40\x0c\x45\xfb\xf9\x0a\x6b\x5f\x9d\x7d\xa2\x5b\x4d\x8d\x44\x47\x01\x12\xbd\x77\xe6\x42\xac\x24\xe3\x91\xed\x04\xc1\xd7\xa3\xcd\x06\x89\xca\xf7\x1e\x59\x3e\xfe\x47\x2f\x3a\xc3\xa9\x01\x15\x95\xae\x5f\xd4\x4d\x17\xc4\x88\xd5\x29\x94\xbc\x18\x77\xd0\xe3\xf3\x2b\x2d\x08\x93\xe2\x84\x56\xbb\x4a\x8b\xc4\x5d\xde\x60\x2e\xda\x32\xd9\x95\xcb\x99\xd7\x18\xd5\xe4\x9b\x43\xb4\x9d\xa7\x8b\x9f\x45\xff\x6f\x0f\x69\x92\x56\xf3\x2e\x4a\x0b\x82\x2b\x07\xe7\x44\xd4\x78\x41\xfe\xe3\x1b\xa6\x8b\x1f\xd8\x3b\x17\x64\xd2\x8e\xe6\xa3\xbc\xc7\x50\x9b\x27\x5b\x67\x78\x4e\x03\x71\x97\x27\xd3\xb5\xfb\xed\xca\x40\xa7\x53\x22\x32\xb8\xae\x56\x70\x30\x87\x6d\x52\xe0\x7b\xf9\xfd\xf8\xde\xba\xd6\x5b\xd8\x60\xd7\x63\xf9\x03\xb1\xcf\x59\xfc\x1e\x3e\x39\xca\x98\x7e\x02\x00\x00\xff\xff\x29\x39\xda\x05\x1c\x01\x00\x00")

func assetsDnsMetricsRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleYaml,
		"assets/dns/metrics/role.yaml",
	)
}

func assetsDnsMetricsRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role.yaml", size: 284, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xf2, 0x4e, 0x40, 0x91, 0xd8, 0x5e, 0x1c, 0x98, 0xb6, 0x2f, 0x11, 0x2a, 0x15, 0x8f, 0xe4, 0x7c, 0xfe, 0xc6, 0x31, 0xf3, 0xb2, 0xa0, 0x38, 0xb2, 0x3f, 0x15, 0x5a, 0x33, 0x12, 0xd2, 0x88}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcd\x4e\xc4\x30\x0c\x84\xef\x79\x8a\x51\x38\x2f\x3f\xd7\xbc\x03\x5c\x90\xb8\xbb\x8d\x97\x35\x4d\xed\x2a\x76\xcb\xeb\xa3\xb2\x15\xac\xb4\xc7\x68\x46\xf3\x7d\xf1\x24\x5a\x0b\xde\x68\x66\x5f\x68\xe4\x44\x8b\x7c\x70\x77\x31\x2d\xd8\x5e\xd2\xcc\x41\x95\x82\x4a\x02\x48\xd5\x82\x42\x4c\x7d\x7f\x02\xb6\xb0\xfa\x45\xce\xf1\x28\xf6\xa4\x56\xf9\xe4\xdc\x78\x0c\xeb\x05\x39\x27\x40\x69\xe6\xf2\x5f\x3b\x55\xf5\x04\x34\x1a\xb8\x1d\x13\x0f\x70\x0e\x6c\xd4\x56\x46\x18\x68\x33\xa9\xa8\xbc\xb0\x56\xd1\x4f\x98\x62\x5a\x07\x06\xd5\x59\x7c\x97\x42\x5c\x28\x8e\x82\xef\xf1\xdf\x38\x68\x11\xbf\xd7\xea\xab\x9e\x1a\x6f\xdc\x0a\xf2\x73\x3e\x98\xd4\x9a\x7d\xdf\x78\xcd\xa6\x12\xd6\x77\x62\x18\x9a\xd9\x84\xb3\x75\xbc\x73\xdf\x64\xe4\xd7\x6b\x0a\x1b\xbe\x78\x0c\x87\xec\x16\xe2\xbf\xbf\xbb\x1e\xed\x8e\x3a\xb6\xd5\x83\xfb\xcd\x70\x41\x8e\xbe\x72\x4e\x3f\x01\x00\x00\xff\xff\x82\x6d\x29\x03\x71\x01\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 369, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0xab, 0x50, 0x84, 0x61, 0x5f, 0x41, 0xf4, 0x17, 0x3b, 0x6, 0x84, 0xc0, 0x5f, 0x4f, 0xbb, 0xd8, 0x1d, 0xae, 0x26, 0x3e, 0x1f, 0x29, 0x2c, 0x84, 0x6d, 0x5e, 0xc1, 0x87, 0x97, 0x5f, 0xc9}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x09\xc4\x30\x0c\x05\xd0\xde\x53\x68\x81\x2b\xae\x55\x77\x33\x1c\xa4\x17\xf2\x0f\x11\xc1\xb2\xb1\x14\xcf\x1f\x02\xe9\x1e\xbc\xd3\xbc\x32\xfd\x31\x97\x29\x7e\xaa\xfd\xf2\x2c\x32\x6c\xc3\x0c\xeb\xce\xb4\xbe\xa5\x21\xa5\x4a\x0a\x17\x22\x97\x06\xa6\xea\xf1\x3a\x86\x28\x98\xfa\x80\xc7\x61\x7b\x7e\x9e\xba\x03\x00\x00\xff\xff\x8e\x2c\xf1\x2e\x55\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 85, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x12, 0x50, 0x4d, 0x67, 0x2f, 0x1b, 0x74, 0xa0, 0xa4, 0xbb, 0xa7, 0x59, 0xe9, 0x5a, 0xc6, 0xc1, 0x1a, 0xf8, 0x5f, 0xff, 0x5, 0xdb, 0xc, 0x10, 0x8b, 0xc1, 0x0, 0xcc, 0xf, 0x9f, 0x3a}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x31\x6f\xe2\x40\x10\x85\x7b\xff\x8a\x27\xe8\x4e\xc0\x09\xdd\x51\x9c\xdb\xa3\x89\x52\x80\x14\x48\x3f\x5e\x4f\xcc\x8a\xf5\x8c\xb5\x33\x06\xf1\xef\x23\x4c\x42\x80\x14\x69\x56\xda\x7d\x9f\x3e\x3d\xbd\xdd\x47\xa9\x4b\xbc\x70\x3e\xc4\xc0\x05\x75\xf1\x95\xb3\x45\x95\x12\x87\x79\x31\x86\x50\xcb\x93\xe1\xb4\x8e\x02\x4f\x12\x55\x9c\x0c\x24\x35\x48\x44\x9d\x3c\xaa\x18\x28\x33\x8c\x1d\xe4\xc8\xbd\x78\x6c\xb9\xb0\x8e\x43\x59\x00\x63\x84\xd4\x9b\x73\x7e\x5a\xe3\x18\x53\x42\xc5\xa0\xde\xb5\x25\x8f\x81\x52\x3a\xa1\x25\xa1\x86\xeb\xd9\x00\x1b\x27\x0e\xae\x19\xd1\x1e\x8d\x40\xa7\xd9\xed\x2c\x9d\x0e\x95\x4a\xd4\x62\x05\x70\x09\x4a\x2c\xfe\x0c\x17\xa7\xdc\xb0\xaf\x87\xa7\x2b\x90\xd5\x35\x68\x2a\xb1\x5d\xae\xef\x05\x53\x0f\xdd\x8f\x92\x2f\xe8\x2a\xda\xfc\xbf\x15\xb5\xec\x39\x86\xdb\x36\xff\xe6\x8b\xbf\xdf\x54\x77\xd8\x83\x6a\x8c\xcd\x6a\xb9\x2a\xb1\x95\xa0\x6d\xcb\xe2\x38\xee\x58\x60\x97\xbf\x81\x6b\xa7\x49\x9b\x13\xde\x98\xbc\xcf\x8c\x86\x9c\xcf\x33\xb1\x50\x95\x3e\xf6\xfb\x84\x9e\xf9\x64\x97\xf5\x31\xc5\x68\xdf\x57\x9c\x85\x9d\x6d\x16\xf5\xf7\x4e\xcd\xcf\xa5\x47\xd7\xfc\xd7\xa8\x78\x0f\x00\x00\xff\xff\x82\x42\x75\xa4\x08\x02\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 520, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0x69, 0xc5, 0xf1, 0xe, 0xc, 0x77, 0xe5, 0x78, 0xce, 0xfc, 0xc2, 0x41, 0xf8, 0x21, 0x87, 0x8a, 0xb7, 0x67, 0xdd, 0x48, 0x94, 0x63, 0x79, 0x69, 0x4e, 0x38, 0x53, 0x3c, 0xdb, 0xc7, 0x13}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/metrics/cluster-role-binding.yaml": assetsDnsMetricsClusterRoleBindingYaml,

	"assets/dns/metrics/cluster-role.yaml": assetsDnsMetricsClusterRoleYaml,

	"assets/dns/metrics/role-binding.yaml": assetsDnsMetricsRoleBindingYaml,

	"assets/dns/metrics/role.yaml": assetsDnsMetricsRoleYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"metrics": {nil, map[string]*bintree{
				"cluster-role-binding.yaml": {assetsDnsMetricsClusterRoleBindingYaml, map[string]*bintree{}},
				"cluster-role.yaml":         {assetsDnsMetricsClusterRoleYaml, map[string]*bintree{}},
				"role-binding.yaml":         {assetsDnsMetricsRoleBindingYaml, map[string]*bintree{}},
				"role.yaml":                 {assetsDnsMetricsRoleYaml, map[string]*bintree{}},
			}},
			"namespace.yaml":       {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml": {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":         {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
