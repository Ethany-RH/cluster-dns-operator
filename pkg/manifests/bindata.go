// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/dns/cluster-role-binding.yaml (223B)
// assets/dns/cluster-role.yaml (210B)
// assets/dns/configmap.yaml (390B)
// assets/dns/daemonset.yaml (4.294kB)
// assets/dns/namespace.yaml (189B)
// assets/dns/service-account.yaml (85B)
// assets/dns/service.yaml (306B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x8e\x83\x40\x0c\x05\xd0\x7e\x4e\xe1\x0b\xc0\x6a\xbb\xd5\x74\x9b\xdc\x80\x48\xe9\xcd\x8c\x09\x0e\x60\xa3\xb1\x87\x22\xa7\x8f\x10\x4a\x45\x3a\x17\xfe\xff\xfd\x89\x25\x47\xb8\xce\xd5\x9c\x4a\xa7\x33\x5d\x58\x32\xcb\x23\xe0\xca\x77\x2a\xc6\x2a\x11\x4a\x8f\xa9\xc5\xea\xa3\x16\x7e\xa1\xb3\x4a\x3b\xfd\x59\xcb\xfa\xb3\xfd\x86\x85\x1c\x33\x3a\xc6\x00\x00\x20\xb8\x50\x04\x5d\x49\x6c\xe4\xc1\x9b\x2c\x16\xac\xf6\x4f\x4a\x6e\x31\x34\x70\x78\x37\x2a\x1b\x27\xfa\x4f\x49\xab\x78\xf8\xc4\xf6\xe7\xe3\xb6\x15\xd3\xa9\xa7\xe8\x4c\x1d\x0d\x3b\x74\x9a\x1d\xbe\xd3\xef\x00\x00\x00\xff\xff\xfa\x62\xe7\x50\xdf\x00\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xf6, 0x2a, 0x3b, 0x84, 0xd7, 0x3e, 0xc4, 0xe1, 0x70, 0x66, 0x31, 0xda, 0xc4, 0x2f, 0x53, 0x27, 0x29, 0x13, 0xfe, 0x80, 0x36, 0xc5, 0xa1, 0x70, 0xdc, 0x2d, 0xef, 0xcf, 0xe0, 0xc4, 0xeb}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\xbd\x6e\xc5\x30\x08\x46\x77\x3f\x05\xba\x7b\x52\x75\xab\xbc\x76\xe8\xde\xa1\x3b\xd7\xa6\x0a\x8a\x03\x16\xe0\x54\xea\xd3\x5f\xe5\x67\x3b\xe7\x08\xf4\xad\x2c\x35\xc3\x67\x1b\x1e\x64\xdf\xda\x28\x61\xe7\x1f\x32\x67\x95\x0c\xf6\xc4\x32\xe3\x88\x45\x8d\xff\x31\x58\x65\x5e\x3f\x7c\x66\x7d\xdb\xdf\xd3\x46\x81\x15\x03\x73\x02\x10\xdc\x28\x83\x76\x12\x5f\xf8\x37\xa6\x2a\x9e\x6c\x34\xf2\x9c\x26\xc0\xce\x5f\xa6\xa3\xfb\x71\x39\xc1\xe3\x91\x00\x8c\x5c\x87\x15\xba\x1b\x49\xed\xca\x12\x7e\x9a\x93\xed\x5c\xe8\x92\xae\xf5\x82\x63\xc3\x3b\x5e\x7d\x27\x7b\xde\xbf\x8d\x3d\x4e\xf8\xc3\x28\x4b\x7a\x05\x00\x00\xff\xff\xcb\xdd\xd7\x2a\xd2\x00\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 210, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xb2, 0x0, 0x7d, 0x4a, 0xd9, 0xf, 0x8, 0x44, 0xe7, 0xab, 0x82, 0xe4, 0x50, 0x94, 0xaa, 0x4e, 0xfd, 0xa0, 0x63, 0xba, 0x18, 0xcf, 0xeb, 0xa6, 0xe4, 0x2d, 0x4, 0x35, 0xd5, 0xc7, 0xd}}
	return a, nil
}

var _assetsDnsConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\x4f\x4b\x33\x31\x18\xc4\xef\xfb\x29\x06\xde\xf3\xbb\xb5\x2c\x2b\xb8\xd7\x9e\xbd\x7a\x7f\x4c\x66\x9b\xd0\x6c\x12\x9e\x24\x45\x51\xbf\xbb\xb4\x85\x68\xc1\x39\xcd\x3f\x7e\x27\x1f\xed\x82\x43\x8a\xab\x3f\x3e\x4b\x1e\x24\xfb\x17\x6a\xf1\x29\x2e\x38\xef\x87\x7f\x88\xb2\x11\x12\xed\xd5\x94\x2c\x86\x10\x25\x0a\x2b\xa4\x42\x5b\xac\x7e\xe3\x60\xa5\xca\x32\x00\x87\xa4\x5c\x7d\xe0\x82\xcf\x01\x00\xc6\x65\x9e\xe6\x09\x1f\xd7\x70\x11\x55\x93\x96\x1e\x1d\x25\x54\xd7\xe3\xa9\xbd\x52\x23\x2b\x0b\x4c\x68\xa5\x52\xc7\x90\x8c\x04\xf8\xf8\x5f\xac\xd5\x51\x34\x0b\x7c\x7e\xbc\x99\x1f\xec\x45\x39\xd9\x02\x1f\x0b\x4d\x53\xde\x2d\x2d\x97\xaa\x94\xed\xae\x5c\x25\x84\xea\x34\xb5\xa3\xfb\x1b\xdf\xdf\x5f\xdd\x65\x4d\x1b\xab\x63\x2b\x58\x9e\xf6\xf3\xf4\x7b\x78\x7b\xc7\x88\x1d\xab\xd9\x29\x4b\x0a\xe7\xd1\xa4\xb8\xf6\x83\x11\xe3\x88\xe9\xa1\x17\xca\x90\xc4\x0e\x37\xfe\x77\x00\x00\x00\xff\xff\xef\xe8\x25\x0a\x86\x01\x00\x00")

func assetsDnsConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsConfigmapYaml,
		"assets/dns/configmap.yaml",
	)
}

func assetsDnsConfigmapYaml() (*asset, error) {
	bytes, err := assetsDnsConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/configmap.yaml", size: 390, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0x35, 0x3d, 0x20, 0x71, 0xe4, 0x2d, 0x28, 0xd6, 0xac, 0xd6, 0xef, 0x59, 0x0, 0x1, 0x68, 0xee, 0x6, 0x5b, 0xde, 0x33, 0x4d, 0xdf, 0xf1, 0x31, 0xbd, 0x16, 0xd1, 0xfc, 0xec, 0x7e, 0x62}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5f\x6f\xe3\xb8\x11\x7f\xf7\xa7\x98\x93\x83\xcd\x2e\x1a\x25\x4e\x0f\x7b\xbd\x6a\x37\xd7\x4b\x13\xa7\x1b\xf4\x9c\x18\xb1\xf7\xfa\x10\x04\x0b\x9a\x1a\x59\xd3\x50\x24\x8f\xa4\xe4\x35\xb2\xf9\xee\x05\xa5\xc8\xa6\x64\x37\x8b\x02\xcd\x43\x6c\x73\x86\x3f\xce\xbf\xdf\x70\xf8\x48\x32\x4d\xe0\x92\x61\xa1\xe4\x0c\xdd\x80\x69\xfa\x1d\x8d\x25\x25\x13\x60\x5a\xdb\x93\xea\x74\x30\x04\xc9\x0a\x3c\xaa\xff\x5b\xcd\x38\x02\x93\x29\x08\xb6\x40\x61\x81\x19\x04\x8b\x0e\x98\x03\x53\x4a\x47\x05\x0e\xac\x46\x9e\x0c\x00\x1c\x16\x5a\x30\x87\xfe\x3b\x40\xbb\x5a\x7f\x47\x53\x11\xc7\x73\xce\x55\x29\xdd\x0d\x2b\x30\x81\x54\xda\x17\xa9\x36\xa4\x0c\xb9\xf5\x85\x60\xd6\x36\x42\xbb\xb6\x0e\x8b\x58\xaa\x14\x63\x6e\xc8\x11\x67\xe2\x45\x9b\x2b\xe9\x18\x49\x34\xb6\x45\x8f\x6b\x4b\x43\x44\x80\x21\x50\xc1\x96\x08\x64\xfb\xd6\xb6\x1a\xb5\x7c\x5a\x0a\x31\x55\x82\xf8\x3a\x81\xeb\xec\x46\xb9\xa9\x41\x8b\xd2\x6d\xb4\xb8\x2a\x0a\xe6\x43\x76\x0f\x11\x57\x06\x53\x69\x23\x78\xd8\x88\x99\x59\xda\x5a\x16\x73\x25\xb3\xe8\x08\xa2\x13\x74\xfc\xe4\x45\xf3\xe4\x42\x19\xcc\x48\x60\xb8\xa5\x52\xa2\x2c\x70\xe2\x03\xb1\xf1\x60\xeb\x83\x87\xa1\x65\xdc\x28\x6d\xa4\x00\x85\xd7\x9f\x32\x97\x27\x10\x9e\x10\x68\x18\x64\xe9\xad\x14\xeb\x04\x9c\x29\xb7\x5b\xb5\x32\xdd\x73\x36\xf1\x9b\x2a\xe3\x12\x78\xff\xe3\xfb\x1f\x03\x94\xdd\x48\xfa\xfc\x28\xa7\xb8\x12\x09\x7c\xbe\x9c\xfe\xef\x48\xb1\xe3\x7a\x2f\xda\xfc\xe2\x15\xb4\xbf\x9e\xee\x41\x2b\xd0\x19\xe2\xfb\x6d\x0b\xd1\x04\x55\x28\xd1\xda\xa9\x51\x0b\x4c\x02\xf5\xdc\x39\xfd\x0f\x74\xe1\x12\x80\x6e\xc2\x9a\x23\x13\x2e\xef\x4a\x6a\x53\x7e\x1e\xfd\x3c\xea\x2c\x5b\x9e\xa3\x37\xe7\xd3\x7c\x3e\x0d\x04\x24\xc9\x11\x13\x97\x28\xd8\x7a\x86\x5c\xc9\xd4\x26\xf0\x53\xb8\xd5\x17\xa0\x2a\xdd\x46\xf8\x3e\x90\xd9\x92\x73\xb4\x76\x9e\x1b\xb4\xb9\x12\x69\x02\xa7\x81\x34\x63\x24\x4a\x83\x81\x74\xbb\xd7\xa0\x55\xa5\xe1\x68\x43\xb7\x04\x15\xe4\x6c\xd7\xd1\x02\x0b\x65\xd6\x09\xbc\x3f\xfd\xf3\x84\x3a\xa5\xf3\x47\x89\xb6\xaf\xcd\x75\x99\xc0\xe9\x68\x54\xec\xc5\xf8\xcb\x68\x03\x11\xf0\xaf\x61\xac\x37\x48\x54\x68\xfe\xef\x6c\xb4\xc8\xcb\xba\x53\x28\xe9\xf0\x6b\x27\x8d\xda\x50\x45\x02\x97\x98\xf6\x08\xf0\x3a\xdf\x72\x65\x9d\x8d\x3d\x47\x5f\x21\x5b\xad\x14\x38\x83\xb2\x82\x9b\xf3\xc9\x78\x36\xbe\xfb\x7d\x7c\x57\x77\xc7\x8b\xdf\x3e\xcf\xe6\xe3\xbb\x2f\x97\xb7\x93\xf3\xeb\x9b\x7d\x5d\xb2\xdd\x8e\xb2\xda\x35\xc3\x23\x5d\x5f\x8c\x67\x81\x11\x43\xb8\xf0\xbd\x07\x94\x81\xa6\x09\x5b\xd4\xcc\x30\x87\x29\x08\xb2\x0e\x54\xd6\xb6\x55\xdb\xd9\x75\x73\x3b\x1f\x27\x70\xa5\x0c\x48\xb5\x3a\x02\x94\xb6\x34\x08\x2e\x47\x8b\xb5\x59\x06\x05\x73\x54\x61\xd3\xde\x3f\x40\xa6\x0c\x20\xe3\x79\x57\x70\xd4\xc1\x64\x12\x98\x20\x66\x61\x45\x2e\xf7\x58\x7d\x7f\x6d\x99\x65\xf4\x15\x56\x24\x04\x30\x61\x15\x2c\x10\x58\x9a\x62\x7a\x1c\xe0\x54\x4c\x94\x98\x40\x54\xe7\x3a\x36\xb8\x24\xeb\xcc\xfa\x58\x69\x94\x36\xa7\xcc\xc5\x3d\x81\xad\x78\xb4\xd3\x88\x83\xd0\x9d\x2c\x48\x9e\x2c\x98\xcd\x83\xb5\x98\x07\x3f\xbe\x85\x4e\xfc\xb0\xab\x0e\x75\x8e\xe2\x52\x81\x26\x8d\x9e\x62\x83\x90\xac\x86\x69\x38\x7c\xf4\x2e\x1d\xbc\xfd\xb7\x5a\x58\x88\xf5\xbb\x0f\x80\x5f\xc9\xc1\xe8\x10\xe6\xe3\xbb\x49\xa8\x7e\x3b\x1d\xdf\xcc\x3e\x5d\x5f\xcd\xbf\x4c\xce\xef\xfe\x39\xbe\x3b\x8b\xb6\x8e\x2d\x51\x62\x9d\xba\x2e\x3f\xa2\x60\xfb\xa7\xdb\xd9\x7c\xf6\xe5\xea\xfa\xb7\xf1\x59\xb4\x2d\xba\x50\x63\x3e\x9e\x4c\x77\x14\x8e\x5d\xa1\xa3\xd0\x8c\xeb\xab\xd9\xd9\xe1\x11\x1c\xd6\xf7\x01\xc4\x06\x62\xb6\xa9\x13\xf8\xf8\xf1\x23\x44\x07\x4f\x6d\xb5\x3d\x77\x76\x0e\x61\xc2\x1e\x11\x58\x7d\x8f\x2b\xc3\xcc\x1a\x3c\x2f\xb6\x39\x57\x22\x6d\xf8\x52\xaf\x1f\x5a\x60\xce\x19\x5a\x94\x0e\x6d\x98\x66\xae\x21\xce\x20\x8e\xb7\xd2\x58\x49\xb1\xf6\x07\x6f\x9d\x7c\x8e\xfc\xef\x8d\x4b\x5d\x4b\x56\xb9\x3f\xd7\xb3\xf8\x03\xa4\xaa\xd3\x7e\x52\xe4\xc2\x57\x71\x7c\x0e\xb6\xe2\x5f\x48\xdb\x8e\xd8\x17\xb3\xad\x38\x90\xf4\xf0\xad\xdf\xf7\xbf\x3e\x3c\x47\x3b\x50\xde\xe3\x2b\x74\x3c\x6f\xe3\x03\xd7\x53\xc8\x8c\x2a\x7c\x23\x03\xca\x40\xf7\xba\x4f\xf3\x47\xda\x9e\xbd\x3d\x78\x9b\xd2\x12\x7e\x8d\x0e\x9e\xb6\x7d\xe0\x39\x82\x3f\xd9\x5c\x19\x57\x1f\x5d\xf1\xe7\xe3\x83\xa7\x2e\x4d\x9e\xa3\x77\xef\x06\x7d\xb8\x0c\xee\xef\x21\x3a\xf8\x5b\x04\x31\xfe\x01\x23\x78\xf3\xc6\xef\x1f\x92\x6e\xcc\x86\x58\x22\x8c\xe0\xe1\xe1\x83\xcf\x81\xec\xed\x86\x36\x0a\xf7\x2f\x67\x46\x0f\x67\xd1\xc1\x53\xbb\xb9\xa7\x9d\x51\x37\x96\x4a\x62\xd7\x9c\x21\x7c\xd6\x29\x73\x18\xb4\x3d\xa8\x73\x47\x19\xac\x10\x96\xe8\x3c\x89\x29\x0d\x22\x66\x7b\x00\xff\xc2\xa6\x0b\x48\xe5\xa0\xdc\x01\x5b\xe5\x28\xbd\x1f\xa6\xbe\x0b\x5e\x86\x98\x0d\x9a\x2a\x9d\xbf\x25\x94\x01\xa6\x09\x4a\xc9\x2a\x46\x82\x2d\x48\x90\x5b\xf7\x8e\x99\x39\x26\x10\x50\x3a\x43\xe8\x81\x4a\x91\x7a\x66\x5a\xe7\x53\x1f\x1c\x48\x59\x5d\xba\xed\x09\x64\x21\x45\x81\x0e\xd3\xc1\xbe\x24\x3c\x0d\xdb\x70\x7e\x3f\xf4\x43\xf8\x7b\x49\x22\x05\x06\x12\x57\x01\x2f\x9a\x12\x0a\x7d\xf6\xfc\x51\xa5\x01\x5e\x5a\xa7\x8a\x8d\xd1\x19\x09\x87\x06\x53\xef\x76\x0f\x7b\x69\x50\x43\x5c\x41\x34\x84\x83\xa7\x7e\x63\x69\xa8\xd3\xa1\xd2\x2f\xaf\x90\xa9\xb1\xf5\x5c\x6b\x94\x29\xb4\x9d\x67\x6b\x84\x27\xcc\xee\x35\x02\x3b\x5c\xfa\x21\x8c\xcc\x1e\x2e\x35\xfa\xa4\xbd\x7a\x5d\x8a\xb5\x72\x53\x94\x0f\xcf\x7b\x37\x00\x20\xcf\x15\xd4\xf5\xfa\xdc\x6c\x6a\x3f\x76\xa9\x03\xff\x25\x14\xbf\xec\xf8\xde\x3f\xa4\x2e\xf3\x3d\x4b\x3b\x31\x9a\xdf\x5e\xde\x26\x7b\x18\xc0\x9c\x2a\xfc\x03\x44\xac\xc1\x29\x60\x95\xa2\x14\x98\x5c\x03\x49\xae\xa4\x25\xeb\x50\x3a\x58\x60\xce\x2a\x52\x66\x07\xf5\x0e\xb5\xf0\xd7\xf7\xbe\x8a\x28\x54\x4a\x19\x61\x0a\x55\xf3\x06\xf3\x85\x28\x11\xd3\x5e\x79\x02\xf0\x42\xf7\xdc\xdc\xa9\x81\x6f\xdf\x5e\x3a\xef\xeb\x7a\xbb\x5e\xb7\xba\x9e\x1c\x9e\xb5\x06\x0b\x55\x61\xba\xf5\xb5\xae\x6a\x6e\x90\x39\x3c\x69\xd8\x53\x8f\x3c\xdb\xfe\x0e\x5c\xe9\x35\xf0\xbc\x34\x5d\x92\xf4\xfa\x8d\x15\x88\x1a\x7e\x1a\xc1\x1b\x58\x31\xea\xd6\x7c\x29\xfd\x55\xbc\xdb\xd2\x3b\xc9\xdb\x3b\xe8\xbe\x3a\xbc\xb6\xb3\x6b\x2a\x6d\x3b\x58\x5e\x62\xc6\x4a\xd1\x9e\xee\xef\xe3\x19\x0a\xe4\x4e\x99\x2d\xc2\x02\x1d\x3b\x7e\x2c\x17\x68\x24\xfa\xdb\x8d\xd4\x89\xb2\x09\x08\x92\xe5\xd7\x46\xe3\x45\xb5\x19\x2e\xb7\x67\x7f\xe7\x19\xd7\x2c\x4f\x98\x0e\x8c\x1d\x82\x7f\xf2\xbe\x32\x1a\xfb\xfe\xe4\xb0\xe8\x3a\x18\xc3\x23\xae\x13\x68\x1f\x98\xdd\xac\x36\x0f\x9a\xbe\xec\xb5\x91\xd7\xaf\xd5\x03\xef\x60\x07\x66\xcf\x04\xec\x87\xa3\xb5\xc6\x04\xae\xb6\x20\x4e\x09\x3f\xe2\x90\x92\x1b\x43\x87\xed\x22\x02\x13\x02\xfc\xeb\xce\x59\xb0\x0a\x5c\xce\x1c\x5c\xde\xcc\xbc\xd3\x4c\xac\xd8\xda\xb6\x77\x2d\x28\x59\xeb\xfa\xb4\xd8\xcd\xf3\x42\x69\x8f\xa2\x4c\x02\x63\xdf\xe2\xed\xe0\x3f\x01\x00\x00\xff\xff\xf1\x2d\x6f\xca\xc6\x10\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 4294, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0xc8, 0x15, 0xff, 0xb9, 0x1d, 0xc0, 0x67, 0x58, 0x7f, 0xf4, 0x37, 0x77, 0xc0, 0x31, 0xfc, 0x43, 0x4f, 0x4e, 0x11, 0xe, 0x5f, 0x28, 0x26, 0xf2, 0x1d, 0xf9, 0x73, 0x8a, 0xed, 0xd0, 0xa9}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x3b\x8e\xc3\x30\x0c\x44\x7b\x9d\x62\xe0\xad\xbd\x9f\x56\x87\xd8\x32\x3d\x1d\x4d\x62\xc2\x12\x25\x98\xb2\xce\x1f\x38\x08\xdc\xce\x1b\xbc\xb7\xa9\xa5\x88\x7f\x29\xf4\x26\x77\x06\x69\x7a\xe3\xee\x5a\x2d\x62\xfc\x85\xc2\x2e\x49\xba\xc4\x00\x98\x14\x46\xd4\x46\xf3\x55\x1f\x7d\x4e\xe6\x01\xc8\xb2\x30\xfb\xc9\x81\x2f\x38\x3b\x86\xe4\x83\xe8\x15\x32\xaa\x26\x24\x36\x5a\x52\x7b\xa2\x1a\xb6\x63\x21\x24\x15\xf5\x33\x81\xbe\x4a\xff\x1c\xfc\xc4\x97\x1c\xd2\xd4\xdf\xce\x6b\xfa\xd6\xfa\xb3\x1f\x36\x67\x0e\xe6\x88\xe9\x77\x0a\xaf\x00\x00\x00\xff\xff\x90\x81\x4e\xed\xbd\x00\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 189, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc7, 0xcc, 0xc6, 0xb2, 0x81, 0xa0, 0x7d, 0xc5, 0x5b, 0x8f, 0xf3, 0xd1, 0xf1, 0xee, 0x65, 0x3d, 0x0, 0x7c, 0x93, 0x89, 0x1c, 0x38, 0xd0, 0x9, 0x86, 0x1a, 0xd6, 0xef, 0x5, 0xee, 0x70, 0xe8}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x09\xc4\x30\x0c\x05\xd0\xde\x53\x68\x81\x2b\xae\x55\x77\x33\x1c\xa4\x17\xf2\x0f\x11\xc1\xb2\xb1\x14\xcf\x1f\x02\xe9\x1e\xbc\xd3\xbc\x32\xfd\x31\x97\x29\x7e\xaa\xfd\xf2\x2c\x32\x6c\xc3\x0c\xeb\xce\xb4\xbe\xa5\x21\xa5\x4a\x0a\x17\x22\x97\x06\xa6\xea\xf1\x3a\x86\x28\x98\xfa\x80\xc7\x61\x7b\x7e\x9e\xba\x03\x00\x00\xff\xff\x8e\x2c\xf1\x2e\x55\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 85, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x12, 0x50, 0x4d, 0x67, 0x2f, 0x1b, 0x74, 0xa0, 0xa4, 0xbb, 0xa7, 0x59, 0xe9, 0x5a, 0xc6, 0xc1, 0x1a, 0xf8, 0x5f, 0xff, 0x5, 0xdb, 0xc, 0x10, 0x8b, 0xc1, 0x0, 0xcc, 0xf, 0x9f, 0x3a}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xce\x3d\x4b\x04\x41\x0c\xc6\xf1\x7e\x3e\xc5\x03\xd7\x7a\x82\x88\xcd\xb4\xda\xd8\x2d\xf8\xd2\xe7\x66\xc3\x11\xcc\xbc\x90\x64\x4f\xfc\xf6\xe2\x08\x2b\xda\xd8\x0c\x4c\xf2\xe7\x47\xde\xa4\xad\x19\x4f\x6c\x17\x29\x9c\x68\xc8\x2b\x9b\x4b\x6f\x19\x97\x9b\x74\x40\xa3\xca\x57\xf3\xf5\x41\x85\x41\x6d\x85\xd2\x89\xd5\x41\xc6\x70\x0e\x50\xc0\xb6\x16\x52\x39\xf9\xe0\x92\x13\x70\x40\xd1\xcd\x83\xed\x71\xc1\xbb\xa8\xe2\xc4\xa0\x2d\x7a\xa5\x90\x42\xaa\x1f\xa8\xd4\xe8\xcc\xeb\xf5\x8c\x9d\x95\x4b\x74\x83\xf8\x5f\x11\x18\xdd\xc2\xbf\xd0\xe3\x3c\x23\x63\x6d\x9e\x80\xef\x45\xc6\xdd\xed\xfc\x04\xd9\x99\x63\x99\xa3\x3d\xb0\x1e\xbd\x74\xcd\x78\x79\x58\x7e\x03\xc7\x28\xe3\x5f\xe4\x27\xda\xa1\xe7\xfb\x25\x7d\x06\x00\x00\xff\xff\x23\x09\xe5\xe7\x32\x01\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 306, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9e, 0x93, 0x4, 0xf3, 0xfa, 0x9, 0xf9, 0x4b, 0x62, 0xe1, 0xad, 0x9d, 0x3b, 0x6c, 0x45, 0x65, 0xbf, 0x2b, 0x4, 0x5c, 0xce, 0x83, 0x2c, 0x7e, 0xa7, 0x49, 0xcd, 0x13, 0x69, 0x2a, 0x54, 0x70}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/configmap.yaml": assetsDnsConfigmapYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"configmap.yaml":            {assetsDnsConfigmapYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml":            {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml":      {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":              {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
