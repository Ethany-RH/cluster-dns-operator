// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/dns/cluster-role-binding.yaml (223B)
// assets/dns/cluster-role.yaml (397B)
// assets/dns/daemonset.yaml (6.292kB)
// assets/dns/metrics/cluster-role-binding.yaml (279B)
// assets/dns/metrics/cluster-role.yaml (246B)
// assets/dns/metrics/role-binding.yaml (293B)
// assets/dns/metrics/role.yaml (284B)
// assets/dns/namespace.yaml (369B)
// assets/dns/service-account.yaml (85B)
// assets/dns/service.yaml (520B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x8e\x83\x40\x0c\x05\xd0\x7e\x4e\xe1\x0b\xc0\x6a\xbb\xd5\x74\x9b\xdc\x80\x48\xe9\xcd\x8c\x09\x0e\x60\xa3\xb1\x87\x22\xa7\x8f\x10\x4a\x45\x3a\x17\xfe\xff\xfd\x89\x25\x47\xb8\xce\xd5\x9c\x4a\xa7\x33\x5d\x58\x32\xcb\x23\xe0\xca\x77\x2a\xc6\x2a\x11\x4a\x8f\xa9\xc5\xea\xa3\x16\x7e\xa1\xb3\x4a\x3b\xfd\x59\xcb\xfa\xb3\xfd\x86\x85\x1c\x33\x3a\xc6\x00\x00\x20\xb8\x50\x04\x5d\x49\x6c\xe4\xc1\x9b\x2c\x16\xac\xf6\x4f\x4a\x6e\x31\x34\x70\x78\x37\x2a\x1b\x27\xfa\x4f\x49\xab\x78\xf8\xc4\xf6\xe7\xe3\xb6\x15\xd3\xa9\xa7\xe8\x4c\x1d\x0d\x3b\x74\x9a\x1d\xbe\xd3\xef\x00\x00\x00\xff\xff\xfa\x62\xe7\x50\xdf\x00\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xf6, 0x2a, 0x3b, 0x84, 0xd7, 0x3e, 0xc4, 0xe1, 0x70, 0x66, 0x31, 0xda, 0xc4, 0x2f, 0x53, 0x27, 0x29, 0x13, 0xfe, 0x80, 0x36, 0xc5, 0xa1, 0x70, 0xdc, 0x2d, 0xef, 0xcf, 0xe0, 0xc4, 0xeb}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\x85\x75\xfd\x05\xd1\xa1\xb4\x14\xf4\x14\xf4\x1b\x67\x50\x96\xe4\x76\xad\xdd\x75\x4e\xe2\xeb\x51\x2e\x57\xa0\x8b\xa0\x9b\x19\xd9\xf3\x3c\x9e\x59\xc6\x3e\xbf\x2e\xcd\x03\xf6\xae\x0b\x12\x55\xfe\x80\x39\xab\xf4\xd9\x06\x2a\x1d\xb5\x98\xd4\xf8\x9b\x82\x55\xba\xf9\xc5\x3b\xd6\xa7\xf5\x39\x5d\x10\x34\x52\x50\x9f\x72\x16\xba\xa0\xcf\x5a\x21\x3e\xf1\x67\x9c\x47\xf1\x64\x6d\x81\xf7\xe9\x9c\xa9\xf2\x9b\x69\xab\xbe\x9d\x3c\xe7\xd3\x29\xe5\x6c\x70\x6d\x56\x70\xcf\x20\x63\x55\x96\xf0\x9b\x73\xd8\xca\x05\xbb\xa9\x3a\xee\x62\x63\x78\xa5\x3d\x5f\x61\xc3\xfd\xee\xc2\x1e\x37\x71\xa5\x28\x53\x3a\x02\xb7\x01\x90\xe0\xf2\x7b\xc1\xf1\x0d\xa1\x33\xc4\xb0\x32\xae\x0f\x84\x62\xa0\xc0\x1f\xcd\x8f\x5f\x73\x2c\xf6\x36\x7c\xa1\x04\x95\x02\xf7\xff\x00\x3f\x01\x00\x00\xff\xff\x76\x1b\x55\x2e\x8d\x01\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 397, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0xae, 0xd1, 0xba, 0xfa, 0x6b, 0xf8, 0x6e, 0x8d, 0x28, 0xc2, 0xa7, 0xaf, 0xc9, 0x3b, 0xc7, 0xcd, 0x80, 0xbe, 0xec, 0x98, 0xb4, 0x61, 0xa0, 0x9, 0xae, 0xa, 0xd8, 0xb2, 0x2e, 0x16, 0xf2}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xff\x53\x1b\xb7\x12\xff\x9d\xbf\x62\x73\xf0\x42\xd2\x72\x60\x92\x90\xe6\x5d\x42\x5f\x5d\x30\x85\x69\x00\x0f\x76\x9a\x1f\x18\x86\x91\x75\x6b\x9f\x9e\x75\x92\x2a\xe9\x0e\x3c\xe0\xff\xfd\xcd\xde\xf9\xcb\x9d\xcf\xd0\xa6\x6f\x3a\xd3\xfc\xe0\xd8\xda\xdd\x8f\x76\x57\xfb\x4d\x62\x2c\x54\x1c\xc1\x31\xc3\x54\xab\x1e\xfa\x0d\x66\xc4\x6f\x68\x9d\xd0\x2a\x02\x66\x8c\xdb\xcb\xf7\x37\x36\x41\xb1\x14\x77\x8a\x4f\x67\x18\x47\x60\x2a\x06\xc9\x06\x28\x1d\x30\x8b\xe0\xd0\x03\xf3\x60\x33\xe5\x45\x8a\x1b\xce\x20\x8f\x36\x00\x3c\xa6\x46\x32\x8f\xf4\x1d\x60\xbe\x5a\x7c\x47\x9b\x0b\x8e\x6d\xce\x75\xa6\xfc\x05\x4b\x31\x82\x58\xb9\x19\xd5\x58\xa1\xad\xf0\x93\x23\xc9\x9c\x2b\x89\x6e\xe2\x3c\xa6\xa1\xd2\x31\x86\xdc\x0a\x2f\x38\x93\x33\x6e\xae\x95\x67\x42\xa1\x75\x73\xf4\xb0\xd0\xb4\x8a\x08\xb0\x09\x22\x65\x23\x04\xe1\x56\xb5\x9d\x73\x14\xf4\x6e\x26\x65\x57\x4b\xc1\x27\x11\x9c\x0d\x2f\xb4\xef\x5a\x74\xa8\xfc\x82\xcb\xa3\x4d\x85\x62\x5e\x68\x75\x8e\xce\x91\xc8\x8c\xfd\x84\x49\x39\x60\x7c\xdc\xd7\x9f\xf5\xc8\x5d\xaa\x8e\xb5\xda\x2e\xe4\xb8\x4e\x53\x46\xae\xbe\x86\x80\x6b\x8b\xb1\x72\x01\xdc\x2c\xc8\xcc\x8e\x5c\x41\x0b\xb9\x56\xc3\x60\x07\x82\x3d\xf4\x7c\x6f\xc6\xb9\x77\xa4\x2d\x0e\x85\xc4\xaa\x48\xae\x65\x96\xe2\x39\x39\x70\x61\xf9\xd2\x76\x82\x11\xa3\xb0\x64\x5a\x50\x01\x52\xe2\xef\x32\x9f\x44\x50\xdd\xa1\xc2\x61\x91\xc5\x97\x4a\x4e\x22\xf0\x36\x5b\x8a\x1a\x6d\xeb\xfb\x2c\xfc\xde\xd5\xd6\x47\x70\xf0\xf6\xe0\x6d\x05\xa5\x79\x02\x74\xae\xda\x6b\xae\x65\x04\x5f\x8e\xbb\xdf\x8e\x14\x7a\x6e\xd6\xa2\xf5\x8f\x96\x68\xa4\xbd\x50\xe8\x5c\xd7\xea\x01\x46\x15\xfe\xc4\x7b\xf3\x0b\xfa\xea\x12\x80\x29\x3d\x91\x20\x93\x3e\xa9\x53\x0a\x5d\x3e\xb4\x3e\xb4\x6a\xcb\x8e\x27\x48\xfa\x9c\xf6\xfb\xdd\x0a\x41\x28\xe1\x05\x93\xc7\x28\xd9\xa4\x87\x5c\xab\xd8\x45\xb0\x5f\x15\x35\x68\x85\x8e\xd7\xd3\x5c\xc6\x39\x3a\xd7\x4f\x2c\xba\x44\xcb\x38\x82\xfd\x0a\x75\xc8\x84\xcc\x2c\x56\xa8\x55\xf7\x50\x0c\xeb\xcc\xaf\x03\x96\x22\xc7\x7f\x88\x2b\xde\xb7\x9e\x51\xf9\xe0\xff\x70\xc5\x41\xe5\xe4\x9d\xce\x2c\x47\x17\xd5\x82\xf9\xf7\x0c\x9d\x77\x75\x53\xb9\xc9\x22\x38\x68\xa5\xb5\xc5\x14\x53\x6d\x27\x11\xfc\xd0\x3a\x17\x2b\x85\x64\x9c\x0d\x30\xb4\x03\xc6\x43\x63\xf5\xfd\xe4\x1b\x8a\x4a\x91\xd7\x95\x50\x0f\x43\xa9\x47\x5e\x3b\x1f\xa3\xb5\xb5\x75\x87\x3c\xb3\x18\x4a\xe1\x3c\xaa\x90\xc5\xb1\x45\xe7\x0e\xa3\x7f\xef\x1f\xbc\xab\xf1\x79\xe9\x42\x2e\x4c\x82\x36\x74\x99\xf0\xe8\x0e\xfb\x9f\x7b\xb7\x9d\xa3\xe3\xd3\xce\xed\x55\xaf\x7d\xfb\xf5\xac\x7f\x7a\xdb\xee\xf4\x6e\xf7\xdf\x7c\xb8\xfd\xe5\xe8\xfc\xb6\x77\xda\x7e\x73\xf0\x7e\x67\xc9\xd5\x39\x3a\xfe\x03\xbe\x06\xce\xd1\xcf\x47\x7f\x0a\x67\x2d\xdf\x33\x68\x35\xcb\x32\xe3\xbc\x45\x96\x1e\x52\x78\x46\x7b\x7b\xfb\x6f\x7e\xd8\x6d\xed\xb6\x76\xf7\xc9\x09\x6f\xf7\x9a\x5e\x40\xeb\x43\xaa\x8a\x87\x45\x25\xf3\xd2\xed\x19\x2b\x72\xe6\x91\xbe\xef\x72\xeb\x1b\x22\x33\x7a\x38\xc6\xc9\x33\x92\x63\x9c\xfc\xe9\xb2\x57\x3b\x9f\x79\xb1\x4a\xd1\x5b\xc1\xdd\x5f\x0e\xcd\xfd\x27\x42\xf3\xdd\x32\x34\x9f\xae\xff\xab\x15\xbe\x62\xdd\x53\x8a\x92\x6f\xfe\xa8\x03\x54\x9a\x6a\xd9\x86\xc9\x28\x99\xa3\xfd\xc7\xb4\xd8\x22\x83\x68\x6c\xd0\xca\xe3\x7d\xad\xba\x91\xfd\x42\xe2\x08\xe3\x95\xae\xf6\x7c\x13\x4d\xb4\xf3\xae\x08\x94\x67\x3a\x68\xc1\x54\x71\x02\xaa\x1c\x2e\xda\xe7\x9d\x5e\xe7\xea\xb7\xce\x55\x31\x2a\x1d\x7d\xfe\xd2\xeb\x77\xae\x6e\x8f\x2f\xcf\xdb\x67\x17\xeb\x46\xa6\xb9\x38\xaa\xbc\xa9\x06\x21\x9d\x1d\x75\x7a\x15\x25\x36\xe1\x88\x06\x0a\xd0\x16\xca\x89\xcc\xa1\x61\x96\x79\x8c\x81\x2a\x08\xe8\xe1\x7c\xc6\x72\x35\xa9\x8b\xcb\x7e\x27\x82\x13\x6d\x41\xe9\xbb\x1d\x40\xe5\x32\x8b\xe0\x13\x74\x58\xa8\x65\x51\x32\x2f\x72\x2c\x67\xbd\x8f\x30\xd4\x16\x90\xf1\xa4\x4e\xd8\xa9\x61\x32\x05\x4c\x0a\xe6\xe0\x4e\xf8\x84\xb0\x56\xed\x75\xd9\x70\x28\xee\xe1\x4e\x48\x09\x4c\x3a\x0d\x03\x04\x16\xc7\x18\xef\x56\x70\x72\x26\x33\x8c\x20\x28\x62\x24\xb4\x38\x12\xce\xdb\xc9\xae\x36\xa8\x5c\x22\x86\x3e\x5c\x21\xb8\x9c\x07\x8d\xe9\xaa\xe2\xba\xbd\x81\x50\x7b\x03\xe6\x92\x6a\x11\xe0\x95\x1f\x8f\x55\x23\x5e\x34\xd9\xa1\x38\xa3\x30\xd3\x60\x84\x41\xea\x3c\x1b\xd5\x1e\x66\x99\x81\xed\xff\xea\x81\x83\xd0\xc0\x23\xdc\x53\xa5\x87\x31\x99\xf8\xf8\x58\xc4\xd8\x47\xb8\x63\xc2\x7f\x04\xbc\x17\x1e\x5a\xdb\xd0\xef\x5c\x9d\x57\x11\x2e\xbb\x9d\x8b\xde\xe9\xd9\x49\xff\xf6\xbc\x7d\xf5\x6b\xe7\xea\x30\x58\xda\x3a\x42\x85\xc5\x69\xd6\x53\x2d\xa8\x88\x9f\x5e\xf6\xfa\xbd\xdb\x93\xb3\xcf\x9d\xc3\x60\x19\x87\x55\x8e\x7e\xe7\xbc\xdb\x60\xd8\xf5\xa9\x09\xaa\x6a\x9c\x9d\xf4\x0e\xb7\x77\x60\xbb\xc8\x7a\x08\x2d\x84\x6c\x11\x3a\xf0\xe9\xd3\x27\x08\xb6\x1e\xe6\x01\x38\xad\x49\x6e\xc2\x39\x1b\x23\xb0\x62\xce\xd7\x96\xd9\x09\x50\xaa\x2c\xc3\x40\xcb\xb8\x4c\xa1\x62\x7d\xdb\x01\xf3\xde\x8a\x41\xe6\xd1\x55\x4f\x9e\x1b\x08\x87\x10\x86\x4b\x6a\xa8\x95\x9c\xd0\xc6\x4b\x23\xa7\x01\xfd\x5e\x98\x54\xd7\xe4\x2e\xa1\x7d\x4b\xa7\xc7\xba\x56\x3a\x63\xe4\x92\x02\x3b\x6c\x83\xcb\xf9\xad\x30\xae\x46\xa6\xf8\x76\x39\x07\xa1\x08\x7e\x6e\xf7\xf5\x4f\x37\xd3\xa0\x01\x45\x16\x9f\xa0\xe7\xc9\xdc\x3f\x70\xd6\x85\xa1\xd5\x29\x70\x99\x39\x8f\x96\x6a\x23\x88\x21\x98\xb2\xa0\xed\xc2\x57\x84\x94\x5c\xe4\x30\x47\xcb\x24\x78\x2b\xd0\x35\x30\xbd\x86\x58\x83\xf0\x11\x9c\x75\xf3\x77\x3b\xf4\xf9\xbe\xf8\x7c\x07\x3a\x47\x4b\xe3\x6d\x51\x45\x68\x7d\xb1\xb2\x0b\xfd\x04\xc1\xdf\x69\x90\x8c\xf2\x5d\xad\x01\x26\xbb\xc9\xc0\x18\x8d\xd4\x93\x14\x95\x9f\xe5\xe8\xaf\x99\x9d\x58\xd0\x8a\x4e\x08\x2d\x5c\x1a\x54\x3d\xcf\xf8\x18\x5e\x5d\xf6\xba\xfb\x6f\x5f\x43\x08\x3e\xd1\x0e\x49\x2f\xa5\x7d\x03\xd8\x65\x86\xfa\x22\x8d\xf1\x20\x35\x8b\x07\x4c\x32\xc5\xd1\xba\x42\x4f\x6a\x6c\xa2\xa8\x25\x8c\x27\x42\x8d\xe0\xf8\xa2\x07\x3e\xb1\x3a\x1b\x25\x85\xea\x2b\x78\x3c\x8d\xdd\xe1\xab\xed\x58\x8c\x20\xf4\xd0\x86\x9f\x82\xad\x87\x65\x01\x9d\x06\xf0\xbd\x4b\x68\x37\x3a\xa0\x9c\x4f\x77\xb7\x1e\xea\xf5\x65\x1a\x6c\xaf\x20\x96\xff\x16\x88\xed\xf6\xdf\x00\x0a\xdf\x7b\x6e\xfe\x1e\x5d\xff\x2a\xf2\xeb\x15\x68\x3a\x7b\x41\xa1\xbd\xf5\xf0\x82\x9c\x7c\xfd\xdd\xcd\x74\x85\xa5\x11\xe2\x00\xc2\xb8\xc3\x57\x5b\xaf\x30\x67\x92\x36\x2b\x04\xc5\xcd\x34\x78\xbd\x0a\x0f\x14\xeb\xd7\xd7\x10\x6c\xfd\x27\x80\x10\x7f\x87\x16\xbc\x7c\x49\x22\x9b\xc2\x94\x29\x04\xa1\x42\x68\xc1\xcd\xcd\x47\xaa\x07\x6a\x8d\xe5\xb3\x9c\xbc\x9e\x59\x15\xdc\x1c\x06\x5b\x0f\x73\xf1\x35\xfc\x03\x8b\x6c\xdc\x58\x1f\x8a\x86\x59\x0a\x37\x1a\x0b\xb5\x95\x4d\xf8\x62\x62\xe6\xb1\xd2\xc4\xa1\x28\x3b\x62\x08\x77\x08\x23\xf4\xd4\x92\x44\x5c\x49\x76\xb7\x02\xf0\x15\xcb\x9e\xa6\xb4\x87\xac\x01\x76\x97\xa0\x22\xb3\x6d\x31\x11\xcd\xee\xd9\x0b\x34\x9d\x79\x9a\x95\xb4\x05\x66\x04\x64\x8a\xe5\x4c\x48\x36\x10\x52\xf8\xc9\xca\x36\x3d\xcf\x24\x02\xaa\xa2\x7a\x00\xd7\x99\x8c\xa9\xa9\x38\x4f\x47\x5b\xd9\x50\x0c\x8b\xaa\x3b\xdf\x41\x38\x88\x51\xa2\xc7\x78\xa3\x79\x66\xa1\x9a\x05\x52\xe1\xfd\xef\x6e\xc2\x69\xf0\xd4\x31\x6d\xc2\xcf\x99\x90\x31\x30\x50\x78\x57\xa9\xe7\x65\xe9\xab\x1a\x4c\xa5\x45\x67\x16\x78\xe6\xbc\x4e\x17\x1a\x0f\x85\xf4\x68\x31\x26\x9b\x57\xb0\x47\x16\x0d\x84\x39\x04\x9b\xb0\xf5\xb0\xda\x10\xcb\x92\x5f\x6b\x01\x3f\x3e\xd3\x04\x4a\x5d\xdb\xc6\x60\x51\x83\xca\x8e\xb9\x54\x82\x0a\x7d\x73\x22\x82\x46\x0f\x78\x31\x77\xca\x13\x3d\x60\x96\x56\xa6\xcc\xab\x39\x73\x19\xbe\x37\xd3\xb5\x02\x00\xc8\x13\x0d\x45\x64\x4f\x4b\xa1\xf9\x7f\xcd\x34\x86\x27\x5c\xf1\x63\xc3\xf6\xd5\x4d\x1a\x41\xbf\x2e\xec\xc9\x47\xfd\xcb\xe3\xcb\x68\x4d\xf8\x33\xaf\x53\xc1\x99\x94\x13\xea\x49\x2c\xd7\x22\x06\xa6\x26\x20\x14\xd7\xca\x15\x17\x53\x0f\x03\x4c\x58\x2e\x2a\x63\xf7\x1c\xf5\x0a\x8d\xa4\x49\x74\x5d\x44\xa4\x3a\x16\x43\x81\x31\xe4\xe5\xdb\x22\x45\xa1\x42\x8c\x57\x62\x93\x7a\x81\x59\x31\xb3\x11\x03\x8f\x8f\xb3\x89\xe1\x79\xbe\xa6\xd5\x73\x5e\xca\x0c\x4a\x59\x8b\xa9\xce\x31\x5e\xda\x5a\x44\x35\xb7\x48\xf7\xc0\x32\x75\x8a\x7e\xb6\x9c\x4b\x80\x6b\x33\x01\x9e\x64\xb6\x9e\x24\x2b\xf5\xc7\x49\x44\x03\xef\x5b\xf0\xb2\x18\x01\x6b\xb4\x4c\xd1\x54\xd9\x1c\x45\x6a\x87\xf7\xcd\x4f\x19\xf3\xeb\x62\xac\xdc\xfc\xae\x74\x8c\x43\x96\xc9\xf9\xe6\x34\x46\xf6\x50\x22\xf7\xda\x2e\x01\xc6\xd9\x00\xad\x42\x9a\xc7\x84\xde\xd3\x2e\x02\x29\x54\x76\x5f\x12\x67\x5c\xe5\x0d\xa9\xf1\xb6\xba\xfe\x7d\xb1\x5c\x3d\x67\x26\xaa\x5c\x88\x2e\x58\xfa\xdc\xa5\x10\x40\x78\x4c\x6b\x66\x85\x30\xc6\x49\x04\xf3\x57\xcf\x35\xcf\x54\x2b\xa4\x67\x2e\x6c\xb4\x54\xdc\xd6\x36\x56\x31\xd6\xdc\xde\x00\xfc\xc4\x60\x04\x27\x4d\xe8\x75\x57\xe5\x4d\xba\x73\x5a\xf4\xcf\x5a\xe8\xb5\xa4\x59\x5e\x68\xb5\xb0\x71\xb3\x18\x89\x28\x01\x1c\x45\x9f\xcd\x14\xd0\x84\x38\xb9\xa3\x6e\xb1\x0b\xfd\x52\x02\x81\x49\x09\x9e\x09\xb5\xd0\x30\x04\x6d\x88\xa4\x6d\x04\x1d\x6a\x01\x44\x28\x5b\x4f\xcf\x93\xc8\x68\x52\xee\x51\x9a\x71\xa5\xa5\x14\x6a\x54\x66\x7a\xb1\x6e\xab\x2b\x4b\x75\x2e\xb4\xc7\xa8\x98\x28\xe3\xe2\x2f\x01\xc5\x2b\x07\xf1\xa2\x05\xab\x33\x45\x7a\x26\x08\x06\x2d\x47\x55\x34\xae\xcc\x2c\x84\x5f\x65\x4a\x8a\x71\x71\x8b\xac\x8c\x9a\x15\x88\x1d\x1a\xd0\xe9\x0e\x59\x22\xc5\xfa\x4e\xbd\x9e\x0f\x81\x29\xbb\xff\x32\x6f\x7e\x12\x23\xd8\x6f\xfd\x6b\xe3\x7f\x01\x00\x00\xff\xff\x54\xe0\x33\x9e\x94\x18\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 6292, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0x7d, 0x1b, 0x5a, 0xc1, 0xe0, 0x9b, 0x9, 0xcb, 0xd9, 0x8f, 0x81, 0x76, 0x91, 0x79, 0x2, 0x98, 0xea, 0xd3, 0x92, 0xd2, 0x7b, 0x82, 0xc5, 0x7, 0xa2, 0xca, 0xc9, 0x93, 0x6a, 0xda, 0xdc}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xb1\x4a\x04\x41\x0c\x86\xfb\x79\x8a\xbc\xc0\xae\xd8\x1d\xd3\xa9\x85\xfd\x09\xf6\xb9\x99\x9c\x1b\x77\x27\x19\x92\xcc\x16\x3e\xbd\x2c\x8a\x08\xe2\xb5\x81\x7c\xdf\xff\xad\x2c\x35\xc3\xd3\x36\x3c\xc8\xce\xba\xd1\x23\x4b\x65\x79\x4b\xd8\xf9\x95\xcc\x59\x25\x83\x5d\xb0\xcc\x38\x62\x51\xe3\x0f\x0c\x56\x99\xd7\x93\xcf\xac\x77\xfb\x7d\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xaa\xf8\xd4\x54\x38\xd4\x0e\x92\x8f\xcb\x3b\x95\xf0\x9c\x26\xf8\xd2\xbd\x90\xed\x5c\xe8\xa1\x14\x1d\x12\x3f\x7f\xdd\xb4\x51\x2c\x34\x7c\x5a\x4f\xfe\x7d\xf6\x8e\x85\x32\x68\x27\xf1\x85\xaf\xf1\x9b\x6c\xba\xd1\x99\xae\x87\xf9\x4f\xc7\x7f\x6b\x00\xb0\xf3\xb3\xe9\xe8\x37\xba\xd2\x67\x00\x00\x00\xff\xff\x5b\x52\x00\xaa\x17\x01\x00\x00")

func assetsDnsMetricsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleBindingYaml,
		"assets/dns/metrics/cluster-role-binding.yaml",
	)
}

func assetsDnsMetricsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role-binding.yaml", size: 279, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0x95, 0x6f, 0xa4, 0xd5, 0xed, 0x48, 0x27, 0x41, 0x56, 0x5c, 0xea, 0x5c, 0x89, 0xdc, 0xc1, 0x44, 0x91, 0xd4, 0xb, 0x18, 0x85, 0x79, 0x75, 0xaa, 0x6e, 0xb5, 0x98, 0xbe, 0xc6, 0x33, 0x43}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcd\x31\x4b\x34\x41\x0c\x87\xf1\x7e\x3e\x45\xe0\xad\x77\x5f\xec\x64\x5a\x05\x3b\x0b\x05\xfb\xec\xce\xdf\xdb\x70\x3b\xc9\x90\x64\x0e\xf4\xd3\x8b\x70\xb6\x0f\x3f\x78\xfe\xd1\xd3\x39\x23\xe1\xe4\x76\x22\x48\x81\x86\x46\xdb\x17\x0d\xb7\x8e\x3c\x30\x83\xd2\x28\x76\xe7\x01\x7a\x7e\x7d\xa7\x8e\x74\xd9\x83\xa0\x6d\x98\x68\x16\x1e\xf2\x01\x0f\x31\xad\xe4\x1b\xef\x2b\xcf\x3c\xcc\xe5\x9b\x53\x4c\xd7\xeb\x63\xac\x62\xff\x6f\x0f\xe5\x2a\xda\xea\xdf\xf0\xcd\x4e\x94\x8e\xe4\xc6\xc9\xb5\x10\x29\x77\x54\x6a\x1a\x4b\x37\x95\x34\x17\xbd\x14\x9f\x27\xa2\x96\x85\x78\xc8\x8b\xdb\x1c\xf1\x4b\x17\xb2\x01\xe7\x34\x5f\x6d\x40\xe3\x90\xcf\x5c\xc5\x0a\x91\x23\x6c\xfa\x8e\x3b\x6b\x1a\x88\x42\x74\x83\x6f\xf7\x74\x41\x96\x9f\x00\x00\x00\xff\xff\x9f\xa8\x4d\x6c\xf6\x00\x00\x00")

func assetsDnsMetricsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleYaml,
		"assets/dns/metrics/cluster-role.yaml",
	)
}

func assetsDnsMetricsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role.yaml", size: 246, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xdb, 0xe0, 0x95, 0x65, 0xae, 0x53, 0x96, 0x3a, 0x5f, 0x5e, 0x8b, 0x69, 0xe2, 0x7d, 0x5, 0xbf, 0x1f, 0x3a, 0xf, 0xff, 0xd0, 0x6b, 0x23, 0x4f, 0xfd, 0x11, 0x7f, 0x57, 0xd4, 0x4a, 0x8b}}
	return a, nil
}

var _assetsDnsMetricsRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\xb1\x4e\xc4\x40\x0c\x04\xd0\x7e\xbf\xc2\x3f\x90\x20\xba\xd3\x76\xd0\xd0\x1f\x12\xbd\x6f\xd7\x97\x98\x64\xed\x95\xed\x4d\xc1\xd7\x23\xa4\x48\x54\x20\x5d\x3b\x9a\xd1\x1b\xec\xfc\x41\xe6\xac\x92\xc1\x6e\x58\x66\x1c\xb1\xaa\xf1\x17\x06\xab\xcc\xdb\xc5\x67\xd6\xa7\xe3\x39\x6d\x2c\x35\xc3\x55\x77\x7a\x65\xa9\x2c\x4b\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xba\x69\xa3\x58\x69\xf8\xb4\x5d\xfc\x8c\xbd\x63\xa1\x0c\xda\x49\x7c\xe5\x7b\x4c\x55\x3c\x99\xee\x74\xa5\xfb\xcf\x14\x3b\xbf\x99\x8e\xfe\x8f\x9f\x00\x7e\xf9\xbf\x34\x1f\xb7\x4f\x2a\xe1\x39\x4d\x67\xfb\x9d\xec\xe0\x42\x2f\xa5\xe8\x90\x78\xf0\x65\x53\xe1\x50\x63\x59\x20\x7d\x07\x00\x00\xff\xff\xb9\xd9\xab\x8d\x25\x01\x00\x00")

func assetsDnsMetricsRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleBindingYaml,
		"assets/dns/metrics/role-binding.yaml",
	)
}

func assetsDnsMetricsRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role-binding.yaml", size: 293, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x7d, 0xc7, 0x45, 0x33, 0xc4, 0xd8, 0xf, 0x8d, 0x89, 0x8d, 0x6, 0x47, 0xa7, 0xa, 0x6b, 0x17, 0xf5, 0x5f, 0x5a, 0x2f, 0xd8, 0xf9, 0x6, 0x71, 0xaa, 0x78, 0x8d, 0xb5, 0x7a, 0xf6, 0x99}}
	return a, nil
}

var _assetsDnsMetricsRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x4e\xec\x40\x0c\x45\xfb\xf9\x0a\x6b\x5f\x9d\x7d\xa2\x5b\x4d\x8d\x44\x47\x01\x12\xbd\x77\xe6\x42\xac\x24\xe3\x91\xed\x04\xc1\xd7\xa3\xcd\x06\x89\xca\xf7\x1e\x59\x3e\xfe\x47\x2f\x3a\xc3\xa9\x01\x15\x95\xae\x5f\xd4\x4d\x17\xc4\x88\xd5\x29\x94\xbc\x18\x77\xd0\xe3\xf3\x2b\x2d\x08\x93\xe2\x84\x56\xbb\x4a\x8b\xc4\x5d\xde\x60\x2e\xda\x32\xd9\x95\xcb\x99\xd7\x18\xd5\xe4\x9b\x43\xb4\x9d\xa7\x8b\x9f\x45\xff\x6f\x0f\x69\x92\x56\xf3\x2e\x4a\x0b\x82\x2b\x07\xe7\x44\xd4\x78\x41\xfe\xe3\x1b\xa6\x8b\x1f\xd8\x3b\x17\x64\xd2\x8e\xe6\xa3\xbc\xc7\x50\x9b\x27\x5b\x67\x78\x4e\x03\x71\x97\x27\xd3\xb5\xfb\xed\xca\x40\xa7\x53\x22\x32\xb8\xae\x56\x70\x30\x87\x6d\x52\xe0\x7b\xf9\xfd\xf8\xde\xba\xd6\x5b\xd8\x60\xd7\x63\xf9\x03\xb1\xcf\x59\xfc\x1e\x3e\x39\xca\x98\x7e\x02\x00\x00\xff\xff\x29\x39\xda\x05\x1c\x01\x00\x00")

func assetsDnsMetricsRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleYaml,
		"assets/dns/metrics/role.yaml",
	)
}

func assetsDnsMetricsRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role.yaml", size: 284, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xf2, 0x4e, 0x40, 0x91, 0xd8, 0x5e, 0x1c, 0x98, 0xb6, 0x2f, 0x11, 0x2a, 0x15, 0x8f, 0xe4, 0x7c, 0xfe, 0xc6, 0x31, 0xf3, 0xb2, 0xa0, 0x38, 0xb2, 0x3f, 0x15, 0x5a, 0x33, 0x12, 0xd2, 0x88}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcd\x4e\xc4\x30\x0c\x84\xef\x79\x8a\x51\x38\x2f\x3f\xd7\xbc\x03\x5c\x90\xb8\xbb\x8d\x97\x35\x4d\xed\x2a\x76\xcb\xeb\xa3\xb2\x15\xac\xb4\xc7\x68\x46\xf3\x7d\xf1\x24\x5a\x0b\xde\x68\x66\x5f\x68\xe4\x44\x8b\x7c\x70\x77\x31\x2d\xd8\x5e\xd2\xcc\x41\x95\x82\x4a\x02\x48\xd5\x82\x42\x4c\x7d\x7f\x02\xb6\xb0\xfa\x45\xce\xf1\x28\xf6\xa4\x56\xf9\xe4\xdc\x78\x0c\xeb\x05\x39\x27\x40\x69\xe6\xf2\x5f\x3b\x55\xf5\x04\x34\x1a\xb8\x1d\x13\x0f\x70\x0e\x6c\xd4\x56\x46\x18\x68\x33\xa9\xa8\xbc\xb0\x56\xd1\x4f\x98\x62\x5a\x07\x06\xd5\x59\x7c\x97\x42\x5c\x28\x8e\x82\xef\xf1\xdf\x38\x68\x11\xbf\xd7\xea\xab\x9e\x1a\x6f\xdc\x0a\xf2\x73\x3e\x98\xd4\x9a\x7d\xdf\x78\xcd\xa6\x12\xd6\x77\x62\x18\x9a\xd9\x84\xb3\x75\xbc\x73\xdf\x64\xe4\xd7\x6b\x0a\x1b\xbe\x78\x0c\x87\xec\x16\xe2\xbf\xbf\xbb\x1e\xed\x8e\x3a\xb6\xd5\x83\xfb\xcd\x70\x41\x8e\xbe\x72\x4e\x3f\x01\x00\x00\xff\xff\x82\x6d\x29\x03\x71\x01\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 369, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0xab, 0x50, 0x84, 0x61, 0x5f, 0x41, 0xf4, 0x17, 0x3b, 0x6, 0x84, 0xc0, 0x5f, 0x4f, 0xbb, 0xd8, 0x1d, 0xae, 0x26, 0x3e, 0x1f, 0x29, 0x2c, 0x84, 0x6d, 0x5e, 0xc1, 0x87, 0x97, 0x5f, 0xc9}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x09\xc4\x30\x0c\x05\xd0\xde\x53\x68\x81\x2b\xae\x55\x77\x33\x1c\xa4\x17\xf2\x0f\x11\xc1\xb2\xb1\x14\xcf\x1f\x02\xe9\x1e\xbc\xd3\xbc\x32\xfd\x31\x97\x29\x7e\xaa\xfd\xf2\x2c\x32\x6c\xc3\x0c\xeb\xce\xb4\xbe\xa5\x21\xa5\x4a\x0a\x17\x22\x97\x06\xa6\xea\xf1\x3a\x86\x28\x98\xfa\x80\xc7\x61\x7b\x7e\x9e\xba\x03\x00\x00\xff\xff\x8e\x2c\xf1\x2e\x55\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 85, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x12, 0x50, 0x4d, 0x67, 0x2f, 0x1b, 0x74, 0xa0, 0xa4, 0xbb, 0xa7, 0x59, 0xe9, 0x5a, 0xc6, 0xc1, 0x1a, 0xf8, 0x5f, 0xff, 0x5, 0xdb, 0xc, 0x10, 0x8b, 0xc1, 0x0, 0xcc, 0xf, 0x9f, 0x3a}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x31\x6f\xe2\x40\x10\x85\x7b\xff\x8a\x27\xe8\x4e\xc0\x09\xdd\x51\x9c\xdb\xa3\x89\x52\x80\x14\x48\x3f\x5e\x4f\xcc\x8a\xf5\x8c\xb5\x33\x06\xf1\xef\x23\x4c\x42\x80\x14\x69\x56\xda\x7d\x9f\x3e\x3d\xbd\xdd\x47\xa9\x4b\xbc\x70\x3e\xc4\xc0\x05\x75\xf1\x95\xb3\x45\x95\x12\x87\x79\x31\x86\x50\xcb\x93\xe1\xb4\x8e\x02\x4f\x12\x55\x9c\x0c\x24\x35\x48\x44\x9d\x3c\xaa\x18\x28\x33\x8c\x1d\xe4\xc8\xbd\x78\x6c\xb9\xb0\x8e\x43\x59\x00\x63\x84\xd4\x9b\x73\x7e\x5a\xe3\x18\x53\x42\xc5\xa0\xde\xb5\x25\x8f\x81\x52\x3a\xa1\x25\xa1\x86\xeb\xd9\x00\x1b\x27\x0e\xae\x19\xd1\x1e\x8d\x40\xa7\xd9\xed\x2c\x9d\x0e\x95\x4a\xd4\x62\x05\x70\x09\x4a\x2c\xfe\x0c\x17\xa7\xdc\xb0\xaf\x87\xa7\x2b\x90\xd5\x35\x68\x2a\xb1\x5d\xae\xef\x05\x53\x0f\xdd\x8f\x92\x2f\xe8\x2a\xda\xfc\xbf\x15\xb5\xec\x39\x86\xdb\x36\xff\xe6\x8b\xbf\xdf\x54\x77\xd8\x83\x6a\x8c\xcd\x6a\xb9\x2a\xb1\x95\xa0\x6d\xcb\xe2\x38\xee\x58\x60\x97\xbf\x81\x6b\xa7\x49\x9b\x13\xde\x98\xbc\xcf\x8c\x86\x9c\xcf\x33\xb1\x50\x95\x3e\xf6\xfb\x84\x9e\xf9\x64\x97\xf5\x31\xc5\x68\xdf\x57\x9c\x85\x9d\x6d\x16\xf5\xf7\x4e\xcd\xcf\xa5\x47\xd7\xfc\xd7\xa8\x78\x0f\x00\x00\xff\xff\x82\x42\x75\xa4\x08\x02\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 520, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0x69, 0xc5, 0xf1, 0xe, 0xc, 0x77, 0xe5, 0x78, 0xce, 0xfc, 0xc2, 0x41, 0xf8, 0x21, 0x87, 0x8a, 0xb7, 0x67, 0xdd, 0x48, 0x94, 0x63, 0x79, 0x69, 0x4e, 0x38, 0x53, 0x3c, 0xdb, 0xc7, 0x13}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/metrics/cluster-role-binding.yaml": assetsDnsMetricsClusterRoleBindingYaml,

	"assets/dns/metrics/cluster-role.yaml": assetsDnsMetricsClusterRoleYaml,

	"assets/dns/metrics/role-binding.yaml": assetsDnsMetricsRoleBindingYaml,

	"assets/dns/metrics/role.yaml": assetsDnsMetricsRoleYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"metrics": {nil, map[string]*bintree{
				"cluster-role-binding.yaml": {assetsDnsMetricsClusterRoleBindingYaml, map[string]*bintree{}},
				"cluster-role.yaml":         {assetsDnsMetricsClusterRoleYaml, map[string]*bintree{}},
				"role-binding.yaml":         {assetsDnsMetricsRoleBindingYaml, map[string]*bintree{}},
				"role.yaml":                 {assetsDnsMetricsRoleYaml, map[string]*bintree{}},
			}},
			"namespace.yaml":       {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml": {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":         {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
