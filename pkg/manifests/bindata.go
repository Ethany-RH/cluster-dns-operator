// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/dns/cluster-role-binding.yaml (223B)
// assets/dns/cluster-role.yaml (397B)
// assets/dns/daemonset.yaml (6.336kB)
// assets/dns/metrics/cluster-role-binding.yaml (279B)
// assets/dns/metrics/cluster-role.yaml (246B)
// assets/dns/metrics/role-binding.yaml (293B)
// assets/dns/metrics/role.yaml (284B)
// assets/dns/namespace.yaml (369B)
// assets/dns/service-account.yaml (85B)
// assets/dns/service.yaml (520B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x8e\x83\x40\x0c\x05\xd0\x7e\x4e\xe1\x0b\xc0\x6a\xbb\xd5\x74\x9b\xdc\x80\x48\xe9\xcd\x8c\x09\x0e\x60\xa3\xb1\x87\x22\xa7\x8f\x10\x4a\x45\x3a\x17\xfe\xff\xfd\x89\x25\x47\xb8\xce\xd5\x9c\x4a\xa7\x33\x5d\x58\x32\xcb\x23\xe0\xca\x77\x2a\xc6\x2a\x11\x4a\x8f\xa9\xc5\xea\xa3\x16\x7e\xa1\xb3\x4a\x3b\xfd\x59\xcb\xfa\xb3\xfd\x86\x85\x1c\x33\x3a\xc6\x00\x00\x20\xb8\x50\x04\x5d\x49\x6c\xe4\xc1\x9b\x2c\x16\xac\xf6\x4f\x4a\x6e\x31\x34\x70\x78\x37\x2a\x1b\x27\xfa\x4f\x49\xab\x78\xf8\xc4\xf6\xe7\xe3\xb6\x15\xd3\xa9\xa7\xe8\x4c\x1d\x0d\x3b\x74\x9a\x1d\xbe\xd3\xef\x00\x00\x00\xff\xff\xfa\x62\xe7\x50\xdf\x00\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xf6, 0x2a, 0x3b, 0x84, 0xd7, 0x3e, 0xc4, 0xe1, 0x70, 0x66, 0x31, 0xda, 0xc4, 0x2f, 0x53, 0x27, 0x29, 0x13, 0xfe, 0x80, 0x36, 0xc5, 0xa1, 0x70, 0xdc, 0x2d, 0xef, 0xcf, 0xe0, 0xc4, 0xeb}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\x85\x75\xfd\x05\xd1\xa1\xb4\x14\xf4\x14\xf4\x1b\x67\x50\x96\xe4\x76\xad\xdd\x75\x4e\xe2\xeb\x51\x2e\x57\xa0\x8b\xa0\x9b\x19\xd9\xf3\x3c\x9e\x59\xc6\x3e\xbf\x2e\xcd\x03\xf6\xae\x0b\x12\x55\xfe\x80\x39\xab\xf4\xd9\x06\x2a\x1d\xb5\x98\xd4\xf8\x9b\x82\x55\xba\xf9\xc5\x3b\xd6\xa7\xf5\x39\x5d\x10\x34\x52\x50\x9f\x72\x16\xba\xa0\xcf\x5a\x21\x3e\xf1\x67\x9c\x47\xf1\x64\x6d\x81\xf7\xe9\x9c\xa9\xf2\x9b\x69\xab\xbe\x9d\x3c\xe7\xd3\x29\xe5\x6c\x70\x6d\x56\x70\xcf\x20\x63\x55\x96\xf0\x9b\x73\xd8\xca\x05\xbb\xa9\x3a\xee\x62\x63\x78\xa5\x3d\x5f\x61\xc3\xfd\xee\xc2\x1e\x37\x71\xa5\x28\x53\x3a\x02\xb7\x01\x90\xe0\xf2\x7b\xc1\xf1\x0d\xa1\x33\xc4\xb0\x32\xae\x0f\x84\x62\xa0\xc0\x1f\xcd\x8f\x5f\x73\x2c\xf6\x36\x7c\xa1\x04\x95\x02\xf7\xff\x00\x3f\x01\x00\x00\xff\xff\x76\x1b\x55\x2e\x8d\x01\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 397, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0xae, 0xd1, 0xba, 0xfa, 0x6b, 0xf8, 0x6e, 0x8d, 0x28, 0xc2, 0xa7, 0xaf, 0xc9, 0x3b, 0xc7, 0xcd, 0x80, 0xbe, 0xec, 0x98, 0xb4, 0x61, 0xa0, 0x9, 0xae, 0xa, 0xd8, 0xb2, 0x2e, 0x16, 0xf2}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xff\x53\xdb\xc6\x12\xff\x9d\xbf\x62\x23\x78\x21\x69\x11\x98\x24\xa4\x79\x4a\xe8\xab\x0b\xa6\x30\x0d\xe0\xc1\x4e\xf3\x03\xc3\x30\xe7\xd3\xda\xba\xe7\xd3\xdd\xf5\xee\x24\xd0\x00\xff\xfb\x9b\x3b\x59\xb6\x64\x19\xb7\x79\x9d\xce\xb4\x3f\x50\xb8\xdd\xfd\xdc\xee\xde\x7e\x55\xa6\x4c\xc4\x11\x1c\x13\x4c\xa5\x18\xa0\xdd\x20\x8a\xfd\x86\xda\x30\x29\x22\x20\x4a\x99\xbd\x7c\x7f\x63\x13\x04\x49\x71\xc7\xff\x34\x8a\x50\x04\x22\x62\xe0\x64\x84\xdc\x00\xd1\x08\x06\x2d\x10\x0b\x3a\x13\x96\xa5\xb8\x61\x14\xd2\x68\x03\xc0\x62\xaa\x38\xb1\xe8\x7e\x07\xa8\x4e\xfd\xef\xa8\x73\x46\xb1\x4b\xa9\xcc\x84\xbd\x20\x29\x46\x10\x0b\x33\xa3\x2a\xcd\xa4\x66\xb6\x38\xe2\xc4\x98\x92\x68\x0a\x63\x31\x0d\x85\x8c\x31\xa4\x9a\x59\x46\x09\x9f\x71\x53\x29\x2c\x61\x02\xb5\xa9\xd0\x43\xaf\x69\x1d\x11\x60\x13\x58\x4a\x26\x08\xcc\x2c\x6b\x5b\x71\x78\x7a\x3f\xe3\xbc\x2f\x39\xa3\x45\x04\x67\xe3\x0b\x69\xfb\x1a\x0d\x0a\x3b\xe7\xb2\xa8\x53\x26\x88\x65\x52\x9c\xa3\x31\x4e\x64\xc6\x7e\x42\x38\x1f\x11\x3a\x1d\xca\xcf\x72\x62\x2e\x45\x4f\x6b\xa9\xe7\x72\x54\xa6\x29\x71\xae\xbe\x86\x80\x4a\x8d\xb1\x30\x01\xdc\xcc\xc9\x44\x4f\x8c\xa7\x85\x54\x8a\x71\xb0\x03\xc1\x1e\x5a\xba\x37\xe3\xdc\x3b\x92\x1a\xc7\x8c\x63\x5d\x24\x97\x3c\x4b\xf1\xdc\x39\x70\x6e\xf9\xc2\x76\x07\xc3\x26\x61\xc9\x34\xa7\x02\xa4\x8e\xbf\x4f\x6c\x12\x41\xfd\x86\x1a\x87\x46\x12\x5f\x0a\x5e\x44\x60\x75\xb6\x10\x55\x52\x37\xef\x99\xfb\xbd\x2f\xb5\x8d\xe0\xe0\xed\xc1\xdb\x1a\x4a\xfb\x05\xdc\xbb\x4a\x2b\xa9\xe4\x11\x7c\x39\xee\x7f\x3b\x52\x68\xa9\x5a\x89\x36\x3c\x5a\xa0\x39\xed\x99\x40\x63\xfa\x5a\x8e\x30\xaa\xf1\x27\xd6\xaa\x5f\xd0\xd6\x8f\x00\x54\xe9\x89\x04\x09\xb7\x49\x93\xe2\x75\xf9\xd0\xf9\xd0\x69\x1c\x1b\x9a\xa0\xd3\xe7\x74\x38\xec\xd7\x08\x4c\x30\xcb\x08\x3f\x46\x4e\x8a\x01\x52\x29\x62\x13\xc1\x7e\x5d\x54\xa1\x66\x32\x5e\x4d\x33\x19\xa5\x68\xcc\x30\xd1\x68\x12\xc9\xe3\x08\xf6\x6b\xd4\x31\x61\x3c\xd3\x58\xa3\xd6\xdd\xe3\x62\x58\x66\x76\x15\x30\x67\x39\xfe\x43\x5c\xf1\xbe\xb3\x46\xe5\x83\xbf\xe0\x8a\x83\xda\xcb\x1b\x99\x69\x8a\xa6\x6e\x16\x67\x29\xb3\xa6\x69\x68\x8a\xa9\xd4\x45\x04\x07\xfb\x6f\xce\x59\x23\xf0\x7f\xcf\xd0\x2c\x73\x53\x95\x45\x70\xd0\x49\x57\x42\xfc\xd0\x99\x23\x54\x89\x37\xcd\x46\x18\xea\x11\xa1\xa1\xd2\xf2\xbe\xf8\x86\x02\xe4\x6b\x40\x2d\x2d\xc2\x90\xcb\x89\x95\xc6\xc6\xa8\x75\xe3\xdc\x20\xcd\x34\x86\x9c\x19\x8b\x22\x24\x71\xac\xd1\x98\xc3\xe8\xdf\xfb\x07\xef\x1a\x7c\x96\x9b\x90\x32\x95\xa0\x0e\x4d\xc6\x2c\x9a\xc3\xe1\xe7\xc1\x6d\xef\xe8\xf8\xb4\x77\x7b\x35\xe8\xde\x7e\x3d\x1b\x9e\xde\x76\x7b\x83\xdb\xfd\x37\x1f\x6e\x7f\x39\x3a\xbf\x1d\x9c\x76\xdf\x1c\xbc\xdf\x59\x70\xf5\x8e\x8e\xff\x80\xaf\x85\x73\xf4\xf3\xd1\x9f\xc2\x59\xc9\xb7\x06\xad\x61\x59\xa6\x8c\xd5\x48\xd2\x43\x17\xca\xd1\xde\xde\xfe\x9b\x1f\x76\x3b\xbb\x9d\xdd\x7d\xe7\x84\xb7\x7b\x6d\x2f\xa0\xb6\xa1\xab\xa0\x87\xbe\xea\x59\x6e\xf6\x94\x66\x39\xb1\xe8\x7e\xdf\xa5\xda\xb6\x44\x66\xf4\x70\x8a\xc5\x1a\xc9\x29\x16\x7f\xba\x44\x36\xde\xa7\x2a\x6c\x29\x5a\xcd\xa8\x59\x1f\xc6\x6b\x42\x73\xff\x99\xd0\x7c\xd7\xa9\x05\xf7\x73\xbd\x62\xb9\x1b\xd4\xac\x7b\x4e\x51\xe7\x9b\x3f\xea\x16\xb5\x06\x5c\xb6\x6c\x67\x14\xcf\x51\xff\x63\xda\xb1\xcf\x20\x37\x62\x48\x61\xf1\xbe\x51\x09\x9d\xfd\x8c\xe3\x04\xe3\xa5\x0e\xb8\xbe\xe1\x26\xd2\x58\xe3\x03\x65\x4d\xb7\xf5\x4c\x35\x27\xa0\xc8\xe1\xa2\x7b\xde\x1b\xf4\xae\x7e\xeb\x5d\xf9\xb1\xea\xe8\xf3\x97\xc1\xb0\x77\x75\x7b\x7c\x79\xde\x3d\xbb\x58\x35\x5e\x55\xe2\x28\xf2\xb6\x1a\x0e\xe9\xec\xa8\x37\xa8\x29\xb1\x09\x47\x6e\xf8\x00\xa9\xa1\x9c\xde\x0c\x2a\xa2\x89\xc5\x18\x5c\x05\x01\x39\xae\xe6\x31\xd3\x90\xba\xb8\x1c\xf6\x22\x38\x91\x1a\x84\xbc\xdb\x01\x14\x26\xd3\x08\x36\x41\x83\x5e\x2d\x8d\x9c\x58\x96\x63\x39\x17\x7e\x84\xb1\xd4\x80\x84\x26\x4d\xc2\x4e\x03\x93\x08\x20\x9c\x11\x03\x77\xcc\x26\x0e\x6b\xd9\x5e\x93\x8d\xc7\xec\x1e\xee\x18\xe7\x40\xb8\x91\x30\x42\x20\x71\x8c\xf1\x6e\x0d\x27\x27\x3c\xc3\x08\x02\x1f\x23\xa1\xc6\x09\x33\x56\x17\xbb\x52\xa1\x30\x09\x1b\xdb\x70\x89\x60\x72\x1a\xb4\x26\xb1\x9a\xeb\xf6\x46\x4c\xec\x8d\x88\x49\xea\x45\x80\xd6\xfe\x78\xac\x1b\xf1\xa2\xcd\x0e\xfe\x8d\xc2\x4c\x82\x62\x0a\x5d\x97\xda\xa8\xf7\x3b\x4d\x14\x6c\xff\x57\x8e\x0c\x84\x0a\x1e\xe1\xde\x55\x7a\x98\x3a\x13\x1f\x1f\x7d\x8c\x7d\x84\x3b\xc2\xec\x47\xc0\x7b\x66\xa1\xb3\x0d\xc3\xde\xd5\x79\x1d\xe1\xb2\xdf\xbb\x18\x9c\x9e\x9d\x0c\x6f\xcf\xbb\x57\xbf\xf6\xae\x0e\x83\x85\xad\x13\x14\xe8\x5f\xb3\x99\x6a\x41\x4d\xfc\xf4\x72\x30\x1c\xdc\x9e\x9c\x7d\xee\x1d\x06\x8b\x38\xac\x73\x0c\x7b\xe7\xfd\x16\xc3\xae\x4d\x55\x50\x57\xe3\xec\x64\x70\xb8\xbd\x03\xdb\x3e\xeb\x21\xd4\x10\x92\x79\xe8\xc0\xa7\x4f\x9f\x20\xd8\x7a\xa8\x02\xf0\xa9\x21\xb9\x09\xe7\x64\x8a\x40\xfc\x4e\x20\x35\xd1\x05\xb8\x54\x59\x84\x81\xe4\x71\x99\x42\xfe\x7c\xdb\x00\xb1\x56\xb3\x51\x66\xd1\xd4\x5f\x9e\x2a\x08\xc7\x10\x86\x0b\x6a\x28\x05\x2f\xdc\xc5\x0b\x23\x9f\x02\xf7\xf7\xdc\xa4\xa6\x26\x77\x89\xbb\xb7\x74\x7a\x2c\x1b\xa5\x33\x46\xca\x5d\x60\x87\x5d\x30\x39\xbd\x65\xca\x34\xc8\x2e\xbe\x4d\x4e\x81\x09\x07\x5f\xd9\x7d\xfd\xd3\xcd\x53\xd0\x82\x72\x16\x9f\xa0\xa5\x49\xe5\x1f\x38\xeb\xc3\x58\xcb\x14\x28\xcf\x8c\x45\xed\x6a\x23\xb0\x31\xa8\xb2\xa0\xed\xc2\x57\x84\xd4\xb9\xc8\x60\x8e\x9a\x70\xb0\x9a\xa1\x69\x61\x5a\x09\xb1\x04\x66\x23\x38\xeb\xe7\xef\x76\xdc\xcf\xf7\xfe\xe7\x3b\x90\x39\x6a\x37\x0a\xfb\x2a\xe2\xce\xe7\x27\xbb\x30\x4c\x10\xec\x9d\x04\x4e\x5c\xbe\x8b\x15\xc0\xce\x6e\x67\x60\x8c\x8a\xcb\x22\x45\x61\x67\x39\xfa\x6b\xa6\x0b\x0d\x52\xb8\x17\x42\x0d\x97\x0a\xc5\xc0\x12\x3a\x85\x57\x97\x83\xfe\xfe\xdb\xd7\x10\x82\x4d\xa4\x41\xa7\x97\x90\xb6\x05\x6c\x32\xe5\xfa\xa2\x1b\xf9\x81\x4b\x12\x8f\x08\x27\x82\xa2\x36\x5e\x4f\xd7\xd8\x98\xaf\x25\x84\x26\x4c\x4c\xe0\xf8\x62\x00\x36\xd1\x32\x9b\x24\x5e\xf5\x25\x3c\x9a\xc6\xe6\xf0\xd5\x76\xcc\x26\x10\x5a\xe8\xc2\x4f\xc1\xd6\xc3\xa2\x80\x3e\x05\xf0\xbd\x49\xdc\x6d\xee\x81\x72\xfa\xb4\xbb\xf5\xd0\xac\x2f\x4f\xc1\xf6\x12\x62\xf9\xdf\x1c\xb1\xdb\xfd\x1b\x40\xe1\x7b\x4b\xd5\xdf\xa3\xeb\xff\x8b\xfc\x7a\x09\xda\xbd\x3d\x73\xa1\xbd\xf5\xf0\xc2\x39\xf9\xfa\xbb\x9b\xa7\x25\x96\x56\x88\x03\x30\x65\x0e\x5f\x6d\xbd\xc2\x9c\x70\x77\x99\x17\x64\x37\x4f\xc1\xeb\x65\x78\x70\xb1\x7e\x7d\x0d\xc1\xd6\x7f\x02\x08\xf1\x77\xe8\xc0\xcb\x97\x4e\x64\x93\xa9\x32\x85\x20\x14\x08\x1d\xb8\xb9\xf9\xe8\xea\x81\x58\x61\xf9\x2c\x27\xaf\x67\x56\x05\x37\x87\xc1\xd6\x43\x25\xbe\x82\x7f\xa4\x91\x4c\x5b\xe7\x63\xd6\x32\x4b\xe0\x46\xeb\xa0\x71\xb2\x09\x5f\x54\x4c\x2c\xd6\x9a\x38\xf8\xb2\xc3\xc6\x70\x87\x30\x41\xeb\x5a\x12\x8b\x6b\xc9\x6e\x96\x00\xbe\x62\xd9\xd3\x84\xb4\x90\xb5\xc0\xee\x12\x14\xce\x6c\xed\x27\xa2\xd9\x4e\x3e\x47\x93\x99\x75\xb3\x92\xd4\x40\x14\x83\x4c\x90\x9c\x30\x4e\x46\x8c\x33\x5b\x2c\x5d\x33\xb0\x84\x23\xa0\xf0\xd5\x03\xa8\xcc\x78\xec\x9a\x8a\xb1\xee\x69\x6b\x17\xb2\xb1\xaf\xba\xd5\x0d\xcc\x40\x8c\x1c\x2d\xc6\x1b\xed\x37\x0b\xc5\x2c\x90\xbc\xf7\xbf\xbb\x09\x9f\x82\xe7\x9e\x69\x13\x7e\xce\x18\x8f\x81\x80\xc0\xbb\x5a\x3d\x2f\x4b\x5f\xdd\x60\x57\x5a\x64\xa6\x81\x66\xc6\xca\x74\xae\xf1\x98\x71\x8b\x1a\x63\x67\xf3\x12\xf6\x44\xa3\x82\x30\x87\x60\x13\xb6\x1e\x96\x1b\x62\x59\xf2\x1b\x2d\xe0\xc7\x35\x4d\xa0\xd4\xb5\xab\x14\xfa\x1a\x54\x76\xcc\x85\x12\xae\xd0\xb7\x27\x22\x68\xf5\x80\x17\x95\x53\x9e\xe9\x01\xb3\xb4\x52\x65\x5e\x55\xcc\x65\xf8\xde\x3c\xad\x14\x00\x40\x9a\x48\xf0\x91\xfd\x54\x0a\x55\xff\x6b\xa7\x31\x3c\xe3\x8a\x1f\x5b\xb6\x2f\x5f\xd2\x0a\xfa\x55\x61\xef\x7c\x34\xbc\x3c\xbe\x8c\x56\x84\x3f\xb1\x32\x65\x94\x70\x5e\xb8\x9e\x44\x72\xc9\x62\x20\xa2\x00\x26\xa8\x14\xc6\x2f\xa6\x16\x46\x98\x90\x9c\xd5\xc6\xee\x0a\xf5\x0a\x15\x77\x93\xe8\xaa\x88\x48\x65\xcc\xc6\x0c\x63\xc8\xcb\xef\x90\x2e\x0a\x05\x62\xbc\x14\x9b\xae\x17\xa8\x25\x33\x5b\x31\xf0\xf8\x38\x9b\x18\xd6\xf3\xb5\xad\xae\x78\x5d\x66\xb8\x94\xd5\x98\xca\x1c\xe3\x85\xad\x3e\xaa\xa9\x46\xb7\x07\x96\xa9\xe3\xfb\xd9\x62\x2e\x01\x2a\x55\x01\x34\xc9\x74\x33\x49\x96\xea\x8f\xe1\x88\x0a\xde\x77\xe0\xa5\x1f\x01\x1b\xb4\x4c\xb8\xa9\xb2\x3d\x8a\x34\x1e\xef\x5b\xf7\xc5\x83\x6a\x5d\x8c\x85\xa9\x76\xa5\x63\x1c\x93\x8c\x57\x97\xbb\x31\x72\x80\x1c\xa9\x95\x7a\x01\x30\xcd\x46\xa8\x05\xba\x79\x8c\xc9\x3d\x69\x22\xe0\x4c\x64\xf7\x25\x71\xc6\x55\x6e\x48\xad\xef\xb0\xab\xbf\x45\x96\xa7\xe7\x44\x45\xb5\x85\xe8\x82\xa4\xeb\x96\x42\x00\x66\x31\x6d\x98\x15\xc2\x14\x8b\x08\xaa\x2f\xa4\x2b\x3e\x69\x2d\x91\xd6\x2c\x6c\xee\xc8\x6f\x6b\x1b\xcb\x18\x2b\xb6\x37\x00\x5b\x28\x8c\xe0\xa4\x0d\xbd\x6a\x55\xde\x74\x3b\xa7\x46\xbb\xd6\x42\x2b\xb9\x9b\xe5\x99\x14\x73\x1b\x37\xfd\x48\xe4\x12\xc0\xb8\xe8\xd3\x99\x00\x37\x21\x16\x77\xae\x5b\xec\xc2\xb0\x94\x40\x20\x9c\x83\x25\x4c\xcc\x35\x0c\x41\x2a\x47\x92\x3a\x82\x9e\x6b\x01\x8e\x50\xb6\x9e\x81\x75\x22\x93\xa2\xbc\xa3\x34\xe3\x4a\x72\xce\xc4\xa4\xcc\x74\x7f\xae\xeb\x27\x0b\x75\x2e\xa4\xc5\xc8\x4f\x94\xb1\xff\x57\x03\xff\x95\xc3\xf1\xa2\x06\x2d\x33\xe1\xf4\x4c\x10\x14\x6a\x8a\xc2\x37\xae\x4c\xcd\x85\x5f\x65\x82\xb3\xa9\xdf\x22\x6b\xa3\x66\x0d\x62\xc7\x0d\xe8\x6e\x87\x2c\x91\x62\x79\x27\x5e\x57\x43\x60\x4a\xee\xbf\x54\xcd\x8f\x63\x04\xfb\x9d\x7f\x6d\xfc\x2f\x00\x00\xff\xff\x14\x93\x2b\xea\xc0\x18\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 6336, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xc0, 0xbc, 0xaf, 0x19, 0x81, 0x13, 0xc9, 0xa7, 0xc5, 0x34, 0x85, 0xda, 0x99, 0xaa, 0xdd, 0xf0, 0xff, 0x59, 0x3, 0xa3, 0xb0, 0xb5, 0x97, 0x80, 0x57, 0x53, 0x29, 0x48, 0x11, 0x42, 0xcd}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xb1\x4a\x04\x41\x0c\x86\xfb\x79\x8a\xbc\xc0\xae\xd8\x1d\xd3\xa9\x85\xfd\x09\xf6\xb9\x99\x9c\x1b\x77\x27\x19\x92\xcc\x16\x3e\xbd\x2c\x8a\x08\xe2\xb5\x81\x7c\xdf\xff\xad\x2c\x35\xc3\xd3\x36\x3c\xc8\xce\xba\xd1\x23\x4b\x65\x79\x4b\xd8\xf9\x95\xcc\x59\x25\x83\x5d\xb0\xcc\x38\x62\x51\xe3\x0f\x0c\x56\x99\xd7\x93\xcf\xac\x77\xfb\x7d\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xaa\xf8\xd4\x54\x38\xd4\x0e\x92\x8f\xcb\x3b\x95\xf0\x9c\x26\xf8\xd2\xbd\x90\xed\x5c\xe8\xa1\x14\x1d\x12\x3f\x7f\xdd\xb4\x51\x2c\x34\x7c\x5a\x4f\xfe\x7d\xf6\x8e\x85\x32\x68\x27\xf1\x85\xaf\xf1\x9b\x6c\xba\xd1\x99\xae\x87\xf9\x4f\xc7\x7f\x6b\x00\xb0\xf3\xb3\xe9\xe8\x37\xba\xd2\x67\x00\x00\x00\xff\xff\x5b\x52\x00\xaa\x17\x01\x00\x00")

func assetsDnsMetricsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleBindingYaml,
		"assets/dns/metrics/cluster-role-binding.yaml",
	)
}

func assetsDnsMetricsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role-binding.yaml", size: 279, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0x95, 0x6f, 0xa4, 0xd5, 0xed, 0x48, 0x27, 0x41, 0x56, 0x5c, 0xea, 0x5c, 0x89, 0xdc, 0xc1, 0x44, 0x91, 0xd4, 0xb, 0x18, 0x85, 0x79, 0x75, 0xaa, 0x6e, 0xb5, 0x98, 0xbe, 0xc6, 0x33, 0x43}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcd\x31\x4b\x34\x41\x0c\x87\xf1\x7e\x3e\x45\xe0\xad\x77\x5f\xec\x64\x5a\x05\x3b\x0b\x05\xfb\xec\xce\xdf\xdb\x70\x3b\xc9\x90\x64\x0e\xf4\xd3\x8b\x70\xb6\x0f\x3f\x78\xfe\xd1\xd3\x39\x23\xe1\xe4\x76\x22\x48\x81\x86\x46\xdb\x17\x0d\xb7\x8e\x3c\x30\x83\xd2\x28\x76\xe7\x01\x7a\x7e\x7d\xa7\x8e\x74\xd9\x83\xa0\x6d\x98\x68\x16\x1e\xf2\x01\x0f\x31\xad\xe4\x1b\xef\x2b\xcf\x3c\xcc\xe5\x9b\x53\x4c\xd7\xeb\x63\xac\x62\xff\x6f\x0f\xe5\x2a\xda\xea\xdf\xf0\xcd\x4e\x94\x8e\xe4\xc6\xc9\xb5\x10\x29\x77\x54\x6a\x1a\x4b\x37\x95\x34\x17\xbd\x14\x9f\x27\xa2\x96\x85\x78\xc8\x8b\xdb\x1c\xf1\x4b\x17\xb2\x01\xe7\x34\x5f\x6d\x40\xe3\x90\xcf\x5c\xc5\x0a\x91\x23\x6c\xfa\x8e\x3b\x6b\x1a\x88\x42\x74\x83\x6f\xf7\x74\x41\x96\x9f\x00\x00\x00\xff\xff\x9f\xa8\x4d\x6c\xf6\x00\x00\x00")

func assetsDnsMetricsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleYaml,
		"assets/dns/metrics/cluster-role.yaml",
	)
}

func assetsDnsMetricsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role.yaml", size: 246, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xdb, 0xe0, 0x95, 0x65, 0xae, 0x53, 0x96, 0x3a, 0x5f, 0x5e, 0x8b, 0x69, 0xe2, 0x7d, 0x5, 0xbf, 0x1f, 0x3a, 0xf, 0xff, 0xd0, 0x6b, 0x23, 0x4f, 0xfd, 0x11, 0x7f, 0x57, 0xd4, 0x4a, 0x8b}}
	return a, nil
}

var _assetsDnsMetricsRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\xb1\x4e\xc4\x40\x0c\x04\xd0\x7e\xbf\xc2\x3f\x90\x20\xba\xd3\x76\xd0\xd0\x1f\x12\xbd\x6f\xd7\x97\x98\x64\xed\x95\xed\x4d\xc1\xd7\x23\xa4\x48\x54\x20\x5d\x3b\x9a\xd1\x1b\xec\xfc\x41\xe6\xac\x92\xc1\x6e\x58\x66\x1c\xb1\xaa\xf1\x17\x06\xab\xcc\xdb\xc5\x67\xd6\xa7\xe3\x39\x6d\x2c\x35\xc3\x55\x77\x7a\x65\xa9\x2c\x4b\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xba\x69\xa3\x58\x69\xf8\xb4\x5d\xfc\x8c\xbd\x63\xa1\x0c\xda\x49\x7c\xe5\x7b\x4c\x55\x3c\x99\xee\x74\xa5\xfb\xcf\x14\x3b\xbf\x99\x8e\xfe\x8f\x9f\x00\x7e\xf9\xbf\x34\x1f\xb7\x4f\x2a\xe1\x39\x4d\x67\xfb\x9d\xec\xe0\x42\x2f\xa5\xe8\x90\x78\xf0\x65\x53\xe1\x50\x63\x59\x20\x7d\x07\x00\x00\xff\xff\xb9\xd9\xab\x8d\x25\x01\x00\x00")

func assetsDnsMetricsRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleBindingYaml,
		"assets/dns/metrics/role-binding.yaml",
	)
}

func assetsDnsMetricsRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role-binding.yaml", size: 293, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x7d, 0xc7, 0x45, 0x33, 0xc4, 0xd8, 0xf, 0x8d, 0x89, 0x8d, 0x6, 0x47, 0xa7, 0xa, 0x6b, 0x17, 0xf5, 0x5f, 0x5a, 0x2f, 0xd8, 0xf9, 0x6, 0x71, 0xaa, 0x78, 0x8d, 0xb5, 0x7a, 0xf6, 0x99}}
	return a, nil
}

var _assetsDnsMetricsRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x4e\xec\x40\x0c\x45\xfb\xf9\x0a\x6b\x5f\x9d\x7d\xa2\x5b\x4d\x8d\x44\x47\x01\x12\xbd\x77\xe6\x42\xac\x24\xe3\x91\xed\x04\xc1\xd7\xa3\xcd\x06\x89\xca\xf7\x1e\x59\x3e\xfe\x47\x2f\x3a\xc3\xa9\x01\x15\x95\xae\x5f\xd4\x4d\x17\xc4\x88\xd5\x29\x94\xbc\x18\x77\xd0\xe3\xf3\x2b\x2d\x08\x93\xe2\x84\x56\xbb\x4a\x8b\xc4\x5d\xde\x60\x2e\xda\x32\xd9\x95\xcb\x99\xd7\x18\xd5\xe4\x9b\x43\xb4\x9d\xa7\x8b\x9f\x45\xff\x6f\x0f\x69\x92\x56\xf3\x2e\x4a\x0b\x82\x2b\x07\xe7\x44\xd4\x78\x41\xfe\xe3\x1b\xa6\x8b\x1f\xd8\x3b\x17\x64\xd2\x8e\xe6\xa3\xbc\xc7\x50\x9b\x27\x5b\x67\x78\x4e\x03\x71\x97\x27\xd3\xb5\xfb\xed\xca\x40\xa7\x53\x22\x32\xb8\xae\x56\x70\x30\x87\x6d\x52\xe0\x7b\xf9\xfd\xf8\xde\xba\xd6\x5b\xd8\x60\xd7\x63\xf9\x03\xb1\xcf\x59\xfc\x1e\x3e\x39\xca\x98\x7e\x02\x00\x00\xff\xff\x29\x39\xda\x05\x1c\x01\x00\x00")

func assetsDnsMetricsRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleYaml,
		"assets/dns/metrics/role.yaml",
	)
}

func assetsDnsMetricsRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role.yaml", size: 284, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xf2, 0x4e, 0x40, 0x91, 0xd8, 0x5e, 0x1c, 0x98, 0xb6, 0x2f, 0x11, 0x2a, 0x15, 0x8f, 0xe4, 0x7c, 0xfe, 0xc6, 0x31, 0xf3, 0xb2, 0xa0, 0x38, 0xb2, 0x3f, 0x15, 0x5a, 0x33, 0x12, 0xd2, 0x88}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcd\x4e\xc4\x30\x0c\x84\xef\x79\x8a\x51\x38\x2f\x3f\xd7\xbc\x03\x5c\x90\xb8\xbb\x8d\x97\x35\x4d\xed\x2a\x76\xcb\xeb\xa3\xb2\x15\xac\xb4\xc7\x68\x46\xf3\x7d\xf1\x24\x5a\x0b\xde\x68\x66\x5f\x68\xe4\x44\x8b\x7c\x70\x77\x31\x2d\xd8\x5e\xd2\xcc\x41\x95\x82\x4a\x02\x48\xd5\x82\x42\x4c\x7d\x7f\x02\xb6\xb0\xfa\x45\xce\xf1\x28\xf6\xa4\x56\xf9\xe4\xdc\x78\x0c\xeb\x05\x39\x27\x40\x69\xe6\xf2\x5f\x3b\x55\xf5\x04\x34\x1a\xb8\x1d\x13\x0f\x70\x0e\x6c\xd4\x56\x46\x18\x68\x33\xa9\xa8\xbc\xb0\x56\xd1\x4f\x98\x62\x5a\x07\x06\xd5\x59\x7c\x97\x42\x5c\x28\x8e\x82\xef\xf1\xdf\x38\x68\x11\xbf\xd7\xea\xab\x9e\x1a\x6f\xdc\x0a\xf2\x73\x3e\x98\xd4\x9a\x7d\xdf\x78\xcd\xa6\x12\xd6\x77\x62\x18\x9a\xd9\x84\xb3\x75\xbc\x73\xdf\x64\xe4\xd7\x6b\x0a\x1b\xbe\x78\x0c\x87\xec\x16\xe2\xbf\xbf\xbb\x1e\xed\x8e\x3a\xb6\xd5\x83\xfb\xcd\x70\x41\x8e\xbe\x72\x4e\x3f\x01\x00\x00\xff\xff\x82\x6d\x29\x03\x71\x01\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 369, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0xab, 0x50, 0x84, 0x61, 0x5f, 0x41, 0xf4, 0x17, 0x3b, 0x6, 0x84, 0xc0, 0x5f, 0x4f, 0xbb, 0xd8, 0x1d, 0xae, 0x26, 0x3e, 0x1f, 0x29, 0x2c, 0x84, 0x6d, 0x5e, 0xc1, 0x87, 0x97, 0x5f, 0xc9}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x09\xc4\x30\x0c\x05\xd0\xde\x53\x68\x81\x2b\xae\x55\x77\x33\x1c\xa4\x17\xf2\x0f\x11\xc1\xb2\xb1\x14\xcf\x1f\x02\xe9\x1e\xbc\xd3\xbc\x32\xfd\x31\x97\x29\x7e\xaa\xfd\xf2\x2c\x32\x6c\xc3\x0c\xeb\xce\xb4\xbe\xa5\x21\xa5\x4a\x0a\x17\x22\x97\x06\xa6\xea\xf1\x3a\x86\x28\x98\xfa\x80\xc7\x61\x7b\x7e\x9e\xba\x03\x00\x00\xff\xff\x8e\x2c\xf1\x2e\x55\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 85, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x12, 0x50, 0x4d, 0x67, 0x2f, 0x1b, 0x74, 0xa0, 0xa4, 0xbb, 0xa7, 0x59, 0xe9, 0x5a, 0xc6, 0xc1, 0x1a, 0xf8, 0x5f, 0xff, 0x5, 0xdb, 0xc, 0x10, 0x8b, 0xc1, 0x0, 0xcc, 0xf, 0x9f, 0x3a}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x31\x6f\xe2\x40\x10\x85\x7b\xff\x8a\x27\xe8\x4e\xc0\x09\xdd\x51\x9c\xdb\xa3\x89\x52\x80\x14\x48\x3f\x5e\x4f\xcc\x8a\xf5\x8c\xb5\x33\x06\xf1\xef\x23\x4c\x42\x80\x14\x69\x56\xda\x7d\x9f\x3e\x3d\xbd\xdd\x47\xa9\x4b\xbc\x70\x3e\xc4\xc0\x05\x75\xf1\x95\xb3\x45\x95\x12\x87\x79\x31\x86\x50\xcb\x93\xe1\xb4\x8e\x02\x4f\x12\x55\x9c\x0c\x24\x35\x48\x44\x9d\x3c\xaa\x18\x28\x33\x8c\x1d\xe4\xc8\xbd\x78\x6c\xb9\xb0\x8e\x43\x59\x00\x63\x84\xd4\x9b\x73\x7e\x5a\xe3\x18\x53\x42\xc5\xa0\xde\xb5\x25\x8f\x81\x52\x3a\xa1\x25\xa1\x86\xeb\xd9\x00\x1b\x27\x0e\xae\x19\xd1\x1e\x8d\x40\xa7\xd9\xed\x2c\x9d\x0e\x95\x4a\xd4\x62\x05\x70\x09\x4a\x2c\xfe\x0c\x17\xa7\xdc\xb0\xaf\x87\xa7\x2b\x90\xd5\x35\x68\x2a\xb1\x5d\xae\xef\x05\x53\x0f\xdd\x8f\x92\x2f\xe8\x2a\xda\xfc\xbf\x15\xb5\xec\x39\x86\xdb\x36\xff\xe6\x8b\xbf\xdf\x54\x77\xd8\x83\x6a\x8c\xcd\x6a\xb9\x2a\xb1\x95\xa0\x6d\xcb\xe2\x38\xee\x58\x60\x97\xbf\x81\x6b\xa7\x49\x9b\x13\xde\x98\xbc\xcf\x8c\x86\x9c\xcf\x33\xb1\x50\x95\x3e\xf6\xfb\x84\x9e\xf9\x64\x97\xf5\x31\xc5\x68\xdf\x57\x9c\x85\x9d\x6d\x16\xf5\xf7\x4e\xcd\xcf\xa5\x47\xd7\xfc\xd7\xa8\x78\x0f\x00\x00\xff\xff\x82\x42\x75\xa4\x08\x02\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 520, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0x69, 0xc5, 0xf1, 0xe, 0xc, 0x77, 0xe5, 0x78, 0xce, 0xfc, 0xc2, 0x41, 0xf8, 0x21, 0x87, 0x8a, 0xb7, 0x67, 0xdd, 0x48, 0x94, 0x63, 0x79, 0x69, 0x4e, 0x38, 0x53, 0x3c, 0xdb, 0xc7, 0x13}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/metrics/cluster-role-binding.yaml": assetsDnsMetricsClusterRoleBindingYaml,

	"assets/dns/metrics/cluster-role.yaml": assetsDnsMetricsClusterRoleYaml,

	"assets/dns/metrics/role-binding.yaml": assetsDnsMetricsRoleBindingYaml,

	"assets/dns/metrics/role.yaml": assetsDnsMetricsRoleYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"metrics": {nil, map[string]*bintree{
				"cluster-role-binding.yaml": {assetsDnsMetricsClusterRoleBindingYaml, map[string]*bintree{}},
				"cluster-role.yaml":         {assetsDnsMetricsClusterRoleYaml, map[string]*bintree{}},
				"role-binding.yaml":         {assetsDnsMetricsRoleBindingYaml, map[string]*bintree{}},
				"role.yaml":                 {assetsDnsMetricsRoleYaml, map[string]*bintree{}},
			}},
			"namespace.yaml":       {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml": {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":         {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
