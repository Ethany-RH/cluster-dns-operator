// Code generated by go-bindata.
// sources:
// assets/dns/cluster-role-binding.yaml
// assets/dns/cluster-role.yaml
// assets/dns/configmap.yaml
// assets/dns/daemonset.yaml
// assets/dns/namespace.yaml
// assets/dns/service-account.yaml
// assets/dns/service.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x4b\x04\x41\x0c\x46\xfb\xf9\x15\xc3\xf5\xbb\x62\x27\xe9\xd4\xde\xe2\x04\xfb\xdc\x4c\xce\x8b\xb7\x9b\x2c\x49\x66\x41\x7f\xbd\x0c\x83\x20\x28\x68\x37\xc5\x37\xef\xbd\x5c\x59\x2a\xe4\xc7\xa5\x79\x90\x1d\x75\xa1\x07\x96\xca\xf2\x9a\x70\xe3\x17\x32\x67\x15\xc8\x76\xc2\x32\x63\x8b\x8b\x1a\x7f\x60\xb0\xca\x7c\xbd\xf3\x99\xf5\x66\xbf\x4d\x2b\x05\x56\x0c\x84\x94\x73\xce\x82\x2b\x41\x2e\x83\x37\x55\xf1\x49\x37\x32\x0c\x35\xa8\xe2\xc9\xdb\xe9\x8d\x4a\x38\xa4\x29\x0f\xf5\x33\xd9\xce\x85\xee\x4b\xd1\x26\x91\xbe\x08\x7d\x3c\xde\xbe\x61\x21\xc8\xba\x91\xf8\x85\xcf\x31\x7d\x83\x27\xd3\x85\x8e\x74\xee\xee\x1f\x97\xa4\x3f\x6b\xfe\x21\x68\x4e\xf6\xd4\x47\xbd\xf8\xe0\xef\x1e\xb4\x82\x8f\x66\x1c\xcd\xf0\xeb\xcf\x2e\x38\xa4\xcf\x00\x00\x00\xff\xff\x71\x91\xce\x9d\x5f\x01\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 351, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8e\xb1\x6e\xc3\x40\x08\x40\x77\xbe\x02\x65\xb7\xab\x6e\xd5\xad\x1d\xba\x67\xe8\x8e\xef\x90\x82\x72\x81\x13\x70\xae\xd4\xaf\x8f\x1c\x67\x7b\x0f\xe9\x01\x77\xd1\x56\xf0\xbb\xcf\x48\xf6\xab\x75\x06\x1a\xf2\xcb\x1e\x62\x5a\xd0\x37\xaa\x2b\xcd\xbc\x99\xcb\x3f\xa5\x98\xae\xf7\xaf\x58\xc5\x3e\xf6\x4f\x78\x70\x52\xa3\xa4\x02\x88\x4a\x0f\x2e\x58\xcf\x35\x4b\xd3\x58\x6c\xb0\x53\x9a\x97\xa6\x01\x3e\x3b\x47\x81\x05\x69\xc8\x8f\xdb\x1c\x71\x44\x0b\x5e\x2e\x80\x48\x99\x2e\xdb\x4c\xbe\x72\xa4\x4b\x3d\xce\x44\x41\x9d\xbd\x03\xa2\x73\xd8\xf4\xca\xef\x82\xb5\x0d\x13\xcd\x78\x59\xb0\xef\x52\xf9\x94\x61\xed\x84\xe3\x99\x18\x74\xce\x77\xf6\xed\xdd\x76\x89\x7c\xc1\x1f\x65\xbd\xc1\x33\x00\x00\xff\xff\x13\x4d\xe1\x31\xfb\x00\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 251, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x4e\x2b\x31\x0c\x45\xf7\xf3\x15\x96\xde\xba\xd3\x57\x8d\x8a\x44\xb6\xed\x16\xba\x28\x62\x6f\x92\x3b\x4d\xd4\x4c\x12\x39\x49\x05\x02\xfe\x1d\x4d\x5b\x02\x95\xf0\xea\xd8\x3e\xb1\x6e\x8e\x2e\x18\x45\x9b\x18\x46\x77\x78\xe0\xd4\x71\x72\xcf\x90\xec\x62\x50\x74\x5a\x75\x13\x0a\x1b\x2e\xac\x3a\xa2\xc0\x13\x14\x99\x90\xaf\x9c\x13\x6b\x28\x8a\x09\x21\x5b\x37\x96\x85\xf6\x35\x17\xc8\x62\x56\xbe\x1f\x6d\xa2\x60\x74\x1e\x8a\x3e\x3a\x22\xa2\x5e\xad\x07\x7a\x3f\xe3\x5c\x10\x89\x92\x5b\x6b\xc1\xbe\xd8\xd6\xfe\x7b\xda\x6d\x77\x8a\xf6\x28\x54\x33\x84\xf4\x39\x66\x15\x18\xda\x3e\xee\xc9\xc4\x89\x5d\x68\xf6\xb1\xbe\x40\x02\x0a\x32\x5d\x93\xf4\x3e\x6a\xf6\xe4\xc2\x82\x8d\x91\x9e\x25\x31\xb9\x74\x77\x81\x9f\x10\x73\xa5\x68\x32\xb9\x90\xa1\xab\xe0\x66\x53\x53\x2e\x02\x9e\x6e\x86\x23\x7b\x5f\xac\xc4\x7a\xb0\x7f\x9f\x6f\xf6\x67\xa3\x24\x71\x42\xb1\xa8\x99\xd4\xfd\x6a\x3d\xfc\x5e\xbc\xbe\x51\x4f\x4b\x14\xbd\x14\xe4\xe8\x4f\xfd\xfc\xd5\x26\x68\xd6\x16\x34\xfc\x6f\x03\x81\x8f\x6c\xba\xcb\xfd\xaf\x00\x00\x00\xff\xff\xef\xba\x59\xb7\xc3\x01\x00\x00")

func assetsDnsConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsConfigmapYaml,
		"assets/dns/configmap.yaml",
	)
}

func assetsDnsConfigmapYaml() (*asset, error) {
	bytes, err := assetsDnsConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/configmap.yaml", size: 451, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xdb\x38\x10\xbd\xe7\x57\x0c\x7c\x5e\xc5\x36\x82\xec\x66\x79\xdb\xb5\xdd\x36\x40\xe3\x0a\x89\x9b\x4b\x51\x04\x13\x6a\x6c\x0d\x42\x71\x58\x72\xe4\xd6\xff\xbe\x50\x14\x3b\x94\xeb\x16\x08\x4f\xc2\xbc\x79\x6f\xbe\xf5\xc4\xbe\x32\x30\x47\x6a\xc4\xdf\x91\x9e\x61\xe0\x7b\x8a\x89\xc5\x1b\xc0\x10\xd2\x78\x3b\x3d\x6b\x48\xb1\x42\x45\x73\x06\xe0\xb1\x21\x03\x95\x4f\x2f\xdf\x29\xa0\x25\x03\x12\xc8\xa7\x9a\xd7\x5a\x58\xd7\x26\xa5\x58\xf4\x2e\x0e\x1f\xc9\xa5\x8e\x08\x99\x0f\x86\xd0\x6b\xa4\x40\xb6\x03\x13\x39\xb2\x2a\xb1\x77\x6c\x50\x6d\xfd\x31\x63\x9e\xe4\x02\x28\x35\xc1\xa1\xd2\x0b\x2b\xcb\xb2\x7b\x6e\x20\xf0\x1b\x09\x80\x7d\x0a\xcf\xdf\x14\xb7\x6c\xe9\x3f\x6b\xa5\xf5\xba\xcc\x4a\xed\x9e\x15\xaf\xc8\x9e\xe2\x41\xb4\x18\xb4\xa3\x7f\xdc\xe0\x86\x0c\x8c\x2a\xb1\x4f\x14\xcf\x59\xc6\x87\xc0\x63\x89\xbc\x61\x5f\x58\x89\x54\xf9\x64\xb6\x17\xe7\xd3\xe9\xf9\x64\x34\xe4\x96\xad\x73\xa5\x38\xb6\x3b\x03\xd7\xeb\xa5\x68\x19\x29\x91\xd7\x83\x57\xa4\x24\x6d\xb4\x94\xd5\x06\xe0\xb8\x61\x1d\x58\xba\x8e\x34\x12\x77\x06\xa6\xff\x4c\x6e\x38\x43\x22\x7d\x6b\x29\x1d\x7b\xdb\xd0\x1a\x98\x4e\x26\xcd\x49\x8d\x81\x04\xc6\x4d\x32\xf0\x05\x46\x85\x15\xbf\x1e\xfd\x05\xa3\x31\xa9\x1d\xbf\xd4\x35\x9e\x49\xa4\x35\x3b\x1a\xc1\xd7\x03\x65\x2b\xae\x6d\xe8\xa6\xeb\x6b\x16\x77\xdf\xc0\x4e\x86\x37\x45\xef\x94\xc5\x6f\x3a\xff\x12\xb5\x36\x90\x47\x18\xd4\x82\xd5\x27\xef\x76\x06\x34\xb6\xaf\xd4\x20\x71\x18\xe7\x30\xbc\x52\xa2\x1a\xb8\xbc\xc8\x34\x7e\x1d\x22\x40\x88\xa2\x62\xc5\x19\xf8\x3c\x2f\xdf\xaa\x53\xa8\x0d\x27\xb5\x56\xb3\x3f\x68\xfd\x3b\x3d\xa1\xd6\x90\x46\xb6\xa7\x33\xcb\xd5\x1c\x6f\xc9\x53\x4a\x65\x94\x47\xca\x07\x5b\xab\x86\xf7\xa4\xc3\x59\x87\xbe\xa5\x35\xa1\xd3\x7a\x88\x3c\xa7\x72\x35\xb9\x9a\x0c\xcc\xc9\xd6\xd4\xa5\xf3\x61\xb5\x2a\x33\x80\x3d\x2b\xa3\x9b\x93\xc3\xdd\x1d\x59\xf1\x55\x32\xf0\x77\x4e\x55\x6e\x48\x5a\x3d\x80\x97\x19\x96\x5a\x6b\x29\xa5\x55\x1d\x29\xd5\xe2\x2a\x03\xd3\x0c\x5d\x23\xbb\x36\x52\x86\xbe\x72\x13\xd9\x36\xb2\xee\x66\xe2\x95\x7e\x0c\x8a\x43\xe7\xe4\x7b\x19\x79\xcb\x8e\x36\xb4\x48\x16\x1d\xea\xf3\xef\x6c\x8d\x2e\xe5\xcb\x65\x31\xe0\x23\x3b\x56\xa6\xa3\x53\xc0\xaa\x1a\x1a\x0a\x58\x2e\x56\x0f\xff\x5f\x2f\xe7\x0f\x77\x8b\xdb\xfb\xeb\xd9\x62\x00\x57\x51\xc2\x31\x01\x9d\x3b\xb1\xa6\xb7\x22\xfa\x8e\x1d\xa5\x5d\x52\x6a\x06\x4b\x5b\xf9\xb4\x3f\xfb\x39\xad\xb1\x75\xfb\x8b\xef\xaf\xe2\x0d\x57\xd3\xdb\x6f\xf0\x28\xa7\x53\x6b\x0e\xc0\x4a\x4d\x3a\x4e\xfe\x89\x76\x06\xf6\x67\x3c\xc0\xf6\xbb\x73\x00\x7f\x06\x00\x00\xff\xff\xb0\x1d\x3c\xe2\x41\x06\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 1601, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\xae\x42\x31\x08\x06\xe0\x9d\xa7\x20\x67\xef\xbd\x71\xe5\x21\x1c\xdd\x49\xfb\x1b\x89\xa7\xd0\x14\xf4\xf9\x8d\x93\xfb\xf7\x34\x1f\xc2\x57\x9d\xc8\xa5\x1d\xa4\xcb\x6e\xd8\x69\xe1\xc2\xef\x0b\x4d\x94\x0e\x2d\x15\x62\x76\x9d\x10\x8e\x05\xcf\x87\xdd\xab\xf5\xf3\x95\x85\xdd\x86\x27\x31\xab\x7b\x94\x96\x85\xe7\x17\xf3\x0f\xfe\x59\xfc\x7b\x0c\xb4\xc4\x89\x5e\xb1\x85\x8f\x83\x3e\x01\x00\x00\xff\xff\xb5\x9f\xce\xf1\x79\x00\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 121, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xca\x31\x0e\x82\x21\x0c\x06\xd0\x9d\x53\xf4\x02\x0c\xae\xdd\x3c\x83\x89\x7b\x53\x3e\x63\xa3\x14\x42\x0b\xe7\x37\x26\xff\xf6\x86\xf7\x31\x6f\x4c\x0f\xac\x63\x8a\xbb\xea\xd8\x9e\x45\xa6\x3d\xb1\xc2\x86\x33\x9d\x5b\xe9\x48\x69\x92\xc2\x85\xc8\xa5\x83\xa9\x79\x5c\x8e\x29\x0a\xa6\x31\xe1\xf1\xb6\x57\x56\xfd\xee\x48\xac\xfa\x2f\xbf\x00\x00\x00\xff\xff\x35\xeb\xbe\x6a\x5d\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 93, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xbd\x0a\x02\x31\x10\x84\xfb\x3c\xc5\xbc\x40\x0a\x11\x9b\xb4\xfa\x00\x07\xfe\xf4\x6b\xb2\x62\x30\x97\x2c\xd9\xf5\x9e\x5f\xee\x14\xd4\x42\xcb\x61\xbe\xf9\x98\x5b\xae\x29\x60\xcf\x7d\xca\x91\x1d\x49\x3e\x71\xd7\xdc\x6a\xc0\xb4\x72\x23\x1b\x25\x32\x0a\x0e\xa8\x34\x72\x40\xaa\x8a\x57\x50\xa1\xc8\x01\x4d\xb8\xea\x35\x5f\xcc\xc7\x72\x57\xe3\xee\x53\x55\x07\x14\x3a\x73\xd1\x79\x89\x0f\x86\x44\x16\x89\x53\xe1\x38\x97\xca\x85\xa3\xb5\xfe\x13\x04\xa4\x75\x5b\x44\xfe\x7d\x62\xa1\xe7\x22\x60\xb3\x7e\x86\xde\xac\xc5\x56\x02\x8e\xbb\xe1\x1b\xf6\x16\xe5\xdf\xe0\xb0\x1d\xdc\x23\x00\x00\xff\xff\x08\x3d\xbd\xa5\x08\x01\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 264, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,
	"assets/dns/cluster-role.yaml":         assetsDnsClusterRoleYaml,
	"assets/dns/configmap.yaml":            assetsDnsConfigmapYaml,
	"assets/dns/daemonset.yaml":            assetsDnsDaemonsetYaml,
	"assets/dns/namespace.yaml":            assetsDnsNamespaceYaml,
	"assets/dns/service-account.yaml":      assetsDnsServiceAccountYaml,
	"assets/dns/service.yaml":              assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"dns": &bintree{nil, map[string]*bintree{
			"cluster-role-binding.yaml": &bintree{assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         &bintree{assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"configmap.yaml":            &bintree{assetsDnsConfigmapYaml, map[string]*bintree{}},
			"daemonset.yaml":            &bintree{assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml":            &bintree{assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml":      &bintree{assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":              &bintree{assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
