// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/dns/cluster-role-binding.yaml (223B)
// assets/dns/cluster-role.yaml (210B)
// assets/dns/daemonset.yaml (5.387kB)
// assets/dns/metrics/cluster-role-binding.yaml (279B)
// assets/dns/metrics/cluster-role.yaml (246B)
// assets/dns/metrics/role-binding.yaml (293B)
// assets/dns/metrics/role.yaml (284B)
// assets/dns/namespace.yaml (369B)
// assets/dns/service-account.yaml (85B)
// assets/dns/service.yaml (508B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x8e\x83\x40\x0c\x05\xd0\x7e\x4e\xe1\x0b\xc0\x6a\xbb\xd5\x74\x9b\xdc\x80\x48\xe9\xcd\x8c\x09\x0e\x60\xa3\xb1\x87\x22\xa7\x8f\x10\x4a\x45\x3a\x17\xfe\xff\xfd\x89\x25\x47\xb8\xce\xd5\x9c\x4a\xa7\x33\x5d\x58\x32\xcb\x23\xe0\xca\x77\x2a\xc6\x2a\x11\x4a\x8f\xa9\xc5\xea\xa3\x16\x7e\xa1\xb3\x4a\x3b\xfd\x59\xcb\xfa\xb3\xfd\x86\x85\x1c\x33\x3a\xc6\x00\x00\x20\xb8\x50\x04\x5d\x49\x6c\xe4\xc1\x9b\x2c\x16\xac\xf6\x4f\x4a\x6e\x31\x34\x70\x78\x37\x2a\x1b\x27\xfa\x4f\x49\xab\x78\xf8\xc4\xf6\xe7\xe3\xb6\x15\xd3\xa9\xa7\xe8\x4c\x1d\x0d\x3b\x74\x9a\x1d\xbe\xd3\xef\x00\x00\x00\xff\xff\xfa\x62\xe7\x50\xdf\x00\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xf6, 0x2a, 0x3b, 0x84, 0xd7, 0x3e, 0xc4, 0xe1, 0x70, 0x66, 0x31, 0xda, 0xc4, 0x2f, 0x53, 0x27, 0x29, 0x13, 0xfe, 0x80, 0x36, 0xc5, 0xa1, 0x70, 0xdc, 0x2d, 0xef, 0xcf, 0xe0, 0xc4, 0xeb}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\xbd\x6e\xc5\x30\x08\x46\x77\x3f\x05\xba\x7b\x52\x75\xab\xbc\x76\xe8\xde\xa1\x3b\xd7\xa6\x0a\x8a\x03\x16\xe0\x54\xea\xd3\x5f\xe5\x67\x3b\xe7\x08\xf4\xad\x2c\x35\xc3\x67\x1b\x1e\x64\xdf\xda\x28\x61\xe7\x1f\x32\x67\x95\x0c\xf6\xc4\x32\xe3\x88\x45\x8d\xff\x31\x58\x65\x5e\x3f\x7c\x66\x7d\xdb\xdf\xd3\x46\x81\x15\x03\x73\x02\x10\xdc\x28\x83\x76\x12\x5f\xf8\x37\xa6\x2a\x9e\x6c\x34\xf2\x9c\x26\xc0\xce\x5f\xa6\xa3\xfb\x71\x39\xc1\xe3\x91\x00\x8c\x5c\x87\x15\xba\x1b\x49\xed\xca\x12\x7e\x9a\x93\xed\x5c\xe8\x92\xae\xf5\x82\x63\xc3\x3b\x5e\x7d\x27\x7b\xde\xbf\x8d\x3d\x4e\xf8\xc3\x28\x4b\x7a\x05\x00\x00\xff\xff\xcb\xdd\xd7\x2a\xd2\x00\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 210, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xb2, 0x0, 0x7d, 0x4a, 0xd9, 0xf, 0x8, 0x44, 0xe7, 0xab, 0x82, 0xe4, 0x50, 0x94, 0xaa, 0x4e, 0xfd, 0xa0, 0x63, 0xba, 0x18, 0xcf, 0xeb, 0xa6, 0xe4, 0x2d, 0x4, 0x35, 0xd5, 0xc7, 0xd}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x73\x1b\xb9\x0d\xfe\xee\x5f\x81\xac\x3c\x71\xd2\xf3\xfa\xa5\x39\xa7\xd7\x4d\x7c\x3d\xd7\x96\x1b\xcf\x45\x96\xc6\x52\xee\x3e\x78\x3c\x19\x8a\x0b\x69\x51\x73\x49\x1e\xc9\x5d\x45\x63\xeb\xbf\x77\xb8\xab\x97\x7d\xab\x3b\x6d\xe7\x66\x2e\x1f\x14\x8b\x00\x1f\x02\x20\xf0\x00\xd4\x23\xc9\x38\x82\x2b\x86\xa9\x92\x63\x74\x7b\x4c\xd3\x2f\x68\x2c\x29\x19\x01\xd3\xda\x1e\xe7\xa7\x7b\x3d\x90\x2c\xc5\xc3\xe2\xd3\x6a\xc6\x11\x98\x8c\x41\xb0\x29\x0a\x0b\xcc\x20\x58\x74\xc0\x1c\x98\x4c\x3a\x4a\x71\xcf\x6a\xe4\xd1\x1e\x80\xc3\x54\x0b\xe6\xd0\xff\x0d\xb0\x59\x2d\xfe\x46\x93\x13\xc7\x0b\xce\x55\x26\xdd\x2d\x4b\x31\x82\x58\xda\xb5\x54\x1b\x52\x86\xdc\xf2\x52\x30\x6b\x4b\xa1\x5d\x5a\x87\x69\x28\x55\x8c\x21\x37\xe4\x88\x33\xb1\xd6\xe6\x4a\x3a\x46\x12\x8d\xdd\xa0\x87\x85\xa5\x55\x44\x80\x1e\x50\xca\xe6\x08\x64\x9b\xd6\x6e\x34\x0a\xf9\x28\x13\x62\xa4\x04\xf1\x65\x04\x37\xb3\x5b\xe5\x46\x06\x2d\x4a\xb7\xd5\x72\x68\x52\x92\xcc\x91\x92\x03\xb4\xd6\x6f\x59\xab\x5f\x33\x21\xa6\x8c\x3f\x4e\xd4\x67\x35\xb7\x43\xd9\x37\x46\x99\xed\x3e\xae\xd2\x94\xf9\x50\xdf\x43\xc0\x95\xc1\x58\xda\x00\x1e\xb6\x62\x66\xe6\xb6\x90\x85\x5c\xc9\x59\x70\x08\xc1\x31\x3a\x7e\xbc\xd6\x3c\xbe\x54\x06\x67\x24\xb0\xba\x25\x57\x22\x4b\x71\xe0\x03\xb8\xf5\x7c\xe7\xbb\x87\xa1\x79\x58\x2a\x6d\xa5\x00\xa9\xd7\x1f\x31\x97\x44\x50\x3d\xa1\xa2\x61\x90\xc5\x43\x29\x96\x11\x38\x93\xed\xb6\x6a\x65\xea\xe7\x6c\xe3\x3e\x52\xc6\x45\x70\xf6\xee\xec\x5d\x05\xa5\x7d\x03\xfe\x5e\x95\x53\x5c\x89\x08\xbe\x5c\x8d\xfe\x7b\xa4\xd0\x71\xdd\x89\x36\xb9\x7c\x01\xed\xaf\xa7\x1d\x68\x29\x3a\x43\xbc\xdb\xb6\x2a\x9a\x8f\x05\x49\xb4\x76\x64\xd4\x14\xa3\x8a\x7e\xe2\x9c\xfe\x07\xba\xea\x12\x80\x2e\xe3\x9a\x20\x13\x2e\xa9\x4b\x0a\x5b\x7e\x38\xf9\xe1\xa4\xb6\x6c\x79\x82\xde\x9e\x4f\x93\xc9\xa8\x22\x20\x49\x8e\x98\xb8\x42\xc1\x96\x63\xe4\x4a\xc6\x36\x82\xd3\xea\x56\x8d\x86\x54\xdc\x2d\xb3\x19\xe7\x68\xed\x24\x31\x68\x13\x25\xe2\x08\x4e\x2b\xd2\x19\x23\x91\x19\xac\x48\xab\xe1\xf1\x15\xa1\x32\xd7\x05\x2c\x28\xc7\x3f\x48\x28\xde\x9f\xbc\x60\xf2\xd9\xff\x11\x8a\xb3\xca\xcd\x5b\x95\x19\x8e\xb6\xea\x96\xa0\x94\x9c\xad\x3b\x9a\x62\xaa\xcc\x32\x82\xb3\xd3\x3f\x0f\xa8\x56\x46\xbf\x65\x68\x9b\xda\x5c\x67\x11\x9c\x9d\xa4\x9d\x10\x7f\x39\xd9\x22\x54\x28\xac\x24\x3d\x6f\x8f\xc8\xd1\xfc\x61\x08\xcd\x22\xcf\x0a\x92\x56\xd2\xe1\xb7\xda\xed\x6b\x43\x39\x09\x9c\x63\xdc\xe0\x90\x97\x29\x2b\x51\xd6\xd9\xd0\xd3\xdc\x0b\x7c\x55\x28\x55\x82\x80\x32\x87\xdb\x8b\x41\x7f\xdc\xbf\xfb\xa5\x7f\x57\x34\xa6\xcb\xcf\x5f\xc6\x93\xfe\xdd\xd7\xab\xe1\xe0\xe2\xe6\xb6\xab\x41\x6d\xb6\xa3\xcc\xdb\x66\x78\xa4\x9b\xcb\xfe\xb8\x62\x44\x0f\x2e\x3d\x7d\x83\x32\x50\xf6\x3f\x8b\x9a\x19\xe6\x30\x06\x41\xd6\x81\x9a\x6d\x3a\x9a\xad\xed\xba\x1d\x4e\xfa\x11\x5c\x2b\x03\x52\x2d\x0e\x01\xa5\xcd\x0c\x82\x4b\xd0\x62\x61\x96\x41\xc1\x1c\xe5\x58\x76\xd6\x0f\x30\x53\x06\x90\xf1\xa4\x2e\x38\xac\x61\x32\x09\x4c\x10\xb3\xb0\x20\x97\x78\xac\xa6\xbf\x36\x9b\xcd\xe8\x1b\x2c\x48\x08\x60\xc2\x2a\x98\x22\xb0\x38\xc6\xf8\xa8\x82\x93\x33\x91\x61\x04\x41\x91\x23\xa1\xc1\x39\x59\x67\x96\x47\x4a\xa3\xb4\x09\xcd\x5c\xd8\x10\xd8\x9c\x07\xad\x5e\x56\x09\xdd\xf1\x94\xe4\xf1\x94\xd9\xa4\xb2\x16\xf2\xca\x97\xe7\xaa\x13\xaf\xda\xea\x50\xdc\x51\x98\x29\xd0\xa4\xd1\x57\xe6\x5e\xb5\xc6\x0d\xd3\x70\xf0\x4f\x35\xb5\x10\x6a\x78\x86\x6f\xbe\x5f\xc2\xa3\x77\xf1\xf9\xb9\xc8\xb1\x0f\xb0\x60\xe4\x3e\x00\x7e\x23\x07\x27\x07\x30\xe9\xdf\x0d\xaa\x08\xc3\x51\xff\x76\xfc\xe9\xe6\x7a\xf2\x75\x70\x71\xf7\x73\xff\xee\x3c\xd8\xf9\x3a\x47\x89\xc5\x6d\xd6\x4b\x2d\xa8\x6c\xff\x34\x1c\x4f\xc6\x5f\xaf\x6f\x3e\xf7\xcf\x83\x5d\x1e\x56\x35\x26\xfd\xc1\xa8\xa5\x70\xe4\x52\x1d\x54\xcd\xb8\xb9\x1e\x9f\x1f\x1c\xc2\x41\xd1\x59\x20\x34\x10\xb2\x6d\xea\xc0\xc7\x8f\x1f\x21\xd8\x7f\xda\x24\xe0\xaa\xb6\xb3\x07\x03\xf6\x88\xc0\x8a\xa9\x4a\x19\x66\x96\xe0\x4b\x65\x97\x06\x4a\xc4\x65\x09\x15\xeb\x07\x16\x98\x73\x86\xa6\x99\x43\x5b\xbd\x79\xae\x21\x9c\x41\x18\xee\xa4\xa1\x92\x62\xe9\x0f\xde\x39\xb9\x0a\xfc\xf7\xad\x4b\x75\x4b\x16\x89\x3f\xb7\x0c\x7a\xac\x6a\x4c\x16\x23\x17\x3e\xb1\xc3\x0b\xb0\x39\xff\x4a\xda\xd6\xc4\x3e\xbf\x6d\xce\x81\xa4\x87\xdf\xf8\x7d\xff\xd3\xc3\x2a\x68\x41\x79\x8f\xaf\xd1\xf1\x64\x13\x1f\xb8\x19\xc1\xcc\xa8\x14\xb8\xc8\xac\x43\xe3\xb9\x11\x68\x06\xba\x24\xb4\x23\xf8\x15\x21\xf5\x21\xb2\x98\xa3\x61\x02\x9c\x21\xb4\x2d\x4c\xa7\x20\x56\x40\x2e\x82\x9b\x51\xfe\xfd\xa1\xff\x7c\x5f\x7c\x7e\x0f\x2a\x47\xe3\xdb\x7f\xc1\x22\x7e\x7d\xbb\x72\x04\x93\x04\xc1\x2d\x14\x08\xe6\xeb\x5d\x76\x00\x7b\xbf\xbd\x83\x31\x6a\xa1\x96\x29\x4a\xb7\xae\xd1\x9f\x33\xb3\x34\xa0\xa4\xbf\x21\x34\x30\xd4\x28\xc7\x8e\xf1\x47\x78\x33\x1c\x8f\x4e\xdf\xbd\x85\x10\x5c\xa2\x2c\x7a\xbb\xa4\x72\x2d\x60\x9b\x69\xdf\x33\xfd\xd0\x04\x42\xb1\x78\xca\x04\x93\x1c\x8d\x2d\xec\xf4\x7d\x86\x0a\x2e\x61\x3c\x21\x39\x87\xab\xdb\x31\xb8\xc4\xa8\x6c\x9e\x14\xa6\x37\xf0\x78\x1a\xdb\xf3\x37\x07\x31\xcd\x21\x74\x70\x01\x3f\x05\xfb\x4f\x3b\x02\x5d\x05\xf0\x9d\x4d\xfc\x69\xfe\x82\x72\xbe\x3a\xda\x7f\xaa\xf3\xcb\x2a\x38\x68\x20\x96\xff\xb6\x88\x17\x17\xbf\x03\x28\x7c\xe7\xb8\xfe\x7d\x6c\xfd\x5f\x91\xdf\x36\xa0\xfd\xdd\x93\x4f\xed\xfd\xa7\x57\x3e\xc8\xf7\x7f\x7a\x58\x35\x54\x5a\x29\x0e\x40\xda\x9e\xbf\xd9\x7f\x83\x39\x13\xfe\xb0\x62\x23\x3d\xac\x82\xb7\x4d\x78\xf0\xb9\x7e\x7f\x0f\xc1\xfe\xdf\x02\x08\xf1\x37\x38\x81\xd7\xaf\xfd\x96\x1e\xe9\xb2\x84\x20\x94\x08\x27\xf0\xf0\xf0\xc1\xf3\x81\xec\xf0\x7c\x5d\x93\xf7\x6b\xaf\x82\x87\xf3\x60\xff\x69\xb3\xbd\x43\x7f\x6a\x90\x3d\xb6\xd6\x67\xd4\x72\x4b\xe2\x5e\x6b\xa1\xb6\xd2\x83\x2f\x3a\x66\x0e\x2b\x4d\x1c\x0a\xda\xa1\x19\x2c\x10\xe6\xe8\x7c\x4b\xa2\xb8\x52\xec\xb6\x01\xf0\x2b\x96\x3d\x4d\x2a\x07\x59\x0b\x6c\x91\xa0\xf4\x6e\x9b\x62\x22\x5a\xbf\x6a\xb6\x68\x2a\x73\x7e\x56\x52\x06\x98\x26\xc8\x24\xcb\x19\x09\x36\x25\x41\x6e\xd9\x38\x66\xec\x98\x40\x40\x59\xb0\x07\x70\x95\x89\xd8\x37\x15\xeb\xfc\xd5\x56\x0e\xa4\x59\xc1\xba\x9b\x13\xc8\x42\x8c\x02\x1d\xc6\x7b\x5d\x77\xf6\xd4\xdb\xc4\xfe\x3f\xdf\x54\x0f\xfe\x9e\x91\x88\x81\x81\xc4\x45\x85\xd2\x4b\xf6\xab\xfa\xec\xd9\x45\x65\x06\x78\x66\x9d\x4a\xb7\x46\xcf\x48\x38\x34\x18\x7b\xb7\x1b\xd8\x73\x83\x1a\xc2\x1c\x82\x1e\xec\x3f\x35\x7b\x62\xc9\xfa\xb5\x2e\xf0\xe3\x0b\x7d\xa0\xb4\xf5\x42\x6b\x2c\x68\xa8\x6c\x9a\x3b\x23\x3c\xd7\xb7\x87\x22\x68\xb5\x81\x57\xd5\xc8\x74\xb4\x81\x75\x65\xe9\xb2\xb4\x36\xca\x65\x06\x3f\xac\x3a\x37\x00\x20\x4f\x14\x14\xc9\xbd\x2a\x37\x6d\xfe\x6b\x57\x32\xfc\x9b\x50\xfc\xd8\xf2\xbd\x79\x48\x2b\xef\xbb\x32\xdf\xc7\x68\x32\xbc\x1a\x46\x1d\x15\xc0\x9c\x4a\x89\x33\x21\x96\xbe\x2d\xb1\x5c\x51\x0c\x4c\x2e\x81\x24\x57\xd2\x92\x75\x28\x1d\x4c\x31\x61\x39\x55\x26\xef\x0d\xea\x1d\x6a\xe1\x87\xd1\xae\x8c\x48\x55\x4c\x33\xc2\x18\xf2\xf2\xc7\x1c\x9f\x88\x12\x31\x6e\xa4\xa7\x6f\x07\xba\xe1\x66\x2b\x07\x9e\x9f\xd7\x43\xc3\xcb\x7a\x6d\xaf\x37\xba\xbe\x38\x7c\xd5\x1a\x4c\x55\x8e\xf1\xce\xd7\x22\xab\xb9\x41\xe6\xf0\xb8\xac\x9e\xa2\xa5\xed\x46\x13\xe0\x4a\x2f\x81\x27\x99\xa9\x17\x49\x83\x82\xac\x40\xd4\xf0\xfe\x04\x5e\x17\x53\x60\x4d\x96\x49\x3f\x58\xb6\xa7\x91\xda\xe5\x75\xbe\xf6\x5e\x7a\xc1\x6d\x1e\x70\xb1\xb4\x9b\xe7\xd2\x15\xce\x58\x26\x36\x87\xfb\x49\x72\x8c\x02\xb9\x53\x66\x07\xf0\x98\x4d\xd1\x48\xf4\x23\x19\xa9\x63\x65\x23\x10\x24\xb3\x6f\xa5\x70\xad\x55\x3e\x92\x5a\x3f\x66\x75\xff\xa0\x53\xae\x0e\x98\x8e\x2a\x6f\xa2\x5b\x96\xbe\xf4\x2e\x04\x20\x87\x69\xcd\xad\x10\x1e\x71\x19\xc1\xe6\x67\xa6\x8e\x97\x7c\x43\xf4\xc2\x9b\xcd\x2f\x15\x0f\xb6\xbd\x26\x46\xc7\x03\x0e\xc0\x2d\x35\x46\x70\xbd\x43\x70\x4a\xf8\x69\x9c\x94\xdc\x9a\xd8\x2b\x86\x1a\x9f\xbf\xd6\x27\x8f\xc9\x24\xf8\x19\x6f\xb9\xf0\x7c\x7f\xb4\x57\xf3\x21\x28\x67\x78\x25\xf0\xa8\x1e\xed\x94\xf9\xa9\x71\x97\xa6\x4a\xfb\x63\x94\x89\xa0\xef\xe9\xdd\xee\xfd\x2b\x00\x00\xff\xff\xbe\xee\x56\xe2\x0b\x15\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 5387, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x72, 0x41, 0x67, 0x69, 0x2a, 0xe7, 0xa3, 0x5a, 0x5c, 0x60, 0x74, 0x37, 0xe, 0x33, 0xba, 0xa9, 0xb4, 0xce, 0xcc, 0x53, 0x99, 0x4b, 0x2, 0xbf, 0xe, 0x4e, 0x78, 0xfd, 0x4b, 0x74, 0x13, 0xdd}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xb1\x4a\x04\x41\x0c\x86\xfb\x79\x8a\xbc\xc0\xae\xd8\x1d\xd3\xa9\x85\xfd\x09\xf6\xb9\x99\x9c\x1b\x77\x27\x19\x92\xcc\x16\x3e\xbd\x2c\x8a\x08\xe2\xb5\x81\x7c\xdf\xff\xad\x2c\x35\xc3\xd3\x36\x3c\xc8\xce\xba\xd1\x23\x4b\x65\x79\x4b\xd8\xf9\x95\xcc\x59\x25\x83\x5d\xb0\xcc\x38\x62\x51\xe3\x0f\x0c\x56\x99\xd7\x93\xcf\xac\x77\xfb\x7d\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xaa\xf8\xd4\x54\x38\xd4\x0e\x92\x8f\xcb\x3b\x95\xf0\x9c\x26\xf8\xd2\xbd\x90\xed\x5c\xe8\xa1\x14\x1d\x12\x3f\x7f\xdd\xb4\x51\x2c\x34\x7c\x5a\x4f\xfe\x7d\xf6\x8e\x85\x32\x68\x27\xf1\x85\xaf\xf1\x9b\x6c\xba\xd1\x99\xae\x87\xf9\x4f\xc7\x7f\x6b\x00\xb0\xf3\xb3\xe9\xe8\x37\xba\xd2\x67\x00\x00\x00\xff\xff\x5b\x52\x00\xaa\x17\x01\x00\x00")

func assetsDnsMetricsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleBindingYaml,
		"assets/dns/metrics/cluster-role-binding.yaml",
	)
}

func assetsDnsMetricsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role-binding.yaml", size: 279, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0x95, 0x6f, 0xa4, 0xd5, 0xed, 0x48, 0x27, 0x41, 0x56, 0x5c, 0xea, 0x5c, 0x89, 0xdc, 0xc1, 0x44, 0x91, 0xd4, 0xb, 0x18, 0x85, 0x79, 0x75, 0xaa, 0x6e, 0xb5, 0x98, 0xbe, 0xc6, 0x33, 0x43}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcd\x31\x4b\x34\x41\x0c\x87\xf1\x7e\x3e\x45\xe0\xad\x77\x5f\xec\x64\x5a\x05\x3b\x0b\x05\xfb\xec\xce\xdf\xdb\x70\x3b\xc9\x90\x64\x0e\xf4\xd3\x8b\x70\xb6\x0f\x3f\x78\xfe\xd1\xd3\x39\x23\xe1\xe4\x76\x22\x48\x81\x86\x46\xdb\x17\x0d\xb7\x8e\x3c\x30\x83\xd2\x28\x76\xe7\x01\x7a\x7e\x7d\xa7\x8e\x74\xd9\x83\xa0\x6d\x98\x68\x16\x1e\xf2\x01\x0f\x31\xad\xe4\x1b\xef\x2b\xcf\x3c\xcc\xe5\x9b\x53\x4c\xd7\xeb\x63\xac\x62\xff\x6f\x0f\xe5\x2a\xda\xea\xdf\xf0\xcd\x4e\x94\x8e\xe4\xc6\xc9\xb5\x10\x29\x77\x54\x6a\x1a\x4b\x37\x95\x34\x17\xbd\x14\x9f\x27\xa2\x96\x85\x78\xc8\x8b\xdb\x1c\xf1\x4b\x17\xb2\x01\xe7\x34\x5f\x6d\x40\xe3\x90\xcf\x5c\xc5\x0a\x91\x23\x6c\xfa\x8e\x3b\x6b\x1a\x88\x42\x74\x83\x6f\xf7\x74\x41\x96\x9f\x00\x00\x00\xff\xff\x9f\xa8\x4d\x6c\xf6\x00\x00\x00")

func assetsDnsMetricsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleYaml,
		"assets/dns/metrics/cluster-role.yaml",
	)
}

func assetsDnsMetricsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role.yaml", size: 246, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xdb, 0xe0, 0x95, 0x65, 0xae, 0x53, 0x96, 0x3a, 0x5f, 0x5e, 0x8b, 0x69, 0xe2, 0x7d, 0x5, 0xbf, 0x1f, 0x3a, 0xf, 0xff, 0xd0, 0x6b, 0x23, 0x4f, 0xfd, 0x11, 0x7f, 0x57, 0xd4, 0x4a, 0x8b}}
	return a, nil
}

var _assetsDnsMetricsRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\xb1\x4e\xc4\x40\x0c\x04\xd0\x7e\xbf\xc2\x3f\x90\x20\xba\xd3\x76\xd0\xd0\x1f\x12\xbd\x6f\xd7\x97\x98\x64\xed\x95\xed\x4d\xc1\xd7\x23\xa4\x48\x54\x20\x5d\x3b\x9a\xd1\x1b\xec\xfc\x41\xe6\xac\x92\xc1\x6e\x58\x66\x1c\xb1\xaa\xf1\x17\x06\xab\xcc\xdb\xc5\x67\xd6\xa7\xe3\x39\x6d\x2c\x35\xc3\x55\x77\x7a\x65\xa9\x2c\x4b\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xba\x69\xa3\x58\x69\xf8\xb4\x5d\xfc\x8c\xbd\x63\xa1\x0c\xda\x49\x7c\xe5\x7b\x4c\x55\x3c\x99\xee\x74\xa5\xfb\xcf\x14\x3b\xbf\x99\x8e\xfe\x8f\x9f\x00\x7e\xf9\xbf\x34\x1f\xb7\x4f\x2a\xe1\x39\x4d\x67\xfb\x9d\xec\xe0\x42\x2f\xa5\xe8\x90\x78\xf0\x65\x53\xe1\x50\x63\x59\x20\x7d\x07\x00\x00\xff\xff\xb9\xd9\xab\x8d\x25\x01\x00\x00")

func assetsDnsMetricsRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleBindingYaml,
		"assets/dns/metrics/role-binding.yaml",
	)
}

func assetsDnsMetricsRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role-binding.yaml", size: 293, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x7d, 0xc7, 0x45, 0x33, 0xc4, 0xd8, 0xf, 0x8d, 0x89, 0x8d, 0x6, 0x47, 0xa7, 0xa, 0x6b, 0x17, 0xf5, 0x5f, 0x5a, 0x2f, 0xd8, 0xf9, 0x6, 0x71, 0xaa, 0x78, 0x8d, 0xb5, 0x7a, 0xf6, 0x99}}
	return a, nil
}

var _assetsDnsMetricsRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x4e\xec\x40\x0c\x45\xfb\xf9\x0a\x6b\x5f\x9d\x7d\xa2\x5b\x4d\x8d\x44\x47\x01\x12\xbd\x77\xe6\x42\xac\x24\xe3\x91\xed\x04\xc1\xd7\xa3\xcd\x06\x89\xca\xf7\x1e\x59\x3e\xfe\x47\x2f\x3a\xc3\xa9\x01\x15\x95\xae\x5f\xd4\x4d\x17\xc4\x88\xd5\x29\x94\xbc\x18\x77\xd0\xe3\xf3\x2b\x2d\x08\x93\xe2\x84\x56\xbb\x4a\x8b\xc4\x5d\xde\x60\x2e\xda\x32\xd9\x95\xcb\x99\xd7\x18\xd5\xe4\x9b\x43\xb4\x9d\xa7\x8b\x9f\x45\xff\x6f\x0f\x69\x92\x56\xf3\x2e\x4a\x0b\x82\x2b\x07\xe7\x44\xd4\x78\x41\xfe\xe3\x1b\xa6\x8b\x1f\xd8\x3b\x17\x64\xd2\x8e\xe6\xa3\xbc\xc7\x50\x9b\x27\x5b\x67\x78\x4e\x03\x71\x97\x27\xd3\xb5\xfb\xed\xca\x40\xa7\x53\x22\x32\xb8\xae\x56\x70\x30\x87\x6d\x52\xe0\x7b\xf9\xfd\xf8\xde\xba\xd6\x5b\xd8\x60\xd7\x63\xf9\x03\xb1\xcf\x59\xfc\x1e\x3e\x39\xca\x98\x7e\x02\x00\x00\xff\xff\x29\x39\xda\x05\x1c\x01\x00\x00")

func assetsDnsMetricsRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleYaml,
		"assets/dns/metrics/role.yaml",
	)
}

func assetsDnsMetricsRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role.yaml", size: 284, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xf2, 0x4e, 0x40, 0x91, 0xd8, 0x5e, 0x1c, 0x98, 0xb6, 0x2f, 0x11, 0x2a, 0x15, 0x8f, 0xe4, 0x7c, 0xfe, 0xc6, 0x31, 0xf3, 0xb2, 0xa0, 0x38, 0xb2, 0x3f, 0x15, 0x5a, 0x33, 0x12, 0xd2, 0x88}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcd\x4e\xc4\x30\x0c\x84\xef\x79\x8a\x51\x38\x2f\x3f\xd7\xbc\x03\x5c\x90\xb8\xbb\x8d\x97\x35\x4d\xed\x2a\x76\xcb\xeb\xa3\xb2\x15\xac\xb4\xc7\x68\x46\xf3\x7d\xf1\x24\x5a\x0b\xde\x68\x66\x5f\x68\xe4\x44\x8b\x7c\x70\x77\x31\x2d\xd8\x5e\xd2\xcc\x41\x95\x82\x4a\x02\x48\xd5\x82\x42\x4c\x7d\x7f\x02\xb6\xb0\xfa\x45\xce\xf1\x28\xf6\xa4\x56\xf9\xe4\xdc\x78\x0c\xeb\x05\x39\x27\x40\x69\xe6\xf2\x5f\x3b\x55\xf5\x04\x34\x1a\xb8\x1d\x13\x0f\x70\x0e\x6c\xd4\x56\x46\x18\x68\x33\xa9\xa8\xbc\xb0\x56\xd1\x4f\x98\x62\x5a\x07\x06\xd5\x59\x7c\x97\x42\x5c\x28\x8e\x82\xef\xf1\xdf\x38\x68\x11\xbf\xd7\xea\xab\x9e\x1a\x6f\xdc\x0a\xf2\x73\x3e\x98\xd4\x9a\x7d\xdf\x78\xcd\xa6\x12\xd6\x77\x62\x18\x9a\xd9\x84\xb3\x75\xbc\x73\xdf\x64\xe4\xd7\x6b\x0a\x1b\xbe\x78\x0c\x87\xec\x16\xe2\xbf\xbf\xbb\x1e\xed\x8e\x3a\xb6\xd5\x83\xfb\xcd\x70\x41\x8e\xbe\x72\x4e\x3f\x01\x00\x00\xff\xff\x82\x6d\x29\x03\x71\x01\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 369, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0xab, 0x50, 0x84, 0x61, 0x5f, 0x41, 0xf4, 0x17, 0x3b, 0x6, 0x84, 0xc0, 0x5f, 0x4f, 0xbb, 0xd8, 0x1d, 0xae, 0x26, 0x3e, 0x1f, 0x29, 0x2c, 0x84, 0x6d, 0x5e, 0xc1, 0x87, 0x97, 0x5f, 0xc9}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x09\xc4\x30\x0c\x05\xd0\xde\x53\x68\x81\x2b\xae\x55\x77\x33\x1c\xa4\x17\xf2\x0f\x11\xc1\xb2\xb1\x14\xcf\x1f\x02\xe9\x1e\xbc\xd3\xbc\x32\xfd\x31\x97\x29\x7e\xaa\xfd\xf2\x2c\x32\x6c\xc3\x0c\xeb\xce\xb4\xbe\xa5\x21\xa5\x4a\x0a\x17\x22\x97\x06\xa6\xea\xf1\x3a\x86\x28\x98\xfa\x80\xc7\x61\x7b\x7e\x9e\xba\x03\x00\x00\xff\xff\x8e\x2c\xf1\x2e\x55\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 85, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x12, 0x50, 0x4d, 0x67, 0x2f, 0x1b, 0x74, 0xa0, 0xa4, 0xbb, 0xa7, 0x59, 0xe9, 0x5a, 0xc6, 0xc1, 0x1a, 0xf8, 0x5f, 0xff, 0x5, 0xdb, 0xc, 0x10, 0x8b, 0xc1, 0x0, 0xcc, 0xf, 0x9f, 0x3a}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x6b\x02\x31\x14\x84\xef\xfb\x2b\x06\xbd\x95\x6a\x91\xd2\x43\xf7\x5a\x2f\xa5\x07\x85\x6a\xef\x6f\xb3\xd3\x35\x98\x4d\x96\xbc\xb7\x8a\xff\xbe\xb8\xb6\x56\xa5\xd0\x4b\x20\x99\x8f\x8f\x61\xb2\xf5\xb1\x2e\xf1\xce\xbc\xf3\x8e\x85\x74\xfe\x83\x59\x7d\x8a\x25\x76\xb3\x62\x8c\x28\x2d\xef\x87\x53\x3b\x71\x84\xc4\x1a\x41\x2a\x06\x85\x64\x42\x69\x10\x43\xee\xa3\xf9\x96\x85\x76\x74\x65\x01\x8c\xe1\x42\xaf\xc6\xfc\xba\xc4\xde\x87\x80\x8a\x90\xde\x52\x2b\xe6\x9d\x84\x70\x40\x2b\x51\x1a\xd6\xd3\x01\x56\x06\x3a\x4b\x19\x5e\x6f\x8d\x40\x97\xb2\xe9\x51\x3a\x19\x6a\x94\xa8\xa3\x16\xc0\x29\x28\xf1\xf4\x38\x5c\x4c\x72\x43\x5b\x0e\x4f\x67\x20\x27\x4b\x2e\x85\x12\xeb\xf9\xf2\x5a\x30\x31\xd7\xfd\x2b\xf9\x85\xce\xa2\xd5\xcb\xa5\xa8\xa5\x65\xef\x2e\xdb\x3c\xcf\xfe\x50\x5d\x61\x37\xaa\x31\x56\x8b\xf9\xa2\xc4\x3a\xba\xd4\xb6\x8c\x86\xfd\x86\x11\x7a\xfa\x0f\x58\xea\x52\x48\xcd\x01\x9f\x14\xeb\x33\xd1\x88\xf1\x38\x13\xa3\x54\xe1\x7b\xbf\x1f\xe8\x8d\x07\x3d\xad\x8f\x09\x46\xdb\xbe\x62\x8e\x34\xea\xd4\xa7\x87\x4d\x52\x3b\x96\x1e\x9d\xf3\xbb\x51\xf1\x15\x00\x00\xff\xff\x39\xb9\xe1\x45\xfc\x01\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 508, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0xa, 0xdd, 0x1a, 0x6a, 0xf0, 0x2e, 0x41, 0xec, 0xc7, 0xd1, 0x55, 0x31, 0xec, 0xf5, 0x56, 0xc6, 0x2a, 0xf2, 0x7, 0xfc, 0x4f, 0x91, 0xe1, 0x47, 0xd7, 0x5c, 0x45, 0xe7, 0x29, 0xdb, 0x81}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/metrics/cluster-role-binding.yaml": assetsDnsMetricsClusterRoleBindingYaml,

	"assets/dns/metrics/cluster-role.yaml": assetsDnsMetricsClusterRoleYaml,

	"assets/dns/metrics/role-binding.yaml": assetsDnsMetricsRoleBindingYaml,

	"assets/dns/metrics/role.yaml": assetsDnsMetricsRoleYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"metrics": {nil, map[string]*bintree{
				"cluster-role-binding.yaml": {assetsDnsMetricsClusterRoleBindingYaml, map[string]*bintree{}},
				"cluster-role.yaml":         {assetsDnsMetricsClusterRoleYaml, map[string]*bintree{}},
				"role-binding.yaml":         {assetsDnsMetricsRoleBindingYaml, map[string]*bintree{}},
				"role.yaml":                 {assetsDnsMetricsRoleYaml, map[string]*bintree{}},
			}},
			"namespace.yaml":       {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml": {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":         {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
