// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster-dns-cr.yaml (418B)
// assets/dns/cluster-role-binding.yaml (333B)
// assets/dns/cluster-role.yaml (212B)
// assets/dns/configmap.yaml (422B)
// assets/dns/daemonset.yaml (3.949kB)
// assets/dns/namespace.yaml (197B)
// assets/dns/service-account.yaml (93B)
// assets/dns/service.yaml (367B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsClusterDnsCrYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x6e\xe3\x30\x10\x44\x7b\x7e\xc5\x00\xae\xa5\x83\x5b\xb6\xe7\x2b\xdc\x1c\x0e\x38\x20\xfd\x86\x5c\x59\x9b\x50\x4b\x82\xbb\x32\x90\x7c\x7d\x20\x47\x31\x82\x24\xe5\x12\x9c\x99\x37\x73\xc0\x59\xcd\xa9\x14\xee\x48\x55\x27\xb9\xc0\x1a\x27\x99\x24\xe1\x4a\x65\x65\x03\x75\x06\xb5\x56\x84\x33\xc8\xd1\x57\x75\x59\x78\x0c\xd4\xe4\x81\xbb\x49\xd5\x88\xac\x36\xd6\xc6\x6a\xb3\x4c\x3e\x4a\xfd\x75\x3d\x52\x69\x33\x1d\xc3\xb3\x68\x8e\xf8\x5d\x56\x73\xee\xa7\xbf\xff\xc3\xc2\x4e\x99\x9c\x62\x00\x94\x16\x8e\xc8\x3c\xd1\x5a\x7c\xbf\xad\x51\xe2\x88\xbb\xdb\x90\xde\xb5\x43\x56\x1b\x6a\xe3\x4e\x5e\x3b\x02\x70\xc0\x1f\xb5\xb5\x33\x7c\x26\x47\xd5\xf2\x02\x9f\x19\xf7\x2f\x89\x14\x99\x0b\x3b\xdf\xde\xf7\x14\xec\x76\x1b\x32\xea\xe3\x13\x27\x1f\x03\x30\x89\x52\x91\x57\xee\xb6\x71\x0d\xdf\x0b\xed\xf2\xcf\x34\x61\x5b\x2a\xde\x48\xf6\x7e\xe7\x7f\x10\xfb\x61\x2c\xac\x26\x7a\xb9\x61\xc8\x97\xb9\xb7\xf0\xdd\xf3\x54\x17\x12\x8d\x1f\xe7\x58\x6a\xa2\x12\xde\x02\x00\x00\xff\xff\x37\x0d\x61\xe1\xa2\x01\x00\x00")

func assetsClusterDnsCrYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsClusterDnsCrYaml,
		"assets/cluster-dns-cr.yaml",
	)
}

func assetsClusterDnsCrYaml() (*asset, error) {
	bytes, err := assetsClusterDnsCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cluster-dns-cr.yaml", size: 418, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x10, 0x67, 0x1c, 0xa7, 0x2f, 0x42, 0x1f, 0xa1, 0x54, 0x90, 0x91, 0x93, 0x2c, 0x15, 0x5a, 0x5d, 0x9c, 0x32, 0x3d, 0x5, 0x61, 0x1f, 0xbf, 0xbb, 0x5e, 0xc3, 0xb2, 0xab, 0xdc, 0x7b, 0x44}}
	return a, nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x4b\x04\x41\x0c\x85\xfb\xfc\x8a\x70\xfd\xae\xd8\x49\x3a\xb5\xb7\x38\xc1\x3e\x37\x93\xf3\xe2\xed\x66\x96\x49\x66\x41\x7f\xbd\x0c\x83\x20\xa8\x60\x97\xe2\xbd\xf7\x7d\xb9\xaa\x65\xc2\xc7\xa5\x79\x48\x3d\x96\x45\x1e\xd4\xb2\xda\x2b\xf0\xa6\x2f\x52\x5d\x8b\x11\xd6\x13\xa7\x99\x5b\x5c\x4a\xd5\x0f\x0e\x2d\x36\x5f\xef\x7c\xd6\x72\xb3\xdf\xc2\x2a\xc1\x99\x83\x09\x10\x11\x8d\x57\x21\x4c\x63\x6f\xca\xe6\x94\xcd\xc1\xdb\xe9\x4d\x52\x38\xc1\x84\x83\xf8\x2c\x75\xd7\x24\xf7\x29\x95\x66\x01\x5f\xc5\x1e\x1e\xb7\x6f\x9c\x84\xb0\x6c\x62\x7e\xd1\x73\x4c\xdf\x36\xa1\x96\x45\x8e\x72\xee\xc8\x1f\x0f\xc0\x5f\x12\xff\xd8\x6d\x2e\xf5\xa9\x87\xba\xe8\xc1\xdf\x3d\x64\x25\x1f\xaa\x3c\x54\xe9\xd7\x66\x07\x1c\xe0\x33\x00\x00\xff\xff\xdb\x7c\x21\xe3\x4d\x01\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 333, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0x50, 0xb3, 0x9f, 0xeb, 0xa, 0xd9, 0xd9, 0x2b, 0xb7, 0xb, 0xed, 0x20, 0xa9, 0xa6, 0xdc, 0xbc, 0xc5, 0x1a, 0x4b, 0xc6, 0x69, 0x9e, 0xfd, 0xbb, 0x72, 0xdb, 0x46, 0x45, 0x59, 0x60, 0xa2}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\x3d\x6b\xc4\x30\x0c\x40\x77\xff\x0a\x71\x7b\x52\xba\x15\xaf\x1d\xba\x77\xe8\xae\xb3\x05\x27\xe2\x48\x46\x92\x53\xe8\xaf\x2f\x89\xb3\xbd\xf7\xd0\xc7\xc6\x52\x33\x7c\xb6\xe1\x41\xf6\xad\x8d\x12\x76\xfe\x21\x73\x56\xc9\x60\x4f\x2c\x2b\x8e\x78\xa9\xf1\x1f\x06\xab\xac\xdb\x87\xaf\xac\x6f\xc7\x7b\xda\x29\xb0\x62\x60\x4e\x00\x82\x3b\x65\x28\xf3\xcc\x52\xc5\x73\x15\x4f\x36\x1a\x79\x4e\x0b\x60\xe7\x2f\xd3\xd1\xfd\x9c\x5d\xe0\xf1\x48\x00\x46\xae\xc3\x0a\xdd\x8d\xa4\x76\x65\x09\xbf\xcc\xc9\x0e\x2e\x34\xa5\x6b\x9d\x70\x7e\xf1\x8e\xb3\x1f\x64\xcf\x7b\xb7\xb1\xc7\x05\xbf\x18\xe5\x95\xfe\x03\x00\x00\xff\xff\x8e\xf7\xdc\x36\xd4\x00\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 212, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0xae, 0xab, 0xc3, 0xc4, 0xe7, 0x95, 0x3c, 0x7d, 0x7a, 0xff, 0xe2, 0xeb, 0x3a, 0x89, 0x28, 0xa, 0x61, 0xef, 0x77, 0x3a, 0x21, 0x34, 0x13, 0xcf, 0xbf, 0x5f, 0xbe, 0x98, 0x56, 0x89, 0xd2}}
	return a, nil
}

var _assetsDnsConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\x4f\x4b\x03\x31\x10\xc5\xef\xf9\x14\x0f\x3c\x77\x6b\x59\x56\x30\xd7\x9e\xf5\xe8\x7d\x4c\x66\x9b\xd0\x6c\x12\x66\x92\xa2\xa8\xdf\x5d\x6a\x75\xb5\xe0\x3b\xbd\x7f\xfc\x8e\x31\x7b\x8b\x7d\xc9\x73\x3c\x3c\x50\x35\x54\xe3\x13\x8b\xc6\x92\x2d\x4e\x3b\xb3\x70\x23\x4f\x8d\xac\x01\x6e\xf0\x48\x0b\x23\x2a\x94\x1b\xa8\x41\x7a\x6e\x71\x61\x03\x64\x5a\x58\x2b\x39\xb6\x28\x95\xb3\x86\x38\xb7\x8d\x4b\x5d\x1b\xcb\xc6\x67\x35\x3f\x8c\x7d\x11\x9e\x63\x62\x8b\x77\x03\x00\x83\x9d\xc6\x69\xc4\xdb\x57\x38\x8b\x45\x8a\xe8\x1a\x03\x53\x6a\x61\x8d\xc7\xfe\xcc\x92\xb9\xb1\xe2\x9b\x3e\xa4\xe2\x28\x21\xe6\x0d\x79\x2f\x03\x49\x25\xc4\x7a\x77\x31\xbf\xd8\xb3\x6a\xf1\x8a\x98\x95\x5d\x17\xbe\x5a\x7a\xd5\x26\x4c\xcb\x55\x39\x53\x4a\x2d\x48\xe9\x87\xf0\x3f\x7e\x7d\x7f\xac\xae\x4a\x59\xb8\x05\xee\x0a\x7b\xbf\x9b\xc6\xbf\xc3\xcb\x2b\x06\x6c\xb9\xb9\xad\xb0\x96\x74\x1a\x5c\xc9\xf3\x7a\x70\xe4\x02\x63\xbc\x5d\x0b\xe1\x54\xc8\x9b\x0b\xff\x33\x00\x00\xff\xff\x6c\x54\x72\x1f\xa6\x01\x00\x00")

func assetsDnsConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsConfigmapYaml,
		"assets/dns/configmap.yaml",
	)
}

func assetsDnsConfigmapYaml() (*asset, error) {
	bytes, err := assetsDnsConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/configmap.yaml", size: 422, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0x2e, 0xda, 0x99, 0xd8, 0xe4, 0x61, 0x59, 0x9b, 0x47, 0x79, 0x29, 0x9a, 0xa2, 0x38, 0xda, 0xe6, 0xa3, 0x98, 0xc7, 0xbb, 0xe7, 0xd8, 0xd, 0xe1, 0x9, 0xb7, 0xae, 0x87, 0x8b, 0x16, 0x81}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x51\x6f\xdb\x38\x12\x7e\xf7\xaf\xf8\x56\x0e\xb6\xbb\xb8\x55\xd2\x62\xd1\xc3\x9e\xb6\xd9\xdb\x5c\xe2\x5c\x83\x6b\x12\x23\x76\xf7\x1e\x82\xa0\x60\xa8\x91\x45\x94\x22\x79\x24\xa5\xac\x91\xfa\xbf\x1f\x28\xc5\x36\x65\xb9\x2e\x0e\x38\x3d\xd9\x9c\x99\x8f\x33\xc3\x6f\x86\xc3\xcf\x42\xe5\x19\x2e\x18\x55\x5a\xcd\xc8\x8f\x98\x11\x7f\x90\x75\x42\xab\x0c\xcc\x18\x77\xd2\xbc\x19\x55\xe4\x59\xce\x3c\xcb\x46\xc0\x18\x37\xac\x22\x08\x07\x47\x1e\xcc\xc3\xd6\xca\x8b\x8a\x46\x80\x62\x15\x39\xc3\x38\x65\xd0\x86\x94\x2b\x45\xe1\x53\x2e\x6b\xe7\xc9\xa6\xb9\x72\x23\x40\xb2\x47\x92\x2e\xe0\x20\xd2\x61\xc6\x64\x08\x0a\xce\x10\x0f\x42\x47\x92\xb8\xd7\xb6\x53\xac\x98\xe7\xe5\x87\xc8\x72\xaf\x2d\xe0\xa9\x32\x92\x79\x7a\xb1\x8a\x9c\x0e\x9f\xec\x01\x7c\x05\x02\x58\xbb\xd0\xfe\x26\xdb\x08\x4e\x67\x9c\xeb\x5a\xf9\x10\xf7\x56\x0f\xe0\x5a\x79\x26\x14\xd9\x0d\x68\xda\xa6\x20\xd6\x09\xf9\x12\x15\x5b\xec\x4f\x58\xf7\xb5\xf2\x69\x2d\xe5\x54\x4b\xc1\x97\x19\xae\x8a\x1b\xed\xa7\x96\x1c\x29\xbf\xd1\xe2\xba\xaa\x58\x38\xaa\x7b\x24\x5c\x5b\xca\x95\x4b\xf0\xb0\x11\x33\xbb\x70\xad\x2c\xe5\x5a\x15\xc9\x4f\x48\x4e\xc8\xf3\x93\x17\xcd\x93\x73\x6d\xa9\x10\x92\x62\x93\x46\xcb\xba\xa2\xeb\x10\x5a\x94\x96\x75\x0c\x01\x46\x2c\xd2\x4e\x69\x23\x05\xaa\xa0\x3f\x65\xbe\xcc\x10\xef\x10\x69\x58\x62\xf9\xad\x92\xcb\x0c\xde\xd6\x5b\x53\xa3\x6d\x7f\x9f\x4d\xfe\xa6\xda\xfa\x0c\x6f\x7f\x7e\xfb\x73\x84\x32\xcc\x24\x60\xac\xf6\x9a\x6b\x99\xe1\xe3\xc5\xf4\x7f\x47\x4a\x3d\x37\x7b\xd1\xe6\xe7\x07\xd0\xfe\xf6\x66\x0f\x5a\x45\xde\x0a\xbe\xdf\xb7\x18\x4d\x8a\x86\x14\x39\x37\xb5\xfa\x91\xb2\x48\xbd\xf4\xde\xfc\x93\x7c\xbc\x04\x98\x2e\xad\x25\x31\xe9\xcb\xbe\xa4\x75\xe5\x97\xd7\xbf\xbc\xee\x2d\x3b\x5e\x52\x70\xe7\xfd\x7c\x3e\x8d\x04\x42\x09\x2f\x98\xbc\x20\xc9\x96\x33\xe2\x5a\xe5\x2e\xc3\x5f\x63\xd3\x40\x40\x5d\xfb\x8d\xf0\x6d\x24\x73\x35\xe7\xe4\xdc\xbc\xb4\xe4\x4a\x2d\xf3\x0c\x6f\x22\x69\xc1\x84\xac\x2d\x45\xd2\xb7\x43\xf6\xa7\x4a\xe7\x94\x5a\x72\x5a\x36\x64\xff\xef\xb5\xe0\x88\xd7\x56\xf8\xe5\xb9\x56\x9e\xfe\xec\x25\xd1\x58\xd1\x08\x49\x0b\xca\x77\xe8\x77\x98\xed\xa5\x76\xde\xa5\xa1\x42\x0e\x50\xbd\x55\x8a\x82\x21\xd5\xe0\xe6\xec\x7a\x32\x9b\xdc\xfd\x31\xb9\x03\x53\x39\xce\x3f\x7c\x9c\xcd\x27\x77\x9f\x2e\x6e\xaf\xcf\xae\x6e\xc0\x2c\x7d\x2d\x52\x52\xcd\xd0\x8d\x80\x74\x75\x3e\x99\x45\x4e\x8c\xbb\xca\x87\xb6\x68\x7b\x2b\x1c\x19\x66\x99\xa7\x1c\x52\x38\x0f\x5d\xac\xdb\x54\xcc\xc6\x86\xc9\x9a\x32\x24\xb9\xe6\x9f\xc9\xa6\x96\x16\xc2\x79\xbb\x3c\xce\xa9\x60\xb5\xf4\xc7\xae\xe1\xc9\xa0\xb5\x44\xee\x9c\x3c\x0a\x75\xf2\xc8\x5c\x19\xad\xa5\x3c\xfa\xf3\x25\x76\xf1\xbb\xa1\x3a\xda\xb8\xd3\x5a\xc3\x08\x43\x81\x34\xa3\x48\x76\x3b\x9d\xdc\xcc\xde\x5f\x5d\xce\x3f\x5d\x9f\xdd\xfd\x6b\x72\x77\x9a\x6c\xbb\xf1\x82\x14\xb5\xf1\xf5\x49\x94\x44\xe6\xef\x6f\x67\xf3\xd9\xa7\xcb\xab\x0f\x93\xd3\x64\x7b\x32\xb1\xc6\x7c\x72\x3d\x1d\x28\x1c\xfb\xca\x24\xb1\x1b\x57\x97\xb3\xd3\x57\x3f\xe1\x55\xdb\xb2\x90\x5a\xa4\x6c\x93\x4c\xbc\x7b\xf7\x0e\xc9\xd1\xf3\xfa\x48\xb2\xf4\x60\x32\x57\x3d\xe0\x31\xae\xd9\x67\x02\x6b\xaf\x24\x6d\x99\x5d\x22\x70\x0b\x4f\xc2\x97\xf0\x25\x41\xcb\xbc\xe3\x5c\xbb\xfe\xca\x81\x79\x6f\xc5\x63\xed\xc9\x1d\x47\x38\xdc\x20\x2d\x90\xa6\x5b\x69\xaa\x95\x5c\x06\xbf\xb6\x39\x58\x25\xe1\xff\x26\xe2\xbe\x27\x4f\x65\xd8\x37\x54\xc2\xaf\xc8\x75\xaf\x79\xe4\xc4\x65\x20\x68\x7a\x06\xd7\xf0\x4f\xc2\xb8\x9e\xb8\x08\x8c\x6b\x38\x84\x0a\xf0\xeb\xb4\xdc\xff\xfe\xb0\x4a\x06\x50\x21\xe2\x4b\xf2\xbc\x5c\xa7\x0f\x57\x53\x14\x56\x57\x78\xb9\xfe\x43\x53\x80\x28\x60\x76\x2a\xb9\xfb\x84\x71\xa7\x3f\x1c\xfd\x90\x8b\x05\x7e\x4f\x8e\x9e\xb7\x35\xb5\x4a\xf0\x17\x57\x6a\xeb\x5b\x17\x1a\xbe\x3a\x3e\x7a\xee\x97\xd8\x2a\xf9\xf1\xc7\xd1\x2e\x5c\x81\xfb\x7b\x24\x47\x7f\x4f\x90\xd2\x7f\xf0\x1a\xdf\x7f\x1f\xec\xc7\xc2\x74\xee\x23\x55\x84\xd7\x78\x78\xf8\x35\x9c\x85\xda\xb1\xc6\x3a\x1b\xf7\x2f\x7b\x26\x0f\xa7\xc9\xd1\xf3\xda\x78\x47\xbb\x10\xfd\x9c\x6a\x45\x7d\x77\xc6\xf8\x68\x72\xe6\x29\x6a\x21\x68\xcf\x50\x14\x78\x22\x2c\xc8\x87\x62\x15\x79\x94\x39\xb7\x03\xf0\xef\x40\x1c\x29\xa1\xb4\x47\x3d\x00\x7b\x2a\x49\x85\x38\x6c\xdb\x57\x5f\xae\xe3\x0d\x9a\xae\x7d\xe8\xb8\xda\x82\x19\x81\x5a\xb1\x86\x09\xc9\x1e\x85\x14\x7e\xb9\xb3\xcd\xcc\x33\x49\x20\xe5\xad\xa0\x00\x54\xcb\x1c\xf4\x67\xe8\x31\x42\xc5\x1b\x8a\xa2\xa5\xf0\x7a\x07\xe1\x90\x93\x24\x4f\xf9\x68\xdf\x21\x3c\x8f\xd7\xe9\xfc\x76\xea\xc7\xf8\x47\x2d\x64\x0e\x06\x45\x4f\x51\x7d\x74\x54\x8a\x63\x0e\x75\xa4\x6b\x0b\x5e\x3b\xaf\xab\x8d\xd3\x85\x90\x9e\x2c\xe5\x21\xec\x1d\xec\x85\x25\x83\xb4\x41\x32\xc6\xd1\xf3\x6e\xff\xe9\x4a\xa8\x57\x52\xbf\x1d\x28\xaa\xce\xd7\x33\x63\x48\xe5\x58\x37\xa8\xad\x13\xa1\x70\x86\x2d\x19\x83\x9a\xfa\x2e\xce\xcc\x9e\x9a\xea\xf4\x85\x09\xea\x2d\x15\x5b\xe5\x8e\x94\x0f\xab\xbd\x06\x00\xf1\x52\xa3\xe5\xeb\xaa\x33\x5a\xe1\x2b\x11\xff\x36\x08\x71\x17\xab\x65\xf3\x9e\xa5\x41\x2a\xe6\xb7\x17\xb7\xd9\x1e\xa2\x33\xaf\x2b\xc1\x99\x94\x4b\x78\x0d\xd6\x68\x91\x83\xa9\x25\x84\xe2\x5a\x39\xe1\x3c\x29\x8f\x47\x2a\x59\x23\xb4\x1d\xa0\xde\x91\x91\xe1\xc6\xdb\x77\xf0\x95\xce\x45\x21\x28\x47\xd3\x3d\x56\x02\xdf\x14\x51\xbe\xc3\x42\x80\x57\x66\x27\xcc\xc1\x51\x7f\xf9\xf2\xd2\x68\x0f\xeb\x0d\xa3\x5e\xeb\x86\x1a\x08\xc5\x69\xa9\xd2\x0d\xe5\xdb\x58\x5b\xf2\x72\x4b\xcc\xd3\x49\x57\x24\xed\x94\xb0\x6d\xe7\xe0\xda\x2c\xc1\xcb\xda\xf6\x6b\x61\xa7\xad\x38\x49\x64\xfa\x13\x1c\x50\xab\x70\xc5\x0e\x5b\x77\x74\x6a\xb9\x72\xeb\x41\xea\xa2\xbb\xac\x5e\x04\xdd\x34\xb4\x1d\x84\xbe\x31\xf5\x77\xcb\xd7\xcc\x44\xa3\xd6\x81\x87\xe0\xe6\x13\x9e\x2a\xd7\x9b\x71\x53\x7c\xa6\x65\x86\xf5\x7b\xa4\x9f\xd3\x6e\xfe\xdd\x95\x1d\x9a\xd1\xc2\x5a\x3b\xa1\x8d\x06\x30\x7b\x46\xb6\x30\xf8\x2e\x0d\x65\xb8\xdc\x82\x78\x2d\xc3\xb8\x21\xb4\xda\x38\x3a\x5e\x2f\x12\x98\x94\x08\x8f\x01\xef\xe0\x34\x7c\xc9\x3c\x2e\x6e\x66\x21\x68\x26\x9f\xd8\xd2\xad\x2f\x34\x68\xd5\xea\x86\x91\xc5\x6d\xe6\x61\x6d\x02\x8a\xb6\x19\x26\xa1\x8f\xba\xd1\x7f\x03\x00\x00\xff\xff\x0d\xe0\xc2\x7f\x6d\x0f\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 3949, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0xbf, 0x58, 0xec, 0xf6, 0x31, 0x19, 0x6e, 0xfc, 0xdb, 0x26, 0xd9, 0xf2, 0xab, 0x10, 0xa4, 0xc2, 0xfa, 0xe2, 0xa5, 0x38, 0x86, 0xb5, 0xbe, 0x33, 0x57, 0xb7, 0x8e, 0xf1, 0x6d, 0x8, 0x4f}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x31\x8e\xc3\x30\x0c\x04\x7b\xbd\x62\xe1\xab\x7d\x77\x69\xf5\x88\x94\xe9\x69\x8b\x89\x09\x4b\x94\x60\x52\x7a\x7f\xe0\x20\x70\xbb\x3b\x98\xd9\x45\x53\xc4\x9d\x0a\x5b\xa3\x95\x03\x35\x79\xf0\x61\x52\x35\x62\xdc\x42\x61\xa7\x44\x4e\x31\x00\x4a\x85\x23\x6a\x63\xb5\x4d\x9e\x3e\xaf\xb9\x9b\xf3\x31\x27\xb5\x00\x64\x5a\x38\xdb\xc9\x01\x3f\x30\x76\x0c\xca\x9d\xe1\x15\x34\xaa\x24\x24\x6e\xac\x49\xf4\x85\xaa\xd8\xfb\xc2\xa0\x54\xc4\xce\x14\x7c\x23\xff\x02\x76\xde\x57\x04\xd4\xc4\x3e\xce\x6b\xfa\x95\xfa\x77\x74\x9d\x33\x0f\xce\x11\xd3\xff\x14\xde\x01\x00\x00\xff\xff\x5d\x93\xd4\xc7\xc5\x00\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 197, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0x58, 0x5b, 0x27, 0x35, 0x35, 0xa8, 0x83, 0x18, 0xa7, 0x5c, 0x37, 0xad, 0xcd, 0xa4, 0xc2, 0x99, 0xbb, 0x31, 0xb0, 0xeb, 0x92, 0x77, 0xed, 0x2e, 0xaa, 0x36, 0x63, 0x27, 0x7d, 0x81, 0x7b}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xca\x31\x0e\x82\x21\x0c\x06\xd0\x9d\x53\xf4\x02\x0c\xae\xdd\x3c\x83\x89\x7b\x53\x3e\x63\xa3\x14\x42\x0b\xe7\x37\x26\xff\xf6\x86\xf7\x31\x6f\x4c\x0f\xac\x63\x8a\xbb\xea\xd8\x9e\x45\xa6\x3d\xb1\xc2\x86\x33\x9d\x5b\xe9\x48\x69\x92\xc2\x85\xc8\xa5\x83\xa9\x79\x5c\x8e\x29\x0a\xa6\x31\xe1\xf1\xb6\x57\x56\xfd\xee\x48\xac\xfa\x2f\xbf\x00\x00\x00\xff\xff\x35\xeb\xbe\x6a\x5d\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 93, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x5, 0x20, 0x2d, 0xba, 0x9a, 0x85, 0x88, 0x10, 0xdb, 0x35, 0xe, 0xe, 0xe3, 0xff, 0x10, 0x87, 0xf9, 0xa, 0x29, 0x43, 0x41, 0xc0, 0x80, 0x19, 0x37, 0xda, 0xd, 0xe4, 0x2a, 0xb3, 0xf5}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xbd\x4e\x03\x41\x0c\x84\xfb\x7d\x8a\x91\xa8\x0f\x09\x21\x9a\x6d\xa1\xa1\x41\x27\xf1\xd3\x3b\x7b\x43\x58\xe1\xfd\xd1\xda\x09\xe2\xed\x51\x2e\x10\xa0\x40\x94\x1e\x7f\xfe\xc6\xaf\xb9\x2e\x11\xf7\x1c\xfb\x9c\x18\xa4\xe7\x27\x0e\xcb\xad\x46\xec\x2f\x42\xa1\xcb\x22\x2e\x31\x00\x67\xb8\x93\x42\x64\x83\xd1\x21\x8e\xb1\xab\x9e\x0b\x03\x50\xa5\xd0\xba\x24\x46\xb4\xce\x6a\x2f\xf9\xd9\xa7\xa4\x3b\x73\x8e\x69\xa9\x16\x00\x95\x0d\xd5\x0e\x1e\xfc\x60\xa4\xf7\x88\x03\x60\x9d\xe9\x58\xf2\x79\x76\x3b\xe3\x2d\xab\x62\x43\xc8\xce\x5b\x11\xcf\x49\x54\xdf\x51\xa4\xca\x96\xcb\x79\x00\x8c\xca\xe4\x6d\xfc\x69\x05\x7a\x1b\xbe\xb6\x4e\xeb\x93\x5f\xf1\x71\x11\x71\x75\xb9\x0e\x2e\x63\x4b\x9f\xd7\xe8\x04\x8c\xe6\x2d\x35\x8d\x78\xbc\x99\x7f\x0b\x26\x4f\xfd\x5f\xc9\x37\x74\x12\x3d\x5c\xcf\xe1\x23\x00\x00\xff\xff\xd5\x5c\x70\x51\x6f\x01\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 367, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x8c, 0xf0, 0x23, 0xe1, 0xdd, 0x14, 0xc3, 0x47, 0x73, 0x18, 0xcf, 0x43, 0x33, 0x7b, 0x7f, 0xfa, 0xa3, 0x77, 0x89, 0x7d, 0x2f, 0x55, 0x92, 0x77, 0xcd, 0x55, 0x3e, 0xce, 0x6a, 0xce, 0xd3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/cluster-dns-cr.yaml": assetsClusterDnsCrYaml,

	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/configmap.yaml": assetsDnsConfigmapYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"cluster-dns-cr.yaml": {assetsClusterDnsCrYaml, map[string]*bintree{}},
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"configmap.yaml":            {assetsDnsConfigmapYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml":            {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml":      {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":              {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
