// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/dns/cluster-role-binding.yaml (223B)
// assets/dns/cluster-role.yaml (397B)
// assets/dns/daemonset.yaml (6.362kB)
// assets/dns/metrics/cluster-role-binding.yaml (279B)
// assets/dns/metrics/cluster-role.yaml (246B)
// assets/dns/metrics/role-binding.yaml (293B)
// assets/dns/metrics/role.yaml (284B)
// assets/dns/namespace.yaml (369B)
// assets/dns/service-account.yaml (85B)
// assets/dns/service.yaml (520B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\x31\x8e\x83\x40\x0c\x05\xd0\x7e\x4e\xe1\x0b\xc0\x6a\xbb\xd5\x74\x9b\xdc\x80\x48\xe9\xcd\x8c\x09\x0e\x60\xa3\xb1\x87\x22\xa7\x8f\x10\x4a\x45\x3a\x17\xfe\xff\xfd\x89\x25\x47\xb8\xce\xd5\x9c\x4a\xa7\x33\x5d\x58\x32\xcb\x23\xe0\xca\x77\x2a\xc6\x2a\x11\x4a\x8f\xa9\xc5\xea\xa3\x16\x7e\xa1\xb3\x4a\x3b\xfd\x59\xcb\xfa\xb3\xfd\x86\x85\x1c\x33\x3a\xc6\x00\x00\x20\xb8\x50\x04\x5d\x49\x6c\xe4\xc1\x9b\x2c\x16\xac\xf6\x4f\x4a\x6e\x31\x34\x70\x78\x37\x2a\x1b\x27\xfa\x4f\x49\xab\x78\xf8\xc4\xf6\xe7\xe3\xb6\x15\xd3\xa9\xa7\xe8\x4c\x1d\x0d\x3b\x74\x9a\x1d\xbe\xd3\xef\x00\x00\x00\xff\xff\xfa\x62\xe7\x50\xdf\x00\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 223, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xf6, 0x2a, 0x3b, 0x84, 0xd7, 0x3e, 0xc4, 0xe1, 0x70, 0x66, 0x31, 0xda, 0xc4, 0x2f, 0x53, 0x27, 0x29, 0x13, 0xfe, 0x80, 0x36, 0xc5, 0xa1, 0x70, 0xdc, 0x2d, 0xef, 0xcf, 0xe0, 0xc4, 0xeb}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x4e\xc4\x30\x10\x44\x7b\x7f\x85\x75\xfd\x05\xd1\xa1\xb4\x14\xf4\x14\xf4\x1b\x67\x50\x96\xe4\x76\xad\xdd\x75\x4e\xe2\xeb\x51\x2e\x57\xa0\x8b\xa0\x9b\x19\xd9\xf3\x3c\x9e\x59\xc6\x3e\xbf\x2e\xcd\x03\xf6\xae\x0b\x12\x55\xfe\x80\x39\xab\xf4\xd9\x06\x2a\x1d\xb5\x98\xd4\xf8\x9b\x82\x55\xba\xf9\xc5\x3b\xd6\xa7\xf5\x39\x5d\x10\x34\x52\x50\x9f\x72\x16\xba\xa0\xcf\x5a\x21\x3e\xf1\x67\x9c\x47\xf1\x64\x6d\x81\xf7\xe9\x9c\xa9\xf2\x9b\x69\xab\xbe\x9d\x3c\xe7\xd3\x29\xe5\x6c\x70\x6d\x56\x70\xcf\x20\x63\x55\x96\xf0\x9b\x73\xd8\xca\x05\xbb\xa9\x3a\xee\x62\x63\x78\xa5\x3d\x5f\x61\xc3\xfd\xee\xc2\x1e\x37\x71\xa5\x28\x53\x3a\x02\xb7\x01\x90\xe0\xf2\x7b\xc1\xf1\x0d\xa1\x33\xc4\xb0\x32\xae\x0f\x84\x62\xa0\xc0\x1f\xcd\x8f\x5f\x73\x2c\xf6\x36\x7c\xa1\x04\x95\x02\xf7\xff\x00\x3f\x01\x00\x00\xff\xff\x76\x1b\x55\x2e\x8d\x01\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 397, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x84, 0xae, 0xd1, 0xba, 0xfa, 0x6b, 0xf8, 0x6e, 0x8d, 0x28, 0xc2, 0xa7, 0xaf, 0xc9, 0x3b, 0xc7, 0xcd, 0x80, 0xbe, 0xec, 0x98, 0xb4, 0x61, 0xa0, 0x9, 0xae, 0xa, 0xd8, 0xb2, 0x2e, 0x16, 0xf2}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6d\x57\xdb\xb8\xf2\x7f\xcf\xa7\x98\x35\xfc\x4b\xbb\xc5\x10\xda\xd2\xed\xdf\x2d\x7b\x37\x0b\x61\xe1\x6c\x81\x1c\x92\x6e\x5f\x70\xb8\x1c\x45\x9e\xc4\xba\x91\x25\xad\x24\x1b\x7c\x20\xdf\xfd\x1e\xc9\x71\x62\xc7\x81\xdd\xde\xa7\xb3\x7d\x91\x26\x9a\x99\x9f\x66\x46\xf3\x24\x31\x65\x22\x8e\xe0\x98\x60\x2a\xc5\x00\xed\x06\x51\xec\x37\xd4\x86\x49\x11\x01\x51\xca\xec\xe5\xfb\x1b\x9b\x20\x48\x8a\x3b\xfe\xd3\x28\x42\x11\x88\x88\x81\x93\x11\x72\x03\x44\x23\x18\xb4\x40\x2c\xe8\x4c\x58\x96\xe2\x86\x51\x48\xa3\x0d\x00\x8b\xa9\xe2\xc4\xa2\xfb\x0e\x50\xad\xfa\xef\xa8\x73\x46\xb1\x4b\xa9\xcc\x84\xbd\x20\x29\x46\x10\x0b\x33\xa7\x2a\xcd\xa4\x66\xb6\x38\xe2\xc4\x98\x92\x68\x0a\x63\x31\x0d\x85\x8c\x31\xa4\x9a\x59\x46\x09\x9f\x73\x53\x29\x2c\x61\x02\xb5\xa9\xd0\x43\xaf\x69\x1d\x11\x60\x13\x58\x4a\x26\x08\xcc\xac\x6a\x5b\x71\x78\x7a\x3f\xe3\xbc\x2f\x39\xa3\x45\x04\x67\xe3\x0b\x69\xfb\x1a\x0d\x0a\xbb\xe0\xb2\xa8\x53\x26\x88\x65\x52\x9c\xa3\x31\x4e\x64\xce\x7e\x42\x38\x1f\x11\x3a\x1d\xca\xcf\x72\x62\x2e\x45\x4f\x6b\xa9\x17\x72\x54\xa6\x29\x71\xae\xbe\x86\x80\x4a\x8d\xb1\x30\x01\xdc\x2c\xc8\x44\x4f\x8c\xa7\x85\x54\x8a\x71\xb0\x03\xc1\x1e\x5a\xba\x37\xe7\xdc\x3b\x92\x1a\xc7\x8c\x63\x5d\x24\x97\x3c\x4b\xf1\xdc\x39\x70\x61\xf9\xd2\x76\x07\xc3\x26\x61\xc9\xb4\xa0\x02\xa4\x8e\xbf\x4f\x6c\x12\x41\x7d\x87\x1a\x87\x46\x12\x5f\x0a\x5e\x44\x60\x75\xb6\x14\x55\x52\x37\xf7\x59\xf8\xbd\x2f\xb5\x8d\xe0\xe0\xed\xc1\xdb\x1a\x4a\xfb\x04\xdc\xb9\x4a\x2b\xa9\xe4\x11\x7c\x39\xee\x7f\x3b\x52\x68\xa9\x5a\x8b\x36\x3c\x5a\xa2\x39\xed\x99\x40\x63\xfa\x5a\x8e\x30\xaa\xf1\x27\xd6\xaa\x5f\xd0\xd6\x97\x00\x54\xe9\x89\x04\x09\xb7\x49\x93\xe2\x75\xf9\xd0\xf9\xd0\x69\x2c\x1b\x9a\xa0\xd3\xe7\x74\x38\xec\xd7\x08\x4c\x30\xcb\x08\x3f\x46\x4e\x8a\x01\x52\x29\x62\x13\xc1\x7e\x5d\x54\xa1\x66\x32\x5e\x4f\x33\x19\xa5\x68\xcc\x30\xd1\x68\x12\xc9\xe3\x08\xf6\x6b\xd4\x31\x61\x3c\xd3\x58\xa3\xd6\xdd\xe3\x62\x58\x66\x76\x1d\x30\x67\x39\xfe\x45\x5c\xf1\xbe\xf3\x8c\xca\x07\xff\x86\x2b\x0e\x6a\x27\x6f\x64\xa6\x29\x9a\xa8\x11\xcc\xbf\x67\x68\xac\x69\x9a\x4a\x55\x16\xc1\x41\x27\x6d\x2c\xa6\x98\x4a\x5d\x44\xf0\x43\xe7\x9c\xad\x14\x92\x69\x36\xc2\x50\x8f\x08\x0d\x95\x96\xf7\xc5\x37\x14\x15\x9f\xd7\xb5\x50\x0f\x43\x2e\x27\x56\x1a\x1b\xa3\xd6\x8d\x75\x83\x34\xd3\x18\x72\x66\x2c\x8a\x90\xc4\xb1\x46\x63\x0e\xa3\xff\xdf\x3f\x78\xd7\xe0\xb3\xdc\x84\x94\xa9\x04\x75\x68\x32\x66\xd1\x1c\x0e\x3f\x0f\x6e\x7b\x47\xc7\xa7\xbd\xdb\xab\x41\xf7\xf6\xeb\xd9\xf0\xf4\xb6\xdb\x1b\xdc\xee\xbf\xf9\x70\xfb\xcb\xd1\xf9\xed\xe0\xb4\xfb\xe6\xe0\xfd\xce\x92\xab\x77\x74\xfc\x07\x7c\x2d\x9c\xa3\x9f\x8f\xfe\x14\xce\x5a\xbe\x67\xd0\x1a\x96\x65\xca\x58\x8d\x24\x3d\x74\xe1\x19\xed\xed\xed\xbf\xf9\x61\xb7\xb3\xdb\xd9\xdd\x77\x4e\x78\xbb\xd7\xf6\x02\x6a\x1b\xba\xaa\x78\xe8\x2b\x99\xe5\x66\x4f\x69\x96\x13\x8b\xee\xfb\x2e\xd5\xb6\x25\x32\xa7\x87\x53\x2c\x9e\x91\x9c\x62\xf1\xa7\xcb\x5e\xe3\x7c\xaa\x62\x95\xa2\xd5\x8c\x9a\x7f\x39\x34\xf7\x9f\x08\xcd\x77\xcb\xd0\x7c\xba\xfe\xaf\x56\xf8\x9a\x75\x4f\x29\xea\x7c\xf3\x47\x1d\xa0\xd6\x54\xcb\x36\xec\x8c\xe2\x39\xea\xbf\x4c\x8b\xf5\x19\xe4\xc6\x06\x29\x2c\xde\x37\xaa\x9b\xb3\x9f\x71\x9c\x60\xbc\xd2\xd5\x9e\x6f\xa2\x89\x34\xd6\xf8\x40\x79\xa6\x83\x7a\xa6\x9a\x13\x50\xe4\x70\xd1\x3d\xef\x0d\x7a\x57\xbf\xf5\xae\xfc\xa8\x74\xf4\xf9\xcb\x60\xd8\xbb\xba\x3d\xbe\x3c\xef\x9e\x5d\xac\x1b\x99\x2a\x71\x14\x79\x5b\x0d\x87\x74\x76\xd4\x1b\xd4\x94\xd8\x84\x23\x37\x50\x80\xd4\x50\x4e\x64\x06\x15\xd1\xc4\x62\x0c\xae\x82\x80\x1c\x57\x33\x96\x69\x48\x5d\x5c\x0e\x7b\x11\x9c\x48\x0d\x42\xde\xed\x00\x0a\x93\x69\x04\x9b\xa0\x41\xaf\x96\x46\x4e\x2c\xcb\xb1\x9c\xf5\x3e\xc2\x58\x6a\x40\x42\x93\x26\x61\xa7\x81\x49\x04\x10\xce\x88\x81\x3b\x66\x13\x87\xb5\x6a\xaf\xc9\xc6\x63\x76\x0f\x77\x8c\x73\x20\xdc\x48\x18\x21\x90\x38\xc6\x78\xb7\x86\x93\x13\x9e\x61\x04\x81\x8f\x91\x50\xe3\x84\x19\xab\x8b\x5d\xa9\x50\x98\x84\x8d\x6d\xb8\x42\x30\x39\x0d\x5a\xd3\x55\xcd\x75\x7b\x23\x26\xf6\x46\xc4\x24\xf5\x22\x40\x6b\x3f\x1e\xeb\x46\x7c\xd7\x66\x07\x7f\x46\x61\x26\x41\x31\x85\xae\xf3\x6c\xd4\x7b\x98\x26\x0a\xb6\xff\x21\x47\x06\x42\x05\x8f\x70\xef\x2a\x3d\x4c\x9d\x89\x8f\x8f\x3e\xc6\x3e\xc2\x1d\x61\xf6\x23\xe0\x3d\xb3\xd0\xd9\x86\x61\xef\xea\xbc\x8e\x70\xd9\xef\x5d\x0c\x4e\xcf\x4e\x86\xb7\xe7\xdd\xab\x5f\x7b\x57\x87\xc1\xd2\xd6\x09\x0a\xf4\xa7\xd9\x4c\xb5\xa0\x26\x7e\x7a\x39\x18\x0e\x6e\x4f\xce\x3e\xf7\x0e\x83\x65\x1c\xd6\x39\x86\xbd\xf3\x7e\x8b\x61\xd7\xa6\x2a\xa8\xab\x71\x76\x32\x38\xdc\xde\x81\x6d\x9f\xf5\x10\x6a\x08\xc9\x22\x74\xe0\xd3\xa7\x4f\x10\x6c\x3d\x54\x01\x38\x6b\x48\x6e\xc2\x39\x99\x22\x10\x3f\xe7\x4b\x4d\x74\x01\x2e\x55\x96\x61\x20\x79\x5c\xa6\x90\x5f\xdf\x36\x40\xac\xd5\x6c\x94\x59\x34\xf5\x93\xa7\x0a\xc2\x31\x84\xe1\x92\x1a\x4a\xc1\x0b\xb7\xf1\xd2\xc8\x59\xe0\x7e\x2f\x4c\x6a\x6a\x72\x97\xb8\x7d\x4b\xa7\xc7\xb2\x51\x3a\x63\xa4\xdc\x05\x76\xd8\x05\x93\xd3\x5b\xa6\x4c\x83\xec\xe2\xdb\xe4\x14\x98\x70\xf0\x95\xdd\xd7\x3f\xdd\xcc\x82\x16\x94\xb3\xf8\x04\x2d\x4d\x2a\xff\xc0\x59\x1f\xc6\x5a\xa6\x40\x79\x66\x2c\x6a\x57\x1b\x81\x8d\x41\x95\x05\x6d\x17\xbe\x22\xa4\xce\x45\x06\x73\xd4\x84\x83\xd5\x0c\x4d\x0b\xd3\x4a\x88\x25\x30\x1b\xc1\x59\x3f\x7f\xb7\xe3\x3e\xdf\xfb\xcf\x77\x20\x73\xd4\x6e\xbc\xf5\x55\xc4\xad\x2f\x56\x76\x61\x98\x20\xd8\x3b\x09\x9c\xb8\x7c\x17\x6b\x80\x9d\xdd\xce\xc0\x18\x15\x97\x45\x8a\xc2\xce\x73\xf4\xd7\x4c\x17\x1a\xa4\x70\x27\x84\x1a\x2e\x15\x8a\x81\x25\x74\x0a\x2f\x2f\x07\xfd\xfd\xb7\xaf\x20\x04\x9b\x48\x83\x4e\x2f\x21\x6d\x0b\xd8\x64\xca\xf5\x45\x37\xc6\x03\x97\x24\x1e\x11\x4e\x04\x45\x6d\xbc\x9e\xae\xb1\x31\x5f\x4b\x08\x4d\x98\x98\xc0\xf1\xc5\x00\x6c\xa2\x65\x36\x49\xbc\xea\x2b\x78\x34\x8d\xcd\xe1\xcb\xed\x98\x4d\x20\xb4\xd0\x85\x9f\x82\xad\x87\x65\x01\x9d\x05\xf0\xda\x24\x6e\x37\x77\x40\x39\x9d\xed\x6e\x3d\x34\xeb\xcb\x2c\x78\x9c\x68\x54\x10\xe6\x10\xfc\xfd\x63\xb0\xbd\x02\x5f\xfe\x5b\xc0\x77\xbb\xff\xed\x1d\xe0\xb5\xa5\x0a\x5e\x6b\xb4\xba\x38\xec\xfc\x0f\xcc\xf9\xcf\xee\xf7\x6a\x65\x43\x17\x41\xcc\x25\xc8\xd6\xc3\x77\xee\xa8\xae\xbf\xbf\x99\xad\xb0\xb4\x12\x05\x80\x29\x73\xf8\x72\xeb\x25\xe6\x84\xbb\x9d\xbd\x20\xbb\x99\x05\xaf\x56\xe1\xc1\x65\xcc\xf5\x35\x04\x5b\x7f\x0b\x20\xc4\xdf\xa1\x03\x2f\x5e\x38\x91\x4d\xa6\xca\x44\x84\x50\x20\x74\xe0\xe6\xe6\xa3\xab\x2a\x62\x8d\x3f\xe6\x99\x7d\x3d\x37\x31\xb8\x39\x0c\xb6\x1e\x2a\xf1\x35\xfc\x23\x8d\x64\xda\x5a\x1f\xb3\x96\x59\x02\x37\x5a\x0b\x8d\x95\x4d\xf8\xa2\x62\x62\xb1\x36\x0a\x80\x2f\x5e\x6c\x0c\x77\x08\x13\xb4\xae\xb1\xb1\xb8\x56\x32\xcc\x0a\xc0\x57\x2c\x3b\xa3\x90\x16\xb2\x16\xd8\x5d\x82\xc2\x99\xad\xfd\x5c\x35\xbf\xad\x2f\xd0\x64\x66\xdd\xc4\x25\x35\x10\xc5\x20\x13\x24\x27\x8c\x93\x11\xe3\xcc\x16\x2b\xdb\x0c\x2c\xe1\x08\x28\x7c\x0d\x02\x2a\x33\x1e\xbb\xd6\x64\xac\x3b\xda\xda\x86\x6c\xec\x6b\x77\xb5\x03\x33\x10\x23\x47\x8b\xf1\x46\xfb\xcc\x42\x31\x8f\x2a\xef\xfd\xef\x6f\xc2\x59\xf0\xd4\x31\x6d\xc2\xcf\x19\xe3\x31\x10\x10\x78\x57\xeb\x0a\x65\x01\xad\x1b\xec\x0a\x94\xcc\x34\xd0\xcc\x58\x99\x2e\x34\x1e\x33\x6e\x51\x63\xec\x6c\x5e\xc1\x5e\x84\xef\x26\x6c\x3d\xac\xb6\xd5\xb2\x71\x34\x1a\xc9\x8f\xcf\xb4\x92\x52\xd7\xae\x52\xe8\x2b\x59\xd9\x77\x97\x4a\xb8\x76\xd1\x9e\xab\xa0\xd5\x49\xbe\xab\x9c\xf2\x44\x27\x99\xa7\x95\x2a\xf3\xaa\x62\x2e\xc3\xf7\x66\xb6\x56\x00\x00\x69\x22\xc1\x47\xf6\xac\x14\xaa\xfe\x6b\xe7\x34\x3c\xe1\x8a\x1f\x5b\xb6\xaf\x6e\xd2\x0a\xfa\x75\x61\xef\x7c\x34\xbc\x3c\xbe\x8c\xd6\x84\x3f\xb1\x32\x65\x94\x70\x5e\xb8\xce\x46\x72\xc9\x62\x20\xa2\x00\x26\xa8\x14\xc6\x5f\x6f\x2d\x8c\x30\x21\x39\xab\x0d\xef\x15\xea\x15\x2a\xee\xe6\xd9\x75\x11\x91\xca\x98\x8d\x19\xc6\x90\x97\x2f\x94\x2e\x0a\x05\x62\xbc\x12\x9b\xae\xa3\xa8\x15\x33\x5b\x31\xf0\xf8\x38\x9f\x3b\x9e\xe7\x6b\x5b\x5d\xf1\xba\xcc\x70\x29\xab\x31\x95\x39\xc6\x4b\x5b\x7d\x54\x53\x8d\xee\x36\x59\xa6\x8e\xef\x8a\xcb\xe9\x06\xa8\x54\x05\xd0\x24\xd3\xcd\x24\x59\xa9\x3f\x86\x23\x2a\x78\xdf\x81\x17\x7e\x90\x6c\xd0\x32\xe1\x66\xd3\xf6\x40\xd3\x38\xbc\x6f\x7e\x10\xa9\x2e\x9d\xb1\x30\xd5\x8d\xeb\x18\xc7\x24\xe3\xd5\xe6\x6e\x18\x1d\x20\x47\x6a\xa5\x5e\x02\x4c\xb3\x11\x6a\x81\x6e\xaa\x63\x72\x4f\x9a\x08\x38\x13\xd9\x7d\x49\x9c\x73\x95\xf7\xac\xd6\x0b\xed\xfa\x57\xca\x72\xf5\x9c\xa8\xa8\x76\xad\xba\x20\xe9\x73\x57\x4b\x00\x66\x31\x6d\x98\x15\xc2\x14\x8b\x08\xaa\xb7\xd3\x35\x8f\x5d\x2b\xa4\x67\xae\x7d\x6e\xc9\xdf\xf9\x36\x56\x31\xd6\xdc\x01\x01\x6c\xa1\x30\x82\x93\x36\xf4\xba\x0b\xf7\xa6\xbb\xb9\x6a\xb4\xcf\x5a\x68\x25\x77\x37\x02\x26\xc5\xc2\xc6\x4d\x3f\x58\xb9\x04\x30\x2e\xfa\x74\x26\xc0\xcd\x99\xc5\x9d\xeb\x16\xbb\x30\x2c\x25\x10\x08\xe7\x60\x09\x13\x0b\x0d\x43\x90\xca\x91\xa4\x8e\xa0\xe7\x5a\x80\x23\x94\xad\x67\x60\x9d\xc8\xa4\x28\xf7\x28\xcd\xb8\x92\x9c\x33\x31\x29\x33\xdd\xaf\xeb\xfa\xca\x52\x9d\x0b\x69\x31\xf2\x73\x69\xec\xff\x9e\xe0\xdf\x4a\x1c\x2f\x6a\xd0\x32\x13\x4e\xcf\x04\x41\xa1\xa6\x28\x7c\xe3\xca\xd4\x42\xf8\x65\x26\x38\x9b\xfa\xbb\x68\x6d\x60\xad\x41\xec\xb8\x31\xdf\xdd\x44\x4b\xa4\x58\xde\x89\x57\xd5\x28\x99\x92\xfb\x2f\x55\xf3\xe3\x18\xc1\x7e\xe7\xff\x36\xfe\x19\x00\x00\xff\xff\x0c\x36\xef\x8e\xda\x18\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 6362, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0xe, 0x8d, 0xf5, 0x64, 0x24, 0xc6, 0x75, 0xe6, 0x3f, 0xb1, 0xc2, 0xef, 0xfc, 0x99, 0xde, 0xab, 0x6e, 0xba, 0x3e, 0x22, 0x76, 0x5a, 0x92, 0xf4, 0x44, 0x43, 0x49, 0xce, 0x86, 0xbe, 0xbb}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xb1\x4a\x04\x41\x0c\x86\xfb\x79\x8a\xbc\xc0\xae\xd8\x1d\xd3\xa9\x85\xfd\x09\xf6\xb9\x99\x9c\x1b\x77\x27\x19\x92\xcc\x16\x3e\xbd\x2c\x8a\x08\xe2\xb5\x81\x7c\xdf\xff\xad\x2c\x35\xc3\xd3\x36\x3c\xc8\xce\xba\xd1\x23\x4b\x65\x79\x4b\xd8\xf9\x95\xcc\x59\x25\x83\x5d\xb0\xcc\x38\x62\x51\xe3\x0f\x0c\x56\x99\xd7\x93\xcf\xac\x77\xfb\x7d\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xaa\xf8\xd4\x54\x38\xd4\x0e\x92\x8f\xcb\x3b\x95\xf0\x9c\x26\xf8\xd2\xbd\x90\xed\x5c\xe8\xa1\x14\x1d\x12\x3f\x7f\xdd\xb4\x51\x2c\x34\x7c\x5a\x4f\xfe\x7d\xf6\x8e\x85\x32\x68\x27\xf1\x85\xaf\xf1\x9b\x6c\xba\xd1\x99\xae\x87\xf9\x4f\xc7\x7f\x6b\x00\xb0\xf3\xb3\xe9\xe8\x37\xba\xd2\x67\x00\x00\x00\xff\xff\x5b\x52\x00\xaa\x17\x01\x00\x00")

func assetsDnsMetricsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleBindingYaml,
		"assets/dns/metrics/cluster-role-binding.yaml",
	)
}

func assetsDnsMetricsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role-binding.yaml", size: 279, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0x95, 0x6f, 0xa4, 0xd5, 0xed, 0x48, 0x27, 0x41, 0x56, 0x5c, 0xea, 0x5c, 0x89, 0xdc, 0xc1, 0x44, 0x91, 0xd4, 0xb, 0x18, 0x85, 0x79, 0x75, 0xaa, 0x6e, 0xb5, 0x98, 0xbe, 0xc6, 0x33, 0x43}}
	return a, nil
}

var _assetsDnsMetricsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcd\x31\x4b\x34\x41\x0c\x87\xf1\x7e\x3e\x45\xe0\xad\x77\x5f\xec\x64\x5a\x05\x3b\x0b\x05\xfb\xec\xce\xdf\xdb\x70\x3b\xc9\x90\x64\x0e\xf4\xd3\x8b\x70\xb6\x0f\x3f\x78\xfe\xd1\xd3\x39\x23\xe1\xe4\x76\x22\x48\x81\x86\x46\xdb\x17\x0d\xb7\x8e\x3c\x30\x83\xd2\x28\x76\xe7\x01\x7a\x7e\x7d\xa7\x8e\x74\xd9\x83\xa0\x6d\x98\x68\x16\x1e\xf2\x01\x0f\x31\xad\xe4\x1b\xef\x2b\xcf\x3c\xcc\xe5\x9b\x53\x4c\xd7\xeb\x63\xac\x62\xff\x6f\x0f\xe5\x2a\xda\xea\xdf\xf0\xcd\x4e\x94\x8e\xe4\xc6\xc9\xb5\x10\x29\x77\x54\x6a\x1a\x4b\x37\x95\x34\x17\xbd\x14\x9f\x27\xa2\x96\x85\x78\xc8\x8b\xdb\x1c\xf1\x4b\x17\xb2\x01\xe7\x34\x5f\x6d\x40\xe3\x90\xcf\x5c\xc5\x0a\x91\x23\x6c\xfa\x8e\x3b\x6b\x1a\x88\x42\x74\x83\x6f\xf7\x74\x41\x96\x9f\x00\x00\x00\xff\xff\x9f\xa8\x4d\x6c\xf6\x00\x00\x00")

func assetsDnsMetricsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsClusterRoleYaml,
		"assets/dns/metrics/cluster-role.yaml",
	)
}

func assetsDnsMetricsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/cluster-role.yaml", size: 246, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0xdb, 0xe0, 0x95, 0x65, 0xae, 0x53, 0x96, 0x3a, 0x5f, 0x5e, 0x8b, 0x69, 0xe2, 0x7d, 0x5, 0xbf, 0x1f, 0x3a, 0xf, 0xff, 0xd0, 0x6b, 0x23, 0x4f, 0xfd, 0x11, 0x7f, 0x57, 0xd4, 0x4a, 0x8b}}
	return a, nil
}

var _assetsDnsMetricsRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\xb1\x4e\xc4\x40\x0c\x04\xd0\x7e\xbf\xc2\x3f\x90\x20\xba\xd3\x76\xd0\xd0\x1f\x12\xbd\x6f\xd7\x97\x98\x64\xed\x95\xed\x4d\xc1\xd7\x23\xa4\x48\x54\x20\x5d\x3b\x9a\xd1\x1b\xec\xfc\x41\xe6\xac\x92\xc1\x6e\x58\x66\x1c\xb1\xaa\xf1\x17\x06\xab\xcc\xdb\xc5\x67\xd6\xa7\xe3\x39\x6d\x2c\x35\xc3\x55\x77\x7a\x65\xa9\x2c\x4b\x6a\x14\x58\x31\x30\x27\x00\xc1\x46\x19\xba\x69\xa3\x58\x69\xf8\xb4\x5d\xfc\x8c\xbd\x63\xa1\x0c\xda\x49\x7c\xe5\x7b\x4c\x55\x3c\x99\xee\x74\xa5\xfb\xcf\x14\x3b\xbf\x99\x8e\xfe\x8f\x9f\x00\x7e\xf9\xbf\x34\x1f\xb7\x4f\x2a\xe1\x39\x4d\x67\xfb\x9d\xec\xe0\x42\x2f\xa5\xe8\x90\x78\xf0\x65\x53\xe1\x50\x63\x59\x20\x7d\x07\x00\x00\xff\xff\xb9\xd9\xab\x8d\x25\x01\x00\x00")

func assetsDnsMetricsRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleBindingYaml,
		"assets/dns/metrics/role-binding.yaml",
	)
}

func assetsDnsMetricsRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role-binding.yaml", size: 293, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x7d, 0xc7, 0x45, 0x33, 0xc4, 0xd8, 0xf, 0x8d, 0x89, 0x8d, 0x6, 0x47, 0xa7, 0xa, 0x6b, 0x17, 0xf5, 0x5f, 0x5a, 0x2f, 0xd8, 0xf9, 0x6, 0x71, 0xaa, 0x78, 0x8d, 0xb5, 0x7a, 0xf6, 0x99}}
	return a, nil
}

var _assetsDnsMetricsRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x4e\xec\x40\x0c\x45\xfb\xf9\x0a\x6b\x5f\x9d\x7d\xa2\x5b\x4d\x8d\x44\x47\x01\x12\xbd\x77\xe6\x42\xac\x24\xe3\x91\xed\x04\xc1\xd7\xa3\xcd\x06\x89\xca\xf7\x1e\x59\x3e\xfe\x47\x2f\x3a\xc3\xa9\x01\x15\x95\xae\x5f\xd4\x4d\x17\xc4\x88\xd5\x29\x94\xbc\x18\x77\xd0\xe3\xf3\x2b\x2d\x08\x93\xe2\x84\x56\xbb\x4a\x8b\xc4\x5d\xde\x60\x2e\xda\x32\xd9\x95\xcb\x99\xd7\x18\xd5\xe4\x9b\x43\xb4\x9d\xa7\x8b\x9f\x45\xff\x6f\x0f\x69\x92\x56\xf3\x2e\x4a\x0b\x82\x2b\x07\xe7\x44\xd4\x78\x41\xfe\xe3\x1b\xa6\x8b\x1f\xd8\x3b\x17\x64\xd2\x8e\xe6\xa3\xbc\xc7\x50\x9b\x27\x5b\x67\x78\x4e\x03\x71\x97\x27\xd3\xb5\xfb\xed\xca\x40\xa7\x53\x22\x32\xb8\xae\x56\x70\x30\x87\x6d\x52\xe0\x7b\xf9\xfd\xf8\xde\xba\xd6\x5b\xd8\x60\xd7\x63\xf9\x03\xb1\xcf\x59\xfc\x1e\x3e\x39\xca\x98\x7e\x02\x00\x00\xff\xff\x29\x39\xda\x05\x1c\x01\x00\x00")

func assetsDnsMetricsRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsMetricsRoleYaml,
		"assets/dns/metrics/role.yaml",
	)
}

func assetsDnsMetricsRoleYaml() (*asset, error) {
	bytes, err := assetsDnsMetricsRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/metrics/role.yaml", size: 284, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xf2, 0x4e, 0x40, 0x91, 0xd8, 0x5e, 0x1c, 0x98, 0xb6, 0x2f, 0x11, 0x2a, 0x15, 0x8f, 0xe4, 0x7c, 0xfe, 0xc6, 0x31, 0xf3, 0xb2, 0xa0, 0x38, 0xb2, 0x3f, 0x15, 0x5a, 0x33, 0x12, 0xd2, 0x88}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcd\x4e\xc4\x30\x0c\x84\xef\x79\x8a\x51\x38\x2f\x3f\xd7\xbc\x03\x5c\x90\xb8\xbb\x8d\x97\x35\x4d\xed\x2a\x76\xcb\xeb\xa3\xb2\x15\xac\xb4\xc7\x68\x46\xf3\x7d\xf1\x24\x5a\x0b\xde\x68\x66\x5f\x68\xe4\x44\x8b\x7c\x70\x77\x31\x2d\xd8\x5e\xd2\xcc\x41\x95\x82\x4a\x02\x48\xd5\x82\x42\x4c\x7d\x7f\x02\xb6\xb0\xfa\x45\xce\xf1\x28\xf6\xa4\x56\xf9\xe4\xdc\x78\x0c\xeb\x05\x39\x27\x40\x69\xe6\xf2\x5f\x3b\x55\xf5\x04\x34\x1a\xb8\x1d\x13\x0f\x70\x0e\x6c\xd4\x56\x46\x18\x68\x33\xa9\xa8\xbc\xb0\x56\xd1\x4f\x98\x62\x5a\x07\x06\xd5\x59\x7c\x97\x42\x5c\x28\x8e\x82\xef\xf1\xdf\x38\x68\x11\xbf\xd7\xea\xab\x9e\x1a\x6f\xdc\x0a\xf2\x73\x3e\x98\xd4\x9a\x7d\xdf\x78\xcd\xa6\x12\xd6\x77\x62\x18\x9a\xd9\x84\xb3\x75\xbc\x73\xdf\x64\xe4\xd7\x6b\x0a\x1b\xbe\x78\x0c\x87\xec\x16\xe2\xbf\xbf\xbb\x1e\xed\x8e\x3a\xb6\xd5\x83\xfb\xcd\x70\x41\x8e\xbe\x72\x4e\x3f\x01\x00\x00\xff\xff\x82\x6d\x29\x03\x71\x01\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 369, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0xab, 0x50, 0x84, 0x61, 0x5f, 0x41, 0xf4, 0x17, 0x3b, 0x6, 0x84, 0xc0, 0x5f, 0x4f, 0xbb, 0xd8, 0x1d, 0xae, 0x26, 0x3e, 0x1f, 0x29, 0x2c, 0x84, 0x6d, 0x5e, 0xc1, 0x87, 0x97, 0x5f, 0xc9}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x09\xc4\x30\x0c\x05\xd0\xde\x53\x68\x81\x2b\xae\x55\x77\x33\x1c\xa4\x17\xf2\x0f\x11\xc1\xb2\xb1\x14\xcf\x1f\x02\xe9\x1e\xbc\xd3\xbc\x32\xfd\x31\x97\x29\x7e\xaa\xfd\xf2\x2c\x32\x6c\xc3\x0c\xeb\xce\xb4\xbe\xa5\x21\xa5\x4a\x0a\x17\x22\x97\x06\xa6\xea\xf1\x3a\x86\x28\x98\xfa\x80\xc7\x61\x7b\x7e\x9e\xba\x03\x00\x00\xff\xff\x8e\x2c\xf1\x2e\x55\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 85, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x12, 0x50, 0x4d, 0x67, 0x2f, 0x1b, 0x74, 0xa0, 0xa4, 0xbb, 0xa7, 0x59, 0xe9, 0x5a, 0xc6, 0xc1, 0x1a, 0xf8, 0x5f, 0xff, 0x5, 0xdb, 0xc, 0x10, 0x8b, 0xc1, 0x0, 0xcc, 0xf, 0x9f, 0x3a}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x31\x6f\xe2\x40\x10\x85\x7b\xff\x8a\x27\xe8\x4e\xc0\x09\xdd\x51\x9c\xdb\xa3\x89\x52\x80\x14\x48\x3f\x5e\x4f\xcc\x8a\xf5\x8c\xb5\x33\x06\xf1\xef\x23\x4c\x42\x80\x14\x69\x56\xda\x7d\x9f\x3e\x3d\xbd\xdd\x47\xa9\x4b\xbc\x70\x3e\xc4\xc0\x05\x75\xf1\x95\xb3\x45\x95\x12\x87\x79\x31\x86\x50\xcb\x93\xe1\xb4\x8e\x02\x4f\x12\x55\x9c\x0c\x24\x35\x48\x44\x9d\x3c\xaa\x18\x28\x33\x8c\x1d\xe4\xc8\xbd\x78\x6c\xb9\xb0\x8e\x43\x59\x00\x63\x84\xd4\x9b\x73\x7e\x5a\xe3\x18\x53\x42\xc5\xa0\xde\xb5\x25\x8f\x81\x52\x3a\xa1\x25\xa1\x86\xeb\xd9\x00\x1b\x27\x0e\xae\x19\xd1\x1e\x8d\x40\xa7\xd9\xed\x2c\x9d\x0e\x95\x4a\xd4\x62\x05\x70\x09\x4a\x2c\xfe\x0c\x17\xa7\xdc\xb0\xaf\x87\xa7\x2b\x90\xd5\x35\x68\x2a\xb1\x5d\xae\xef\x05\x53\x0f\xdd\x8f\x92\x2f\xe8\x2a\xda\xfc\xbf\x15\xb5\xec\x39\x86\xdb\x36\xff\xe6\x8b\xbf\xdf\x54\x77\xd8\x83\x6a\x8c\xcd\x6a\xb9\x2a\xb1\x95\xa0\x6d\xcb\xe2\x38\xee\x58\x60\x97\xbf\x81\x6b\xa7\x49\x9b\x13\xde\x98\xbc\xcf\x8c\x86\x9c\xcf\x33\xb1\x50\x95\x3e\xf6\xfb\x84\x9e\xf9\x64\x97\xf5\x31\xc5\x68\xdf\x57\x9c\x85\x9d\x6d\x16\xf5\xf7\x4e\xcd\xcf\xa5\x47\xd7\xfc\xd7\xa8\x78\x0f\x00\x00\xff\xff\x82\x42\x75\xa4\x08\x02\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 520, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0x69, 0xc5, 0xf1, 0xe, 0xc, 0x77, 0xe5, 0x78, 0xce, 0xfc, 0xc2, 0x41, 0xf8, 0x21, 0x87, 0x8a, 0xb7, 0x67, 0xdd, 0x48, 0x94, 0x63, 0x79, 0x69, 0x4e, 0x38, 0x53, 0x3c, 0xdb, 0xc7, 0x13}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/metrics/cluster-role-binding.yaml": assetsDnsMetricsClusterRoleBindingYaml,

	"assets/dns/metrics/cluster-role.yaml": assetsDnsMetricsClusterRoleYaml,

	"assets/dns/metrics/role-binding.yaml": assetsDnsMetricsRoleBindingYaml,

	"assets/dns/metrics/role.yaml": assetsDnsMetricsRoleYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"metrics": {nil, map[string]*bintree{
				"cluster-role-binding.yaml": {assetsDnsMetricsClusterRoleBindingYaml, map[string]*bintree{}},
				"cluster-role.yaml":         {assetsDnsMetricsClusterRoleYaml, map[string]*bintree{}},
				"role-binding.yaml":         {assetsDnsMetricsRoleBindingYaml, map[string]*bintree{}},
				"role.yaml":                 {assetsDnsMetricsRoleYaml, map[string]*bintree{}},
			}},
			"namespace.yaml":       {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml": {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":         {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
