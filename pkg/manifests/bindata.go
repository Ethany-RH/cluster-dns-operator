// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster-dns-cr.yaml (418B)
// assets/dns/cluster-role-binding.yaml (333B)
// assets/dns/cluster-role.yaml (212B)
// assets/dns/configmap.yaml (422B)
// assets/dns/daemonset.yaml (3.981kB)
// assets/dns/namespace.yaml (197B)
// assets/dns/service-account.yaml (93B)
// assets/dns/service.yaml (367B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsClusterDnsCrYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x6e\xe3\x30\x10\x44\x7b\x7e\xc5\x00\xae\xa5\x83\x5b\xb6\xe7\x2b\xdc\x1c\x0e\x38\x20\xfd\x86\x5c\x59\x9b\x50\x4b\x82\xbb\x32\x90\x7c\x7d\x20\x47\x31\x82\x24\xe5\x12\x9c\x99\x37\x73\xc0\x59\xcd\xa9\x14\xee\x48\x55\x27\xb9\xc0\x1a\x27\x99\x24\xe1\x4a\x65\x65\x03\x75\x06\xb5\x56\x84\x33\xc8\xd1\x57\x75\x59\x78\x0c\xd4\xe4\x81\xbb\x49\xd5\x88\xac\x36\xd6\xc6\x6a\xb3\x4c\x3e\x4a\xfd\x75\x3d\x52\x69\x33\x1d\xc3\xb3\x68\x8e\xf8\x5d\x56\x73\xee\xa7\xbf\xff\xc3\xc2\x4e\x99\x9c\x62\x00\x94\x16\x8e\xc8\x3c\xd1\x5a\x7c\xbf\xad\x51\xe2\x88\xbb\xdb\x90\xde\xb5\x43\x56\x1b\x6a\xe3\x4e\x5e\x3b\x02\x70\xc0\x1f\xb5\xb5\x33\x7c\x26\x47\xd5\xf2\x02\x9f\x19\xf7\x2f\x89\x14\x99\x0b\x3b\xdf\xde\xf7\x14\xec\x76\x1b\x32\xea\xe3\x13\x27\x1f\x03\x30\x89\x52\x91\x57\xee\xb6\x71\x0d\xdf\x0b\xed\xf2\xcf\x34\x61\x5b\x2a\xde\x48\xf6\x7e\xe7\x7f\x10\xfb\x61\x2c\xac\x26\x7a\xb9\x61\xc8\x97\xb9\xb7\xf0\xdd\xf3\x54\x17\x12\x8d\x1f\xe7\x58\x6a\xa2\x12\xde\x02\x00\x00\xff\xff\x37\x0d\x61\xe1\xa2\x01\x00\x00")

func assetsClusterDnsCrYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsClusterDnsCrYaml,
		"assets/cluster-dns-cr.yaml",
	)
}

func assetsClusterDnsCrYaml() (*asset, error) {
	bytes, err := assetsClusterDnsCrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/cluster-dns-cr.yaml", size: 418, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x10, 0x67, 0x1c, 0xa7, 0x2f, 0x42, 0x1f, 0xa1, 0x54, 0x90, 0x91, 0x93, 0x2c, 0x15, 0x5a, 0x5d, 0x9c, 0x32, 0x3d, 0x5, 0x61, 0x1f, 0xbf, 0xbb, 0x5e, 0xc3, 0xb2, 0xab, 0xdc, 0x7b, 0x44}}
	return a, nil
}

var _assetsDnsClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x4b\x04\x41\x0c\x85\xfb\xfc\x8a\x70\xfd\xae\xd8\x49\x3a\xb5\xb7\x38\xc1\x3e\x37\x93\xf3\xe2\xed\x66\x96\x49\x66\x41\x7f\xbd\x0c\x83\x20\xa8\x60\x97\xe2\xbd\xf7\x7d\xb9\xaa\x65\xc2\xc7\xa5\x79\x48\x3d\x96\x45\x1e\xd4\xb2\xda\x2b\xf0\xa6\x2f\x52\x5d\x8b\x11\xd6\x13\xa7\x99\x5b\x5c\x4a\xd5\x0f\x0e\x2d\x36\x5f\xef\x7c\xd6\x72\xb3\xdf\xc2\x2a\xc1\x99\x83\x09\x10\x11\x8d\x57\x21\x4c\x63\x6f\xca\xe6\x94\xcd\xc1\xdb\xe9\x4d\x52\x38\xc1\x84\x83\xf8\x2c\x75\xd7\x24\xf7\x29\x95\x66\x01\x5f\xc5\x1e\x1e\xb7\x6f\x9c\x84\xb0\x6c\x62\x7e\xd1\x73\x4c\xdf\x36\xa1\x96\x45\x8e\x72\xee\xc8\x1f\x0f\xc0\x5f\x12\xff\xd8\x6d\x2e\xf5\xa9\x87\xba\xe8\xc1\xdf\x3d\x64\x25\x1f\xaa\x3c\x54\xe9\xd7\x66\x07\x1c\xe0\x33\x00\x00\xff\xff\xdb\x7c\x21\xe3\x4d\x01\x00\x00")

func assetsDnsClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleBindingYaml,
		"assets/dns/cluster-role-binding.yaml",
	)
}

func assetsDnsClusterRoleBindingYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role-binding.yaml", size: 333, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0x50, 0xb3, 0x9f, 0xeb, 0xa, 0xd9, 0xd9, 0x2b, 0xb7, 0xb, 0xed, 0x20, 0xa9, 0xa6, 0xdc, 0xbc, 0xc5, 0x1a, 0x4b, 0xc6, 0x69, 0x9e, 0xfd, 0xbb, 0x72, 0xdb, 0x46, 0x45, 0x59, 0x60, 0xa2}}
	return a, nil
}

var _assetsDnsClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\x3d\x6b\xc4\x30\x0c\x40\x77\xff\x0a\x71\x7b\x52\xba\x15\xaf\x1d\xba\x77\xe8\xae\xb3\x05\x27\xe2\x48\x46\x92\x53\xe8\xaf\x2f\x89\xb3\xbd\xf7\xd0\xc7\xc6\x52\x33\x7c\xb6\xe1\x41\xf6\xad\x8d\x12\x76\xfe\x21\x73\x56\xc9\x60\x4f\x2c\x2b\x8e\x78\xa9\xf1\x1f\x06\xab\xac\xdb\x87\xaf\xac\x6f\xc7\x7b\xda\x29\xb0\x62\x60\x4e\x00\x82\x3b\x65\x28\xf3\xcc\x52\xc5\x73\x15\x4f\x36\x1a\x79\x4e\x0b\x60\xe7\x2f\xd3\xd1\xfd\x9c\x5d\xe0\xf1\x48\x00\x46\xae\xc3\x0a\xdd\x8d\xa4\x76\x65\x09\xbf\xcc\xc9\x0e\x2e\x34\xa5\x6b\x9d\x70\x7e\xf1\x8e\xb3\x1f\x64\xcf\x7b\xb7\xb1\xc7\x05\xbf\x18\xe5\x95\xfe\x03\x00\x00\xff\xff\x8e\xf7\xdc\x36\xd4\x00\x00\x00")

func assetsDnsClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsClusterRoleYaml,
		"assets/dns/cluster-role.yaml",
	)
}

func assetsDnsClusterRoleYaml() (*asset, error) {
	bytes, err := assetsDnsClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/cluster-role.yaml", size: 212, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x87, 0xae, 0xab, 0xc3, 0xc4, 0xe7, 0x95, 0x3c, 0x7d, 0x7a, 0xff, 0xe2, 0xeb, 0x3a, 0x89, 0x28, 0xa, 0x61, 0xef, 0x77, 0x3a, 0x21, 0x34, 0x13, 0xcf, 0xbf, 0x5f, 0xbe, 0x98, 0x56, 0x89, 0xd2}}
	return a, nil
}

var _assetsDnsConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8c\x4f\x4b\x03\x31\x10\xc5\xef\xf9\x14\x0f\x3c\x77\x6b\x59\x56\x30\xd7\x9e\xf5\xe8\x7d\x4c\x66\x9b\xd0\x6c\x12\x66\x92\xa2\xa8\xdf\x5d\x6a\x75\xb5\xe0\x3b\xbd\x7f\xfc\x8e\x31\x7b\x8b\x7d\xc9\x73\x3c\x3c\x50\x35\x54\xe3\x13\x8b\xc6\x92\x2d\x4e\x3b\xb3\x70\x23\x4f\x8d\xac\x01\x6e\xf0\x48\x0b\x23\x2a\x94\x1b\xa8\x41\x7a\x6e\x71\x61\x03\x64\x5a\x58\x2b\x39\xb6\x28\x95\xb3\x86\x38\xb7\x8d\x4b\x5d\x1b\xcb\xc6\x67\x35\x3f\x8c\x7d\x11\x9e\x63\x62\x8b\x77\x03\x00\x83\x9d\xc6\x69\xc4\xdb\x57\x38\x8b\x45\x8a\xe8\x1a\x03\x53\x6a\x61\x8d\xc7\xfe\xcc\x92\xb9\xb1\xe2\x9b\x3e\xa4\xe2\x28\x21\xe6\x0d\x79\x2f\x03\x49\x25\xc4\x7a\x77\x31\xbf\xd8\xb3\x6a\xf1\x8a\x98\x95\x5d\x17\xbe\x5a\x7a\xd5\x26\x4c\xcb\x55\x39\x53\x4a\x2d\x48\xe9\x87\xf0\x3f\x7e\x7d\x7f\xac\xae\x4a\x59\xb8\x05\xee\x0a\x7b\xbf\x9b\xc6\xbf\xc3\xcb\x2b\x06\x6c\xb9\xb9\xad\xb0\x96\x74\x1a\x5c\xc9\xf3\x7a\x70\xe4\x02\x63\xbc\x5d\x0b\xe1\x54\xc8\x9b\x0b\xff\x33\x00\x00\xff\xff\x6c\x54\x72\x1f\xa6\x01\x00\x00")

func assetsDnsConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsConfigmapYaml,
		"assets/dns/configmap.yaml",
	)
}

func assetsDnsConfigmapYaml() (*asset, error) {
	bytes, err := assetsDnsConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/configmap.yaml", size: 422, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0x2e, 0xda, 0x99, 0xd8, 0xe4, 0x61, 0x59, 0x9b, 0x47, 0x79, 0x29, 0x9a, 0xa2, 0x38, 0xda, 0xe6, 0xa3, 0x98, 0xc7, 0xbb, 0xe7, 0xd8, 0xd, 0xe1, 0x9, 0xb7, 0xae, 0x87, 0x8b, 0x16, 0x81}}
	return a, nil
}

var _assetsDnsDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x61\x6f\xe3\x36\x12\xfd\xee\x5f\xf1\xaa\x04\x4d\x8b\xab\x36\xbb\x28\xf6\xd0\x53\x37\xbd\xe6\x12\xe7\x36\xb8\x4d\x62\xc4\xde\xde\x87\x20\x58\x30\xd4\xc8\x22\x96\x22\x79\x24\xa5\xd4\xc8\xfa\xbf\x1f\x28\x45\x36\x65\x79\x53\x14\xa8\x3e\xd9\x9c\xe1\xe3\xcc\xe3\x9b\xd1\xe8\xb3\x50\x79\x86\x73\x46\x95\x56\x73\xf2\x13\x66\xc4\x6f\x64\x9d\xd0\x2a\x03\x33\xc6\x1d\x37\x6f\x26\x15\x79\x96\x33\xcf\xb2\x09\x70\x80\x6b\x56\x11\x84\x83\x23\x0f\xe6\x61\x6b\xe5\x45\x45\x13\x40\xb1\x8a\x9c\x61\x9c\x32\x68\x43\xca\x95\xa2\xf0\x29\x97\xb5\xf3\x64\xd3\x5c\xb9\x09\x20\xd9\x03\x49\x17\x70\x10\xf9\x30\x63\x32\x04\x07\x67\x88\x07\xa3\x23\x49\xdc\x6b\xdb\x39\x56\xcc\xf3\xf2\x43\xb4\x73\xef\x5e\xc0\x53\x65\x24\xf3\xf4\xbc\x2b\x0a\x3a\x3c\x72\x00\xf0\x15\x08\xa0\x0f\xa1\xfd\x4d\xb6\x11\x9c\x4e\x39\xd7\xb5\xf2\x21\xef\xad\x1f\xc0\xb5\xf2\x4c\x28\xb2\x1b\xd0\xb4\xa5\x20\xf6\x09\x7c\x89\x8a\x2d\xf7\x13\xd6\x3d\xad\x7d\x56\x4b\x39\xd3\x52\xf0\x55\x86\xcb\xe2\x5a\xfb\x99\x25\x47\xca\x6f\xbc\xb8\xae\x2a\x16\xae\xea\x0e\x09\xd7\x96\x72\xe5\x12\xdc\x6f\xcc\xcc\x2e\x5d\x6b\x4b\xb9\x56\x45\xf2\x03\x92\x63\xf2\xfc\xf8\xd9\xf3\xf8\x4c\x5b\x2a\x84\xa4\x78\x4b\xa3\x65\x5d\xd1\x55\x48\x2d\xa2\xa5\xcf\x21\xc0\x88\x65\xda\x39\x6d\xac\x40\x15\xfc\x67\xcc\x97\x19\xe2\x13\x22\x0f\x4b\x2c\xbf\x51\x72\x95\xc1\xdb\x7a\xbb\xd5\x68\x3b\x3c\x67\xc3\xdf\x4c\x5b\x9f\xe1\xed\x8f\x6f\x7f\x8c\x50\xc6\x4c\x02\xc6\x6a\xaf\xb9\x96\x19\x3e\x9e\xcf\xfe\x3c\x52\xea\xb9\xd9\x8b\xb6\x38\x7b\x01\xed\x1f\x6f\xf6\xa0\x55\xe4\xad\xe0\xfb\x63\x8b\xd1\xa4\x68\x48\x91\x73\x33\xab\x1f\x28\x8b\xdc\x4b\xef\xcd\xbf\xc9\xc7\x4b\x80\xe9\x68\x2d\x89\x49\x5f\x0e\x2d\x6d\x28\x3f\xbd\xfe\xe9\xf5\x60\xd9\xf1\x92\x42\x38\xef\x17\x8b\x59\x64\x10\x4a\x78\xc1\xe4\x39\x49\xb6\x9a\x13\xd7\x2a\x77\x19\xfe\x1e\x6f\x0d\x02\xd4\xb5\xdf\x18\xdf\x46\x36\x57\x73\x4e\xce\x2d\x4a\x4b\xae\xd4\x32\xcf\xf0\x26\xb2\x16\x4c\xc8\xda\x52\x64\x7d\x3b\x56\x7f\xaa\x74\x4e\xa9\x25\xa7\x65\x43\xf6\x2f\xaf\x05\x47\xbc\xb6\xc2\xaf\xce\xb4\xf2\xf4\xfb\x80\x44\x63\x45\x23\x24\x2d\x29\xdf\x91\xdf\xcb\x6a\x2f\xb5\xf3\x2e\x0d\x15\xf2\x82\xd4\x5b\xa7\x28\x19\x52\x0d\xae\x4f\xaf\xa6\xf3\xe9\xed\x6f\xd3\x5b\x30\x95\xe3\xec\xc3\xc7\xf9\x62\x7a\xfb\xe9\xfc\xe6\xea\xf4\xf2\x1a\xcc\xd2\xd7\x32\x25\xd5\x8c\xc3\x08\x48\x97\x67\xd3\x79\x14\xc4\x41\x57\xf9\xd0\x16\x6d\x6f\x85\x23\xc3\x2c\xf3\x94\x43\x0a\xe7\xa1\x8b\xbe\x4d\xc5\x6a\x6c\x98\xac\x29\x43\xd2\xf2\x99\x5a\x5a\x0a\xe7\xed\xea\xd5\xb6\xe7\xed\x18\x5c\xc3\x93\x51\xab\x89\xc2\x3b\x7e\x10\xea\xf8\x81\xb9\x32\x5a\x4b\x79\xf4\xe7\x4b\x1c\xf2\x37\x63\x77\xb4\x3c\xa4\xb5\x86\x11\x86\x82\x88\x26\x91\xed\x66\x36\xbd\x9e\xbf\xbf\xbc\x58\x7c\xba\x3a\xbd\xfd\xcf\xf4\xf6\x24\xd9\x46\xba\x24\x45\x6d\xbe\x43\x51\x25\xd1\xf6\xf7\x37\xf3\xc5\xfc\xd3\xc5\xe5\x87\xe9\x49\xb2\xbd\xa9\xd8\x63\x31\xbd\x9a\x8d\x1c\x5e\xf9\xca\x24\x71\x18\x97\x17\xf3\x93\xa3\x1f\x70\xd4\xb6\x30\xa4\x16\x29\xdb\x90\x8b\x77\xef\xde\x21\x39\x7c\xea\xaf\x28\x4b\x8f\xfe\x04\xb9\x47\xeb\xc1\x41\x07\xb8\x62\x9f\x09\xac\x7d\x65\x69\xcb\xec\x0a\x41\x7b\x78\x14\xbe\x84\x2f\x09\x5a\xe6\x9d\x26\xdb\xf5\x23\x07\xe6\xbd\x15\x0f\xb5\x27\xf7\x2a\xc2\xe1\x06\x69\x81\x34\xdd\x5a\x53\xad\xe4\x2a\xc4\xb9\xe5\x64\x9d\x84\xff\x1b\x06\x86\x91\x3c\x96\xe1\xdc\x50\x29\x3f\x23\xd7\x83\xe6\x92\x13\x97\x41\xc0\xe9\x29\x5c\xc3\x3f\x09\xe3\x06\xe6\x22\x28\xb2\xe1\x10\x2a\xc0\xf7\x34\xdd\xfd\x7a\xbf\x4e\x46\x50\x21\xe3\x0b\xf2\xbc\xec\xe9\xc4\xe5\x0c\x85\xd5\x15\x9e\xc7\x83\xd0\x34\x20\x0a\x98\x9d\x4a\xef\x1e\x61\xdc\xc9\x77\x87\xdf\xe5\x62\x89\x5f\x93\xc3\xa7\x6d\xcd\xad\x13\xfc\xcd\x95\xda\xfa\x36\x84\x86\xaf\x5f\x1d\x3e\x0d\x4b\x70\x9d\x7c\xff\xfd\x64\x17\xae\xc0\xdd\x1d\x92\xc3\x7f\x26\x48\xe9\x7f\x78\x8d\x6f\xbf\x0d\xfb\x0f\x84\xe9\xc2\x47\xaa\x08\xaf\x71\x7f\xff\x73\xb8\x0b\xb5\xb3\x1b\x3d\x1b\x77\xcf\x67\x26\xf7\x27\xc9\xe1\x53\xbf\x79\xc7\xbb\x10\x43\x4e\xb5\xa2\x61\x38\x07\xf8\x68\x72\xe6\x29\x6a\x31\x68\xef\x50\x14\x78\x24\x2c\xc9\x87\x62\x16\x79\xc4\x9c\xdb\x01\xf8\x6f\x10\x8e\x94\x50\xda\xa3\x1e\x81\x3d\x96\xa4\x42\x1e\xb6\xed\xbb\xcf\xaf\xeb\x0d\x9a\xae\x7d\xe8\xc8\xda\x82\x19\x81\x5a\xb1\x86\x09\xc9\x1e\x84\x14\x7e\xb5\x73\xcc\xdc\x33\x49\x20\xe5\xad\xa0\x00\x54\xcb\x1c\xf4\x7b\xe8\x41\x42\xc5\x07\x8a\xa2\x95\x70\x7f\x82\x70\xc8\x49\x92\xa7\x7c\xb2\xef\x12\x9e\x0e\x7a\x3a\xff\x98\xfa\x03\xfc\xab\x16\x32\x07\x83\xa2\xc7\xa8\x3e\x3a\x29\xc5\x39\x87\x3a\xd2\xb5\x05\xaf\x9d\xd7\xd5\x26\xe8\x42\x48\x4f\x96\xf2\x90\xf6\x0e\xf6\xd2\x92\x41\xda\x20\x39\xc0\xe1\xd3\x6e\x3f\xea\x4a\x68\x50\x52\xbf\xbc\x50\x54\x5d\xac\xa7\xc6\x90\xca\xd1\x37\xac\x6d\x10\xa1\x70\xc6\x2d\x1b\xa3\x9a\xfa\x26\x66\x66\x4f\x4d\x75\xfe\xc2\x04\xf7\x56\x8a\xad\x73\x27\xca\xfb\xf5\xde\x0d\x00\xf1\x52\xa3\xd5\xeb\xba\xdb\xb4\xc6\x57\x32\xfe\x65\x94\xe2\x2e\x56\xab\xe6\x3d\x4b\x23\x2a\x16\x37\xe7\x37\xd9\x1e\xa1\x33\xaf\x2b\xc1\x99\x94\x2b\x78\x0d\xd6\x68\x91\x83\xa9\x15\x84\xe2\x5a\x39\xe1\x3c\x29\x8f\x07\x2a\x59\x23\xb4\x1d\xa1\xde\x92\x91\xe1\x8d\xb8\xef\xe2\x2b\x9d\x8b\x42\x50\x8e\xa6\xfb\x98\x09\x7a\x53\x44\xf9\x8e\x0a\x01\x5e\x99\x9d\x34\x47\x57\xfd\xe5\xcb\x73\xa3\x7d\xd9\x6f\x9c\x75\xef\x1b\x6a\x20\x14\xa7\xa5\x4a\x37\x94\x6f\x73\x6d\xc5\xcb\x2d\x31\x4f\xc7\x5d\x91\xb4\x53\xc4\xb6\x9d\x83\x6b\xb3\x02\x2f\x6b\x3b\xac\x85\x9d\xb6\xe2\x24\x91\x19\x4e\x78\x40\xad\xc2\x2b\x77\xdc\xba\xa3\x5b\xcb\x95\xeb\x07\xad\x73\x2a\x58\x2d\xfb\xaa\xe8\xa6\xa5\xed\xa0\xf4\x07\x5f\x05\xdd\xf2\x15\x33\xd1\x28\xf6\xc2\x87\xe2\xe6\x11\x9e\x2a\x37\x98\x81\x53\x7c\xa6\x55\x86\xfe\x7b\x65\xc8\x69\x37\x1f\xef\xda\x5e\x9a\xe1\xc2\x5a\x3b\xc1\x4d\x46\x30\x7b\x46\xba\x30\x18\xaf\x0c\x65\xb8\xd8\x82\x78\x2d\xc3\xf8\x21\xb4\xda\x04\x7a\xd0\x2f\x12\x98\x94\x08\x1f\x0b\xde\xc1\x69\xf8\x92\x79\x9c\x5f\xcf\x43\xd2\x4c\x3e\xb2\x95\xeb\x5f\x68\xd0\xaa\xf5\x0d\x23\x8c\xdb\xcc\xcb\xda\x04\x14\x6d\x33\x4c\x43\x1f\x75\x93\xff\x07\x00\x00\xff\xff\x18\x3a\xdd\xfe\x8d\x0f\x00\x00")

func assetsDnsDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsDaemonsetYaml,
		"assets/dns/daemonset.yaml",
	)
}

func assetsDnsDaemonsetYaml() (*asset, error) {
	bytes, err := assetsDnsDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/daemonset.yaml", size: 3981, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0x19, 0x9, 0xcd, 0xdf, 0xcd, 0xfa, 0x4f, 0xab, 0x6, 0xd7, 0x1, 0xf2, 0xf9, 0x5f, 0x44, 0x25, 0x11, 0xfa, 0x84, 0xa1, 0x56, 0x24, 0x8a, 0xc8, 0x92, 0xac, 0x89, 0x54, 0x95, 0xea, 0x9a}}
	return a, nil
}

var _assetsDnsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x31\x8e\xc3\x30\x0c\x04\x7b\xbd\x62\xe1\xab\x7d\x77\x69\xf5\x88\x94\xe9\x69\x8b\x89\x09\x4b\x94\x60\x52\x7a\x7f\xe0\x20\x70\xbb\x3b\x98\xd9\x45\x53\xc4\x9d\x0a\x5b\xa3\x95\x03\x35\x79\xf0\x61\x52\x35\x62\xdc\x42\x61\xa7\x44\x4e\x31\x00\x4a\x85\x23\x6a\x63\xb5\x4d\x9e\x3e\xaf\xb9\x9b\xf3\x31\x27\xb5\x00\x64\x5a\x38\xdb\xc9\x01\x3f\x30\x76\x0c\xca\x9d\xe1\x15\x34\xaa\x24\x24\x6e\xac\x49\xf4\x85\xaa\xd8\xfb\xc2\xa0\x54\xc4\xce\x14\x7c\x23\xff\x02\x76\xde\x57\x04\xd4\xc4\x3e\xce\x6b\xfa\x95\xfa\x77\x74\x9d\x33\x0f\xce\x11\xd3\xff\x14\xde\x01\x00\x00\xff\xff\x5d\x93\xd4\xc7\xc5\x00\x00\x00")

func assetsDnsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsNamespaceYaml,
		"assets/dns/namespace.yaml",
	)
}

func assetsDnsNamespaceYaml() (*asset, error) {
	bytes, err := assetsDnsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/namespace.yaml", size: 197, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0x58, 0x5b, 0x27, 0x35, 0x35, 0xa8, 0x83, 0x18, 0xa7, 0x5c, 0x37, 0xad, 0xcd, 0xa4, 0xc2, 0x99, 0xbb, 0x31, 0xb0, 0xeb, 0x92, 0x77, 0xed, 0x2e, 0xaa, 0x36, 0x63, 0x27, 0x7d, 0x81, 0x7b}}
	return a, nil
}

var _assetsDnsServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xca\x31\x0e\x82\x21\x0c\x06\xd0\x9d\x53\xf4\x02\x0c\xae\xdd\x3c\x83\x89\x7b\x53\x3e\x63\xa3\x14\x42\x0b\xe7\x37\x26\xff\xf6\x86\xf7\x31\x6f\x4c\x0f\xac\x63\x8a\xbb\xea\xd8\x9e\x45\xa6\x3d\xb1\xc2\x86\x33\x9d\x5b\xe9\x48\x69\x92\xc2\x85\xc8\xa5\x83\xa9\x79\x5c\x8e\x29\x0a\xa6\x31\xe1\xf1\xb6\x57\x56\xfd\xee\x48\xac\xfa\x2f\xbf\x00\x00\x00\xff\xff\x35\xeb\xbe\x6a\x5d\x00\x00\x00")

func assetsDnsServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceAccountYaml,
		"assets/dns/service-account.yaml",
	)
}

func assetsDnsServiceAccountYaml() (*asset, error) {
	bytes, err := assetsDnsServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service-account.yaml", size: 93, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0x5, 0x20, 0x2d, 0xba, 0x9a, 0x85, 0x88, 0x10, 0xdb, 0x35, 0xe, 0xe, 0xe3, 0xff, 0x10, 0x87, 0xf9, 0xa, 0x29, 0x43, 0x41, 0xc0, 0x80, 0x19, 0x37, 0xda, 0xd, 0xe4, 0x2a, 0xb3, 0xf5}}
	return a, nil
}

var _assetsDnsServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xbd\x4e\x03\x41\x0c\x84\xfb\x7d\x8a\x91\xa8\x0f\x09\x21\x9a\x6d\xa1\xa1\x41\x27\xf1\xd3\x3b\x7b\x43\x58\xe1\xfd\xd1\xda\x09\xe2\xed\x51\x2e\x10\xa0\x40\x94\x1e\x7f\xfe\xc6\xaf\xb9\x2e\x11\xf7\x1c\xfb\x9c\x18\xa4\xe7\x27\x0e\xcb\xad\x46\xec\x2f\x42\xa1\xcb\x22\x2e\x31\x00\x67\xb8\x93\x42\x64\x83\xd1\x21\x8e\xb1\xab\x9e\x0b\x03\x50\xa5\xd0\xba\x24\x46\xb4\xce\x6a\x2f\xf9\xd9\xa7\xa4\x3b\x73\x8e\x69\xa9\x16\x00\x95\x0d\xd5\x0e\x1e\xfc\x60\xa4\xf7\x88\x03\x60\x9d\xe9\x58\xf2\x79\x76\x3b\xe3\x2d\xab\x62\x43\xc8\xce\x5b\x11\xcf\x49\x54\xdf\x51\xa4\xca\x96\xcb\x79\x00\x8c\xca\xe4\x6d\xfc\x69\x05\x7a\x1b\xbe\xb6\x4e\xeb\x93\x5f\xf1\x71\x11\x71\x75\xb9\x0e\x2e\x63\x4b\x9f\xd7\xe8\x04\x8c\xe6\x2d\x35\x8d\x78\xbc\x99\x7f\x0b\x26\x4f\xfd\x5f\xc9\x37\x74\x12\x3d\x5c\xcf\xe1\x23\x00\x00\xff\xff\xd5\x5c\x70\x51\x6f\x01\x00\x00")

func assetsDnsServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDnsServiceYaml,
		"assets/dns/service.yaml",
	)
}

func assetsDnsServiceYaml() (*asset, error) {
	bytes, err := assetsDnsServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/dns/service.yaml", size: 367, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x8c, 0xf0, 0x23, 0xe1, 0xdd, 0x14, 0xc3, 0x47, 0x73, 0x18, 0xcf, 0x43, 0x33, 0x7b, 0x7f, 0xfa, 0xa3, 0x77, 0x89, 0x7d, 0x2f, 0x55, 0x92, 0x77, 0xcd, 0x55, 0x3e, 0xce, 0x6a, 0xce, 0xd3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/cluster-dns-cr.yaml": assetsClusterDnsCrYaml,

	"assets/dns/cluster-role-binding.yaml": assetsDnsClusterRoleBindingYaml,

	"assets/dns/cluster-role.yaml": assetsDnsClusterRoleYaml,

	"assets/dns/configmap.yaml": assetsDnsConfigmapYaml,

	"assets/dns/daemonset.yaml": assetsDnsDaemonsetYaml,

	"assets/dns/namespace.yaml": assetsDnsNamespaceYaml,

	"assets/dns/service-account.yaml": assetsDnsServiceAccountYaml,

	"assets/dns/service.yaml": assetsDnsServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"cluster-dns-cr.yaml": {assetsClusterDnsCrYaml, map[string]*bintree{}},
		"dns": {nil, map[string]*bintree{
			"cluster-role-binding.yaml": {assetsDnsClusterRoleBindingYaml, map[string]*bintree{}},
			"cluster-role.yaml":         {assetsDnsClusterRoleYaml, map[string]*bintree{}},
			"configmap.yaml":            {assetsDnsConfigmapYaml, map[string]*bintree{}},
			"daemonset.yaml":            {assetsDnsDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml":            {assetsDnsNamespaceYaml, map[string]*bintree{}},
			"service-account.yaml":      {assetsDnsServiceAccountYaml, map[string]*bintree{}},
			"service.yaml":              {assetsDnsServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
